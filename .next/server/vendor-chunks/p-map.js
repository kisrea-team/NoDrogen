"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/p-map";
exports.ids = ["vendor-chunks/p-map"];
exports.modules = {

/***/ "(rsc)/./node_modules/p-map/index.js":
/*!*************************************!*\
  !*** ./node_modules/p-map/index.js ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ pMap),\n/* harmony export */   pMapSkip: () => (/* binding */ pMapSkip)\n/* harmony export */ });\n/* harmony import */ var aggregate_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aggregate-error */ \"(rsc)/./node_modules/aggregate-error/index.js\");\n\nasync function pMap(iterable, mapper, { concurrency = Number.POSITIVE_INFINITY, stopOnError = true } = {}) {\n    return new Promise((resolve, reject_)=>{\n        if (iterable[Symbol.iterator] === undefined && iterable[Symbol.asyncIterator] === undefined) {\n            throw new TypeError(`Expected \\`input\\` to be either an \\`Iterable\\` or \\`AsyncIterable\\`, got (${typeof iterable})`);\n        }\n        if (typeof mapper !== \"function\") {\n            throw new TypeError(\"Mapper function is required\");\n        }\n        if (!((Number.isSafeInteger(concurrency) || concurrency === Number.POSITIVE_INFINITY) && concurrency >= 1)) {\n            throw new TypeError(`Expected \\`concurrency\\` to be an integer from 1 and up or \\`Infinity\\`, got \\`${concurrency}\\` (${typeof concurrency})`);\n        }\n        const result = [];\n        const errors = [];\n        const skippedIndexesMap = new Map();\n        let isRejected = false;\n        let isResolved = false;\n        let isIterableDone = false;\n        let resolvingCount = 0;\n        let currentIndex = 0;\n        const iterator = iterable[Symbol.iterator] === undefined ? iterable[Symbol.asyncIterator]() : iterable[Symbol.iterator]();\n        const reject = (reason)=>{\n            isRejected = true;\n            isResolved = true;\n            reject_(reason);\n        };\n        const next = async ()=>{\n            if (isResolved) {\n                return;\n            }\n            const nextItem = await iterator.next();\n            const index = currentIndex;\n            currentIndex++;\n            // Note: `iterator.next()` can be called many times in parallel.\n            // This can cause multiple calls to this `next()` function to\n            // receive a `nextItem` with `done === true`.\n            // The shutdown logic that rejects/resolves must be protected\n            // so it runs only one time as the `skippedIndex` logic is\n            // non-idempotent.\n            if (nextItem.done) {\n                isIterableDone = true;\n                if (resolvingCount === 0 && !isResolved) {\n                    if (!stopOnError && errors.length > 0) {\n                        reject(new aggregate_error__WEBPACK_IMPORTED_MODULE_0__[\"default\"](errors));\n                        return;\n                    }\n                    isResolved = true;\n                    if (!skippedIndexesMap.size) {\n                        resolve(result);\n                        return;\n                    }\n                    const pureResult = [];\n                    // Support multiple `pMapSkip`'s.\n                    for (const [index, value] of result.entries()){\n                        if (skippedIndexesMap.get(index) === pMapSkip) {\n                            continue;\n                        }\n                        pureResult.push(value);\n                    }\n                    resolve(pureResult);\n                }\n                return;\n            }\n            resolvingCount++;\n            // Intentionally detached\n            (async ()=>{\n                try {\n                    const element = await nextItem.value;\n                    if (isResolved) {\n                        return;\n                    }\n                    const value = await mapper(element, index);\n                    // Use Map to stage the index of the element.\n                    if (value === pMapSkip) {\n                        skippedIndexesMap.set(index, value);\n                    }\n                    result[index] = value;\n                    resolvingCount--;\n                    await next();\n                } catch (error) {\n                    if (stopOnError) {\n                        reject(error);\n                    } else {\n                        errors.push(error);\n                        resolvingCount--;\n                        // In that case we can't really continue regardless of `stopOnError` state\n                        // since an iterable is likely to continue throwing after it throws once.\n                        // If we continue calling `next()` indefinitely we will likely end up\n                        // in an infinite loop of failed iteration.\n                        try {\n                            await next();\n                        } catch (error) {\n                            reject(error);\n                        }\n                    }\n                }\n            })();\n        };\n        // Create the concurrent runners in a detached (non-awaited)\n        // promise. We need this so we can await the `next()` calls\n        // to stop creating runners before hitting the concurrency limit\n        // if the iterable has already been marked as done.\n        // NOTE: We *must* do this for async iterators otherwise we'll spin up\n        // infinite `next()` calls by default and never start the event loop.\n        (async ()=>{\n            for(let index = 0; index < concurrency; index++){\n                try {\n                    // eslint-disable-next-line no-await-in-loop\n                    await next();\n                } catch (error) {\n                    reject(error);\n                    break;\n                }\n                if (isIterableDone || isRejected) {\n                    break;\n                }\n            }\n        })();\n    });\n}\nconst pMapSkip = Symbol(\"skip\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/p-map/index.js\n");

/***/ })

};
;