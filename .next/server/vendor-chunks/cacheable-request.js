"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cacheable-request";
exports.ids = ["vendor-chunks/cacheable-request"];
exports.modules = {

/***/ "(rsc)/./node_modules/cacheable-request/node_modules/get-stream/buffer-stream.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/cacheable-request/node_modules/get-stream/buffer-stream.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { PassThrough: PassThroughStream } = __webpack_require__(/*! stream */ \"stream\");\nmodule.exports = (options)=>{\n    options = {\n        ...options\n    };\n    const { array } = options;\n    let { encoding } = options;\n    const isBuffer = encoding === \"buffer\";\n    let objectMode = false;\n    if (array) {\n        objectMode = !(encoding || isBuffer);\n    } else {\n        encoding = encoding || \"utf8\";\n    }\n    if (isBuffer) {\n        encoding = null;\n    }\n    const stream = new PassThroughStream({\n        objectMode\n    });\n    if (encoding) {\n        stream.setEncoding(encoding);\n    }\n    let length = 0;\n    const chunks = [];\n    stream.on(\"data\", (chunk)=>{\n        chunks.push(chunk);\n        if (objectMode) {\n            length = chunks.length;\n        } else {\n            length += chunk.length;\n        }\n    });\n    stream.getBufferedValue = ()=>{\n        if (array) {\n            return chunks;\n        }\n        return isBuffer ? Buffer.concat(chunks, length) : chunks.join(\"\");\n    };\n    stream.getBufferedLength = ()=>length;\n    return stream;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY2FjaGVhYmxlLXJlcXVlc3Qvbm9kZV9tb2R1bGVzL2dldC1zdHJlYW0vYnVmZmVyLXN0cmVhbS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU0sRUFBQ0EsYUFBYUMsaUJBQWlCLEVBQUMsR0FBR0MsbUJBQU9BLENBQUM7QUFFakRDLE9BQU9DLE9BQU8sR0FBR0MsQ0FBQUE7SUFDaEJBLFVBQVU7UUFBQyxHQUFHQSxPQUFPO0lBQUE7SUFFckIsTUFBTSxFQUFDQyxLQUFLLEVBQUMsR0FBR0Q7SUFDaEIsSUFBSSxFQUFDRSxRQUFRLEVBQUMsR0FBR0Y7SUFDakIsTUFBTUcsV0FBV0QsYUFBYTtJQUM5QixJQUFJRSxhQUFhO0lBRWpCLElBQUlILE9BQU87UUFDVkcsYUFBYSxDQUFFRixDQUFBQSxZQUFZQyxRQUFPO0lBQ25DLE9BQU87UUFDTkQsV0FBV0EsWUFBWTtJQUN4QjtJQUVBLElBQUlDLFVBQVU7UUFDYkQsV0FBVztJQUNaO0lBRUEsTUFBTUcsU0FBUyxJQUFJVCxrQkFBa0I7UUFBQ1E7SUFBVTtJQUVoRCxJQUFJRixVQUFVO1FBQ2JHLE9BQU9DLFdBQVcsQ0FBQ0o7SUFDcEI7SUFFQSxJQUFJSyxTQUFTO0lBQ2IsTUFBTUMsU0FBUyxFQUFFO0lBRWpCSCxPQUFPSSxFQUFFLENBQUMsUUFBUUMsQ0FBQUE7UUFDakJGLE9BQU9HLElBQUksQ0FBQ0Q7UUFFWixJQUFJTixZQUFZO1lBQ2ZHLFNBQVNDLE9BQU9ELE1BQU07UUFDdkIsT0FBTztZQUNOQSxVQUFVRyxNQUFNSCxNQUFNO1FBQ3ZCO0lBQ0Q7SUFFQUYsT0FBT08sZ0JBQWdCLEdBQUc7UUFDekIsSUFBSVgsT0FBTztZQUNWLE9BQU9PO1FBQ1I7UUFFQSxPQUFPTCxXQUFXVSxPQUFPQyxNQUFNLENBQUNOLFFBQVFELFVBQVVDLE9BQU9PLElBQUksQ0FBQztJQUMvRDtJQUVBVixPQUFPVyxpQkFBaUIsR0FBRyxJQUFNVDtJQUVqQyxPQUFPRjtBQUNSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZXhhbXBsZS1mdWxsLy4vbm9kZV9tb2R1bGVzL2NhY2hlYWJsZS1yZXF1ZXN0L25vZGVfbW9kdWxlcy9nZXQtc3RyZWFtL2J1ZmZlci1zdHJlYW0uanM/MTM0MiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCB7UGFzc1Rocm91Z2g6IFBhc3NUaHJvdWdoU3RyZWFtfSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG9wdGlvbnMgPT4ge1xuXHRvcHRpb25zID0gey4uLm9wdGlvbnN9O1xuXG5cdGNvbnN0IHthcnJheX0gPSBvcHRpb25zO1xuXHRsZXQge2VuY29kaW5nfSA9IG9wdGlvbnM7XG5cdGNvbnN0IGlzQnVmZmVyID0gZW5jb2RpbmcgPT09ICdidWZmZXInO1xuXHRsZXQgb2JqZWN0TW9kZSA9IGZhbHNlO1xuXG5cdGlmIChhcnJheSkge1xuXHRcdG9iamVjdE1vZGUgPSAhKGVuY29kaW5nIHx8IGlzQnVmZmVyKTtcblx0fSBlbHNlIHtcblx0XHRlbmNvZGluZyA9IGVuY29kaW5nIHx8ICd1dGY4Jztcblx0fVxuXG5cdGlmIChpc0J1ZmZlcikge1xuXHRcdGVuY29kaW5nID0gbnVsbDtcblx0fVxuXG5cdGNvbnN0IHN0cmVhbSA9IG5ldyBQYXNzVGhyb3VnaFN0cmVhbSh7b2JqZWN0TW9kZX0pO1xuXG5cdGlmIChlbmNvZGluZykge1xuXHRcdHN0cmVhbS5zZXRFbmNvZGluZyhlbmNvZGluZyk7XG5cdH1cblxuXHRsZXQgbGVuZ3RoID0gMDtcblx0Y29uc3QgY2h1bmtzID0gW107XG5cblx0c3RyZWFtLm9uKCdkYXRhJywgY2h1bmsgPT4ge1xuXHRcdGNodW5rcy5wdXNoKGNodW5rKTtcblxuXHRcdGlmIChvYmplY3RNb2RlKSB7XG5cdFx0XHRsZW5ndGggPSBjaHVua3MubGVuZ3RoO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRsZW5ndGggKz0gY2h1bmsubGVuZ3RoO1xuXHRcdH1cblx0fSk7XG5cblx0c3RyZWFtLmdldEJ1ZmZlcmVkVmFsdWUgPSAoKSA9PiB7XG5cdFx0aWYgKGFycmF5KSB7XG5cdFx0XHRyZXR1cm4gY2h1bmtzO1xuXHRcdH1cblxuXHRcdHJldHVybiBpc0J1ZmZlciA/IEJ1ZmZlci5jb25jYXQoY2h1bmtzLCBsZW5ndGgpIDogY2h1bmtzLmpvaW4oJycpO1xuXHR9O1xuXG5cdHN0cmVhbS5nZXRCdWZmZXJlZExlbmd0aCA9ICgpID0+IGxlbmd0aDtcblxuXHRyZXR1cm4gc3RyZWFtO1xufTtcbiJdLCJuYW1lcyI6WyJQYXNzVGhyb3VnaCIsIlBhc3NUaHJvdWdoU3RyZWFtIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJvcHRpb25zIiwiYXJyYXkiLCJlbmNvZGluZyIsImlzQnVmZmVyIiwib2JqZWN0TW9kZSIsInN0cmVhbSIsInNldEVuY29kaW5nIiwibGVuZ3RoIiwiY2h1bmtzIiwib24iLCJjaHVuayIsInB1c2giLCJnZXRCdWZmZXJlZFZhbHVlIiwiQnVmZmVyIiwiY29uY2F0Iiwiam9pbiIsImdldEJ1ZmZlcmVkTGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/cacheable-request/node_modules/get-stream/buffer-stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/cacheable-request/node_modules/get-stream/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/cacheable-request/node_modules/get-stream/index.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { constants: BufferConstants } = __webpack_require__(/*! buffer */ \"buffer\");\nconst pump = __webpack_require__(/*! pump */ \"(rsc)/./node_modules/pump/index.js\");\nconst bufferStream = __webpack_require__(/*! ./buffer-stream */ \"(rsc)/./node_modules/cacheable-request/node_modules/get-stream/buffer-stream.js\");\nclass MaxBufferError extends Error {\n    constructor(){\n        super(\"maxBuffer exceeded\");\n        this.name = \"MaxBufferError\";\n    }\n}\nasync function getStream(inputStream, options) {\n    if (!inputStream) {\n        return Promise.reject(new Error(\"Expected a stream\"));\n    }\n    options = {\n        maxBuffer: Infinity,\n        ...options\n    };\n    const { maxBuffer } = options;\n    let stream;\n    await new Promise((resolve, reject)=>{\n        const rejectPromise = (error)=>{\n            // Don't retrieve an oversized buffer.\n            if (error && stream.getBufferedLength() <= BufferConstants.MAX_LENGTH) {\n                error.bufferedData = stream.getBufferedValue();\n            }\n            reject(error);\n        };\n        stream = pump(inputStream, bufferStream(options), (error)=>{\n            if (error) {\n                rejectPromise(error);\n                return;\n            }\n            resolve();\n        });\n        stream.on(\"data\", ()=>{\n            if (stream.getBufferedLength() > maxBuffer) {\n                rejectPromise(new MaxBufferError());\n            }\n        });\n    });\n    return stream.getBufferedValue();\n}\nmodule.exports = getStream;\n// TODO: Remove this for the next major release\nmodule.exports[\"default\"] = getStream;\nmodule.exports.buffer = (stream, options)=>getStream(stream, {\n        ...options,\n        encoding: \"buffer\"\n    });\nmodule.exports.array = (stream, options)=>getStream(stream, {\n        ...options,\n        array: true\n    });\nmodule.exports.MaxBufferError = MaxBufferError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY2FjaGVhYmxlLXJlcXVlc3Qvbm9kZV9tb2R1bGVzL2dldC1zdHJlYW0vaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxNQUFNLEVBQUNBLFdBQVdDLGVBQWUsRUFBQyxHQUFHQyxtQkFBT0EsQ0FBQztBQUM3QyxNQUFNQyxPQUFPRCxtQkFBT0EsQ0FBQztBQUNyQixNQUFNRSxlQUFlRixtQkFBT0EsQ0FBQztBQUU3QixNQUFNRyx1QkFBdUJDO0lBQzVCQyxhQUFjO1FBQ2IsS0FBSyxDQUFDO1FBQ04sSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDYjtBQUNEO0FBRUEsZUFBZUMsVUFBVUMsV0FBVyxFQUFFQyxPQUFPO0lBQzVDLElBQUksQ0FBQ0QsYUFBYTtRQUNqQixPQUFPRSxRQUFRQyxNQUFNLENBQUMsSUFBSVAsTUFBTTtJQUNqQztJQUVBSyxVQUFVO1FBQ1RHLFdBQVdDO1FBQ1gsR0FBR0osT0FBTztJQUNYO0lBRUEsTUFBTSxFQUFDRyxTQUFTLEVBQUMsR0FBR0g7SUFFcEIsSUFBSUs7SUFDSixNQUFNLElBQUlKLFFBQVEsQ0FBQ0ssU0FBU0o7UUFDM0IsTUFBTUssZ0JBQWdCQyxDQUFBQTtZQUNyQixzQ0FBc0M7WUFDdEMsSUFBSUEsU0FBU0gsT0FBT0ksaUJBQWlCLE1BQU1uQixnQkFBZ0JvQixVQUFVLEVBQUU7Z0JBQ3RFRixNQUFNRyxZQUFZLEdBQUdOLE9BQU9PLGdCQUFnQjtZQUM3QztZQUVBVixPQUFPTTtRQUNSO1FBRUFILFNBQVNiLEtBQUtPLGFBQWFOLGFBQWFPLFVBQVVRLENBQUFBO1lBQ2pELElBQUlBLE9BQU87Z0JBQ1ZELGNBQWNDO2dCQUNkO1lBQ0Q7WUFFQUY7UUFDRDtRQUVBRCxPQUFPUSxFQUFFLENBQUMsUUFBUTtZQUNqQixJQUFJUixPQUFPSSxpQkFBaUIsS0FBS04sV0FBVztnQkFDM0NJLGNBQWMsSUFBSWI7WUFDbkI7UUFDRDtJQUNEO0lBRUEsT0FBT1csT0FBT08sZ0JBQWdCO0FBQy9CO0FBRUFFLE9BQU9DLE9BQU8sR0FBR2pCO0FBQ2pCLCtDQUErQztBQUMvQ2dCLHlCQUFzQixHQUFHaEI7QUFDekJnQixxQkFBcUIsR0FBRyxDQUFDVCxRQUFRTCxVQUFZRixVQUFVTyxRQUFRO1FBQUMsR0FBR0wsT0FBTztRQUFFa0IsVUFBVTtJQUFRO0FBQzlGSixvQkFBb0IsR0FBRyxDQUFDVCxRQUFRTCxVQUFZRixVQUFVTyxRQUFRO1FBQUMsR0FBR0wsT0FBTztRQUFFbUIsT0FBTztJQUFJO0FBQ3RGTCw2QkFBNkIsR0FBR3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZXhhbXBsZS1mdWxsLy4vbm9kZV9tb2R1bGVzL2NhY2hlYWJsZS1yZXF1ZXN0L25vZGVfbW9kdWxlcy9nZXQtc3RyZWFtL2luZGV4LmpzPzNiYmEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3Qge2NvbnN0YW50czogQnVmZmVyQ29uc3RhbnRzfSA9IHJlcXVpcmUoJ2J1ZmZlcicpO1xuY29uc3QgcHVtcCA9IHJlcXVpcmUoJ3B1bXAnKTtcbmNvbnN0IGJ1ZmZlclN0cmVhbSA9IHJlcXVpcmUoJy4vYnVmZmVyLXN0cmVhbScpO1xuXG5jbGFzcyBNYXhCdWZmZXJFcnJvciBleHRlbmRzIEVycm9yIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoJ21heEJ1ZmZlciBleGNlZWRlZCcpO1xuXHRcdHRoaXMubmFtZSA9ICdNYXhCdWZmZXJFcnJvcic7XG5cdH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0U3RyZWFtKGlucHV0U3RyZWFtLCBvcHRpb25zKSB7XG5cdGlmICghaW5wdXRTdHJlYW0pIHtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdFeHBlY3RlZCBhIHN0cmVhbScpKTtcblx0fVxuXG5cdG9wdGlvbnMgPSB7XG5cdFx0bWF4QnVmZmVyOiBJbmZpbml0eSxcblx0XHQuLi5vcHRpb25zXG5cdH07XG5cblx0Y29uc3Qge21heEJ1ZmZlcn0gPSBvcHRpb25zO1xuXG5cdGxldCBzdHJlYW07XG5cdGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRjb25zdCByZWplY3RQcm9taXNlID0gZXJyb3IgPT4ge1xuXHRcdFx0Ly8gRG9uJ3QgcmV0cmlldmUgYW4gb3ZlcnNpemVkIGJ1ZmZlci5cblx0XHRcdGlmIChlcnJvciAmJiBzdHJlYW0uZ2V0QnVmZmVyZWRMZW5ndGgoKSA8PSBCdWZmZXJDb25zdGFudHMuTUFYX0xFTkdUSCkge1xuXHRcdFx0XHRlcnJvci5idWZmZXJlZERhdGEgPSBzdHJlYW0uZ2V0QnVmZmVyZWRWYWx1ZSgpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdH07XG5cblx0XHRzdHJlYW0gPSBwdW1wKGlucHV0U3RyZWFtLCBidWZmZXJTdHJlYW0ob3B0aW9ucyksIGVycm9yID0+IHtcblx0XHRcdGlmIChlcnJvcikge1xuXHRcdFx0XHRyZWplY3RQcm9taXNlKGVycm9yKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNvbHZlKCk7XG5cdFx0fSk7XG5cblx0XHRzdHJlYW0ub24oJ2RhdGEnLCAoKSA9PiB7XG5cdFx0XHRpZiAoc3RyZWFtLmdldEJ1ZmZlcmVkTGVuZ3RoKCkgPiBtYXhCdWZmZXIpIHtcblx0XHRcdFx0cmVqZWN0UHJvbWlzZShuZXcgTWF4QnVmZmVyRXJyb3IoKSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xuXG5cdHJldHVybiBzdHJlYW0uZ2V0QnVmZmVyZWRWYWx1ZSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFN0cmVhbTtcbi8vIFRPRE86IFJlbW92ZSB0aGlzIGZvciB0aGUgbmV4dCBtYWpvciByZWxlYXNlXG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0U3RyZWFtO1xubW9kdWxlLmV4cG9ydHMuYnVmZmVyID0gKHN0cmVhbSwgb3B0aW9ucykgPT4gZ2V0U3RyZWFtKHN0cmVhbSwgey4uLm9wdGlvbnMsIGVuY29kaW5nOiAnYnVmZmVyJ30pO1xubW9kdWxlLmV4cG9ydHMuYXJyYXkgPSAoc3RyZWFtLCBvcHRpb25zKSA9PiBnZXRTdHJlYW0oc3RyZWFtLCB7Li4ub3B0aW9ucywgYXJyYXk6IHRydWV9KTtcbm1vZHVsZS5leHBvcnRzLk1heEJ1ZmZlckVycm9yID0gTWF4QnVmZmVyRXJyb3I7XG4iXSwibmFtZXMiOlsiY29uc3RhbnRzIiwiQnVmZmVyQ29uc3RhbnRzIiwicmVxdWlyZSIsInB1bXAiLCJidWZmZXJTdHJlYW0iLCJNYXhCdWZmZXJFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiZ2V0U3RyZWFtIiwiaW5wdXRTdHJlYW0iLCJvcHRpb25zIiwiUHJvbWlzZSIsInJlamVjdCIsIm1heEJ1ZmZlciIsIkluZmluaXR5Iiwic3RyZWFtIiwicmVzb2x2ZSIsInJlamVjdFByb21pc2UiLCJlcnJvciIsImdldEJ1ZmZlcmVkTGVuZ3RoIiwiTUFYX0xFTkdUSCIsImJ1ZmZlcmVkRGF0YSIsImdldEJ1ZmZlcmVkVmFsdWUiLCJvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0IiwiYnVmZmVyIiwiZW5jb2RpbmciLCJhcnJheSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/cacheable-request/node_modules/get-stream/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/cacheable-request/node_modules/lowercase-keys/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/cacheable-request/node_modules/lowercase-keys/index.js ***!
  \*****************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = (object)=>{\n    const result = {};\n    for (const [key, value] of Object.entries(object)){\n        result[key.toLowerCase()] = value;\n    }\n    return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY2FjaGVhYmxlLXJlcXVlc3Qvbm9kZV9tb2R1bGVzL2xvd2VyY2FzZS1rZXlzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0FBLE9BQU9DLE9BQU8sR0FBR0MsQ0FBQUE7SUFDaEIsTUFBTUMsU0FBUyxDQUFDO0lBRWhCLEtBQUssTUFBTSxDQUFDQyxLQUFLQyxNQUFNLElBQUlDLE9BQU9DLE9BQU8sQ0FBQ0wsUUFBUztRQUNsREMsTUFBTSxDQUFDQyxJQUFJSSxXQUFXLEdBQUcsR0FBR0g7SUFDN0I7SUFFQSxPQUFPRjtBQUNSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZXhhbXBsZS1mdWxsLy4vbm9kZV9tb2R1bGVzL2NhY2hlYWJsZS1yZXF1ZXN0L25vZGVfbW9kdWxlcy9sb3dlcmNhc2Uta2V5cy9pbmRleC5qcz8xMzI4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gb2JqZWN0ID0+IHtcblx0Y29uc3QgcmVzdWx0ID0ge307XG5cblx0Zm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMob2JqZWN0KSkge1xuXHRcdHJlc3VsdFtrZXkudG9Mb3dlckNhc2UoKV0gPSB2YWx1ZTtcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJvYmplY3QiLCJyZXN1bHQiLCJrZXkiLCJ2YWx1ZSIsIk9iamVjdCIsImVudHJpZXMiLCJ0b0xvd2VyQ2FzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/cacheable-request/node_modules/lowercase-keys/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/cacheable-request/src/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/cacheable-request/src/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst urlLib = __webpack_require__(/*! url */ \"url\");\nconst normalizeUrl = __webpack_require__(/*! normalize-url */ \"(rsc)/./node_modules/normalize-url/index.js\");\nconst getStream = __webpack_require__(/*! get-stream */ \"(rsc)/./node_modules/cacheable-request/node_modules/get-stream/index.js\");\nconst CachePolicy = __webpack_require__(/*! http-cache-semantics */ \"(rsc)/./node_modules/http-cache-semantics/index.js\");\nconst Response = __webpack_require__(/*! responselike */ \"(rsc)/./node_modules/responselike/src/index.js\");\nconst lowercaseKeys = __webpack_require__(/*! lowercase-keys */ \"(rsc)/./node_modules/cacheable-request/node_modules/lowercase-keys/index.js\");\nconst cloneResponse = __webpack_require__(/*! clone-response */ \"(rsc)/./node_modules/clone-response/src/index.js\");\nconst Keyv = __webpack_require__(/*! keyv */ \"(rsc)/./node_modules/keyv/src/index.js\");\nclass CacheableRequest {\n    constructor(request, cacheAdapter){\n        if (typeof request !== \"function\") {\n            throw new TypeError(\"Parameter `request` must be a function\");\n        }\n        this.cache = new Keyv({\n            uri: typeof cacheAdapter === \"string\" && cacheAdapter,\n            store: typeof cacheAdapter !== \"string\" && cacheAdapter,\n            namespace: \"cacheable-request\"\n        });\n        return this.createCacheableRequest(request);\n    }\n    createCacheableRequest(request) {\n        return (opts, cb)=>{\n            let url;\n            if (typeof opts === \"string\") {\n                url = normalizeUrlObject(urlLib.parse(opts));\n                opts = {};\n            } else if (opts instanceof urlLib.URL) {\n                url = normalizeUrlObject(urlLib.parse(opts.toString()));\n                opts = {};\n            } else {\n                const [pathname, ...searchParts] = (opts.path || \"\").split(\"?\");\n                const search = searchParts.length > 0 ? `?${searchParts.join(\"?\")}` : \"\";\n                url = normalizeUrlObject({\n                    ...opts,\n                    pathname,\n                    search\n                });\n            }\n            opts = {\n                headers: {},\n                method: \"GET\",\n                cache: true,\n                strictTtl: false,\n                automaticFailover: false,\n                ...opts,\n                ...urlObjectToRequestOptions(url)\n            };\n            opts.headers = lowercaseKeys(opts.headers);\n            const ee = new EventEmitter();\n            const normalizedUrlString = normalizeUrl(urlLib.format(url), {\n                stripWWW: false,\n                removeTrailingSlash: false,\n                stripAuthentication: false\n            });\n            const key = `${opts.method}:${normalizedUrlString}`;\n            let revalidate = false;\n            let madeRequest = false;\n            const makeRequest = (opts)=>{\n                madeRequest = true;\n                let requestErrored = false;\n                let requestErrorCallback;\n                const requestErrorPromise = new Promise((resolve)=>{\n                    requestErrorCallback = ()=>{\n                        if (!requestErrored) {\n                            requestErrored = true;\n                            resolve();\n                        }\n                    };\n                });\n                const handler = (response)=>{\n                    if (revalidate && !opts.forceRefresh) {\n                        response.status = response.statusCode;\n                        const revalidatedPolicy = CachePolicy.fromObject(revalidate.cachePolicy).revalidatedPolicy(opts, response);\n                        if (!revalidatedPolicy.modified) {\n                            const headers = revalidatedPolicy.policy.responseHeaders();\n                            response = new Response(revalidate.statusCode, headers, revalidate.body, revalidate.url);\n                            response.cachePolicy = revalidatedPolicy.policy;\n                            response.fromCache = true;\n                        }\n                    }\n                    if (!response.fromCache) {\n                        response.cachePolicy = new CachePolicy(opts, response, opts);\n                        response.fromCache = false;\n                    }\n                    let clonedResponse;\n                    if (opts.cache && response.cachePolicy.storable()) {\n                        clonedResponse = cloneResponse(response);\n                        (async ()=>{\n                            try {\n                                const bodyPromise = getStream.buffer(response);\n                                await Promise.race([\n                                    requestErrorPromise,\n                                    new Promise((resolve)=>response.once(\"end\", resolve))\n                                ]);\n                                if (requestErrored) {\n                                    return;\n                                }\n                                const body = await bodyPromise;\n                                const value = {\n                                    cachePolicy: response.cachePolicy.toObject(),\n                                    url: response.url,\n                                    statusCode: response.fromCache ? revalidate.statusCode : response.statusCode,\n                                    body\n                                };\n                                let ttl = opts.strictTtl ? response.cachePolicy.timeToLive() : undefined;\n                                if (opts.maxTtl) {\n                                    ttl = ttl ? Math.min(ttl, opts.maxTtl) : opts.maxTtl;\n                                }\n                                await this.cache.set(key, value, ttl);\n                            } catch (error) {\n                                ee.emit(\"error\", new CacheableRequest.CacheError(error));\n                            }\n                        })();\n                    } else if (opts.cache && revalidate) {\n                        (async ()=>{\n                            try {\n                                await this.cache.delete(key);\n                            } catch (error) {\n                                ee.emit(\"error\", new CacheableRequest.CacheError(error));\n                            }\n                        })();\n                    }\n                    ee.emit(\"response\", clonedResponse || response);\n                    if (typeof cb === \"function\") {\n                        cb(clonedResponse || response);\n                    }\n                };\n                try {\n                    const req = request(opts, handler);\n                    req.once(\"error\", requestErrorCallback);\n                    req.once(\"abort\", requestErrorCallback);\n                    ee.emit(\"request\", req);\n                } catch (error) {\n                    ee.emit(\"error\", new CacheableRequest.RequestError(error));\n                }\n            };\n            (async ()=>{\n                const get = async (opts)=>{\n                    await Promise.resolve();\n                    const cacheEntry = opts.cache ? await this.cache.get(key) : undefined;\n                    if (typeof cacheEntry === \"undefined\") {\n                        return makeRequest(opts);\n                    }\n                    const policy = CachePolicy.fromObject(cacheEntry.cachePolicy);\n                    if (policy.satisfiesWithoutRevalidation(opts) && !opts.forceRefresh) {\n                        const headers = policy.responseHeaders();\n                        const response = new Response(cacheEntry.statusCode, headers, cacheEntry.body, cacheEntry.url);\n                        response.cachePolicy = policy;\n                        response.fromCache = true;\n                        ee.emit(\"response\", response);\n                        if (typeof cb === \"function\") {\n                            cb(response);\n                        }\n                    } else {\n                        revalidate = cacheEntry;\n                        opts.headers = policy.revalidationHeaders(opts);\n                        makeRequest(opts);\n                    }\n                };\n                const errorHandler = (error)=>ee.emit(\"error\", new CacheableRequest.CacheError(error));\n                this.cache.once(\"error\", errorHandler);\n                ee.on(\"response\", ()=>this.cache.removeListener(\"error\", errorHandler));\n                try {\n                    await get(opts);\n                } catch (error) {\n                    if (opts.automaticFailover && !madeRequest) {\n                        makeRequest(opts);\n                    }\n                    ee.emit(\"error\", new CacheableRequest.CacheError(error));\n                }\n            })();\n            return ee;\n        };\n    }\n}\nfunction urlObjectToRequestOptions(url) {\n    const options = {\n        ...url\n    };\n    options.path = `${url.pathname || \"/\"}${url.search || \"\"}`;\n    delete options.pathname;\n    delete options.search;\n    return options;\n}\nfunction normalizeUrlObject(url) {\n    // If url was parsed by url.parse or new URL:\n    // - hostname will be set\n    // - host will be hostname[:port]\n    // - port will be set if it was explicit in the parsed string\n    // Otherwise, url was from request options:\n    // - hostname or host may be set\n    // - host shall not have port encoded\n    return {\n        protocol: url.protocol,\n        auth: url.auth,\n        hostname: url.hostname || url.host || \"localhost\",\n        port: url.port,\n        pathname: url.pathname,\n        search: url.search\n    };\n}\nCacheableRequest.RequestError = class extends Error {\n    constructor(error){\n        super(error.message);\n        this.name = \"RequestError\";\n        Object.assign(this, error);\n    }\n};\nCacheableRequest.CacheError = class extends Error {\n    constructor(error){\n        super(error.message);\n        this.name = \"CacheError\";\n        Object.assign(this, error);\n    }\n};\nmodule.exports = CacheableRequest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/cacheable-request/src/index.js\n");

/***/ })

};
;