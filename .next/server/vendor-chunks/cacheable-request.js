"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cacheable-request";
exports.ids = ["vendor-chunks/cacheable-request"];
exports.modules = {

/***/ "(rsc)/./node_modules/cacheable-request/node_modules/get-stream/buffer-stream.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/cacheable-request/node_modules/get-stream/buffer-stream.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { PassThrough: PassThroughStream } = __webpack_require__(/*! stream */ \"stream\");\nmodule.exports = (options)=>{\n    options = {\n        ...options\n    };\n    const { array } = options;\n    let { encoding } = options;\n    const isBuffer = encoding === \"buffer\";\n    let objectMode = false;\n    if (array) {\n        objectMode = !(encoding || isBuffer);\n    } else {\n        encoding = encoding || \"utf8\";\n    }\n    if (isBuffer) {\n        encoding = null;\n    }\n    const stream = new PassThroughStream({\n        objectMode\n    });\n    if (encoding) {\n        stream.setEncoding(encoding);\n    }\n    let length = 0;\n    const chunks = [];\n    stream.on(\"data\", (chunk)=>{\n        chunks.push(chunk);\n        if (objectMode) {\n            length = chunks.length;\n        } else {\n            length += chunk.length;\n        }\n    });\n    stream.getBufferedValue = ()=>{\n        if (array) {\n            return chunks;\n        }\n        return isBuffer ? Buffer.concat(chunks, length) : chunks.join(\"\");\n    };\n    stream.getBufferedLength = ()=>length;\n    return stream;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY2FjaGVhYmxlLXJlcXVlc3Qvbm9kZV9tb2R1bGVzL2dldC1zdHJlYW0vYnVmZmVyLXN0cmVhbS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU0sRUFBQ0EsYUFBYUMsaUJBQWlCLEVBQUMsR0FBR0MsbUJBQU9BLENBQUM7QUFFakRDLE9BQU9DLE9BQU8sR0FBR0MsQ0FBQUE7SUFDaEJBLFVBQVU7UUFBQyxHQUFHQSxPQUFPO0lBQUE7SUFFckIsTUFBTSxFQUFDQyxLQUFLLEVBQUMsR0FBR0Q7SUFDaEIsSUFBSSxFQUFDRSxRQUFRLEVBQUMsR0FBR0Y7SUFDakIsTUFBTUcsV0FBV0QsYUFBYTtJQUM5QixJQUFJRSxhQUFhO0lBRWpCLElBQUlILE9BQU87UUFDVkcsYUFBYSxDQUFFRixDQUFBQSxZQUFZQyxRQUFPO0lBQ25DLE9BQU87UUFDTkQsV0FBV0EsWUFBWTtJQUN4QjtJQUVBLElBQUlDLFVBQVU7UUFDYkQsV0FBVztJQUNaO0lBRUEsTUFBTUcsU0FBUyxJQUFJVCxrQkFBa0I7UUFBQ1E7SUFBVTtJQUVoRCxJQUFJRixVQUFVO1FBQ2JHLE9BQU9DLFdBQVcsQ0FBQ0o7SUFDcEI7SUFFQSxJQUFJSyxTQUFTO0lBQ2IsTUFBTUMsU0FBUyxFQUFFO0lBRWpCSCxPQUFPSSxFQUFFLENBQUMsUUFBUUMsQ0FBQUE7UUFDakJGLE9BQU9HLElBQUksQ0FBQ0Q7UUFFWixJQUFJTixZQUFZO1lBQ2ZHLFNBQVNDLE9BQU9ELE1BQU07UUFDdkIsT0FBTztZQUNOQSxVQUFVRyxNQUFNSCxNQUFNO1FBQ3ZCO0lBQ0Q7SUFFQUYsT0FBT08sZ0JBQWdCLEdBQUc7UUFDekIsSUFBSVgsT0FBTztZQUNWLE9BQU9PO1FBQ1I7UUFFQSxPQUFPTCxXQUFXVSxPQUFPQyxNQUFNLENBQUNOLFFBQVFELFVBQVVDLE9BQU9PLElBQUksQ0FBQztJQUMvRDtJQUVBVixPQUFPVyxpQkFBaUIsR0FBRyxJQUFNVDtJQUVqQyxPQUFPRjtBQUNSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZnVsbC8uL25vZGVfbW9kdWxlcy9jYWNoZWFibGUtcmVxdWVzdC9ub2RlX21vZHVsZXMvZ2V0LXN0cmVhbS9idWZmZXItc3RyZWFtLmpzPzEzNDIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3Qge1Bhc3NUaHJvdWdoOiBQYXNzVGhyb3VnaFN0cmVhbX0gPSByZXF1aXJlKCdzdHJlYW0nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBvcHRpb25zID0+IHtcblx0b3B0aW9ucyA9IHsuLi5vcHRpb25zfTtcblxuXHRjb25zdCB7YXJyYXl9ID0gb3B0aW9ucztcblx0bGV0IHtlbmNvZGluZ30gPSBvcHRpb25zO1xuXHRjb25zdCBpc0J1ZmZlciA9IGVuY29kaW5nID09PSAnYnVmZmVyJztcblx0bGV0IG9iamVjdE1vZGUgPSBmYWxzZTtcblxuXHRpZiAoYXJyYXkpIHtcblx0XHRvYmplY3RNb2RlID0gIShlbmNvZGluZyB8fCBpc0J1ZmZlcik7XG5cdH0gZWxzZSB7XG5cdFx0ZW5jb2RpbmcgPSBlbmNvZGluZyB8fCAndXRmOCc7XG5cdH1cblxuXHRpZiAoaXNCdWZmZXIpIHtcblx0XHRlbmNvZGluZyA9IG51bGw7XG5cdH1cblxuXHRjb25zdCBzdHJlYW0gPSBuZXcgUGFzc1Rocm91Z2hTdHJlYW0oe29iamVjdE1vZGV9KTtcblxuXHRpZiAoZW5jb2RpbmcpIHtcblx0XHRzdHJlYW0uc2V0RW5jb2RpbmcoZW5jb2RpbmcpO1xuXHR9XG5cblx0bGV0IGxlbmd0aCA9IDA7XG5cdGNvbnN0IGNodW5rcyA9IFtdO1xuXG5cdHN0cmVhbS5vbignZGF0YScsIGNodW5rID0+IHtcblx0XHRjaHVua3MucHVzaChjaHVuayk7XG5cblx0XHRpZiAob2JqZWN0TW9kZSkge1xuXHRcdFx0bGVuZ3RoID0gY2h1bmtzLmxlbmd0aDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bGVuZ3RoICs9IGNodW5rLmxlbmd0aDtcblx0XHR9XG5cdH0pO1xuXG5cdHN0cmVhbS5nZXRCdWZmZXJlZFZhbHVlID0gKCkgPT4ge1xuXHRcdGlmIChhcnJheSkge1xuXHRcdFx0cmV0dXJuIGNodW5rcztcblx0XHR9XG5cblx0XHRyZXR1cm4gaXNCdWZmZXIgPyBCdWZmZXIuY29uY2F0KGNodW5rcywgbGVuZ3RoKSA6IGNodW5rcy5qb2luKCcnKTtcblx0fTtcblxuXHRzdHJlYW0uZ2V0QnVmZmVyZWRMZW5ndGggPSAoKSA9PiBsZW5ndGg7XG5cblx0cmV0dXJuIHN0cmVhbTtcbn07XG4iXSwibmFtZXMiOlsiUGFzc1Rocm91Z2giLCJQYXNzVGhyb3VnaFN0cmVhbSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwib3B0aW9ucyIsImFycmF5IiwiZW5jb2RpbmciLCJpc0J1ZmZlciIsIm9iamVjdE1vZGUiLCJzdHJlYW0iLCJzZXRFbmNvZGluZyIsImxlbmd0aCIsImNodW5rcyIsIm9uIiwiY2h1bmsiLCJwdXNoIiwiZ2V0QnVmZmVyZWRWYWx1ZSIsIkJ1ZmZlciIsImNvbmNhdCIsImpvaW4iLCJnZXRCdWZmZXJlZExlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/cacheable-request/node_modules/get-stream/buffer-stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/cacheable-request/node_modules/get-stream/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/cacheable-request/node_modules/get-stream/index.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { constants: BufferConstants } = __webpack_require__(/*! buffer */ \"buffer\");\nconst pump = __webpack_require__(/*! pump */ \"(rsc)/./node_modules/pump/index.js\");\nconst bufferStream = __webpack_require__(/*! ./buffer-stream */ \"(rsc)/./node_modules/cacheable-request/node_modules/get-stream/buffer-stream.js\");\nclass MaxBufferError extends Error {\n    constructor(){\n        super(\"maxBuffer exceeded\");\n        this.name = \"MaxBufferError\";\n    }\n}\nasync function getStream(inputStream, options) {\n    if (!inputStream) {\n        return Promise.reject(new Error(\"Expected a stream\"));\n    }\n    options = {\n        maxBuffer: Infinity,\n        ...options\n    };\n    const { maxBuffer } = options;\n    let stream;\n    await new Promise((resolve, reject)=>{\n        const rejectPromise = (error)=>{\n            // Don't retrieve an oversized buffer.\n            if (error && stream.getBufferedLength() <= BufferConstants.MAX_LENGTH) {\n                error.bufferedData = stream.getBufferedValue();\n            }\n            reject(error);\n        };\n        stream = pump(inputStream, bufferStream(options), (error)=>{\n            if (error) {\n                rejectPromise(error);\n                return;\n            }\n            resolve();\n        });\n        stream.on(\"data\", ()=>{\n            if (stream.getBufferedLength() > maxBuffer) {\n                rejectPromise(new MaxBufferError());\n            }\n        });\n    });\n    return stream.getBufferedValue();\n}\nmodule.exports = getStream;\n// TODO: Remove this for the next major release\nmodule.exports[\"default\"] = getStream;\nmodule.exports.buffer = (stream, options)=>getStream(stream, {\n        ...options,\n        encoding: \"buffer\"\n    });\nmodule.exports.array = (stream, options)=>getStream(stream, {\n        ...options,\n        array: true\n    });\nmodule.exports.MaxBufferError = MaxBufferError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY2FjaGVhYmxlLXJlcXVlc3Qvbm9kZV9tb2R1bGVzL2dldC1zdHJlYW0vaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxNQUFNLEVBQUNBLFdBQVdDLGVBQWUsRUFBQyxHQUFHQyxtQkFBT0EsQ0FBQztBQUM3QyxNQUFNQyxPQUFPRCxtQkFBT0EsQ0FBQztBQUNyQixNQUFNRSxlQUFlRixtQkFBT0EsQ0FBQztBQUU3QixNQUFNRyx1QkFBdUJDO0lBQzVCQyxhQUFjO1FBQ2IsS0FBSyxDQUFDO1FBQ04sSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDYjtBQUNEO0FBRUEsZUFBZUMsVUFBVUMsV0FBVyxFQUFFQyxPQUFPO0lBQzVDLElBQUksQ0FBQ0QsYUFBYTtRQUNqQixPQUFPRSxRQUFRQyxNQUFNLENBQUMsSUFBSVAsTUFBTTtJQUNqQztJQUVBSyxVQUFVO1FBQ1RHLFdBQVdDO1FBQ1gsR0FBR0osT0FBTztJQUNYO0lBRUEsTUFBTSxFQUFDRyxTQUFTLEVBQUMsR0FBR0g7SUFFcEIsSUFBSUs7SUFDSixNQUFNLElBQUlKLFFBQVEsQ0FBQ0ssU0FBU0o7UUFDM0IsTUFBTUssZ0JBQWdCQyxDQUFBQTtZQUNyQixzQ0FBc0M7WUFDdEMsSUFBSUEsU0FBU0gsT0FBT0ksaUJBQWlCLE1BQU1uQixnQkFBZ0JvQixVQUFVLEVBQUU7Z0JBQ3RFRixNQUFNRyxZQUFZLEdBQUdOLE9BQU9PLGdCQUFnQjtZQUM3QztZQUVBVixPQUFPTTtRQUNSO1FBRUFILFNBQVNiLEtBQUtPLGFBQWFOLGFBQWFPLFVBQVVRLENBQUFBO1lBQ2pELElBQUlBLE9BQU87Z0JBQ1ZELGNBQWNDO2dCQUNkO1lBQ0Q7WUFFQUY7UUFDRDtRQUVBRCxPQUFPUSxFQUFFLENBQUMsUUFBUTtZQUNqQixJQUFJUixPQUFPSSxpQkFBaUIsS0FBS04sV0FBVztnQkFDM0NJLGNBQWMsSUFBSWI7WUFDbkI7UUFDRDtJQUNEO0lBRUEsT0FBT1csT0FBT08sZ0JBQWdCO0FBQy9CO0FBRUFFLE9BQU9DLE9BQU8sR0FBR2pCO0FBQ2pCLCtDQUErQztBQUMvQ2dCLHlCQUFzQixHQUFHaEI7QUFDekJnQixxQkFBcUIsR0FBRyxDQUFDVCxRQUFRTCxVQUFZRixVQUFVTyxRQUFRO1FBQUMsR0FBR0wsT0FBTztRQUFFa0IsVUFBVTtJQUFRO0FBQzlGSixvQkFBb0IsR0FBRyxDQUFDVCxRQUFRTCxVQUFZRixVQUFVTyxRQUFRO1FBQUMsR0FBR0wsT0FBTztRQUFFbUIsT0FBTztJQUFJO0FBQ3RGTCw2QkFBNkIsR0FBR3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZnVsbC8uL25vZGVfbW9kdWxlcy9jYWNoZWFibGUtcmVxdWVzdC9ub2RlX21vZHVsZXMvZ2V0LXN0cmVhbS9pbmRleC5qcz8zYmJhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IHtjb25zdGFudHM6IEJ1ZmZlckNvbnN0YW50c30gPSByZXF1aXJlKCdidWZmZXInKTtcbmNvbnN0IHB1bXAgPSByZXF1aXJlKCdwdW1wJyk7XG5jb25zdCBidWZmZXJTdHJlYW0gPSByZXF1aXJlKCcuL2J1ZmZlci1zdHJlYW0nKTtcblxuY2xhc3MgTWF4QnVmZmVyRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKCdtYXhCdWZmZXIgZXhjZWVkZWQnKTtcblx0XHR0aGlzLm5hbWUgPSAnTWF4QnVmZmVyRXJyb3InO1xuXHR9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFN0cmVhbShpbnB1dFN0cmVhbSwgb3B0aW9ucykge1xuXHRpZiAoIWlucHV0U3RyZWFtKSB7XG5cdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignRXhwZWN0ZWQgYSBzdHJlYW0nKSk7XG5cdH1cblxuXHRvcHRpb25zID0ge1xuXHRcdG1heEJ1ZmZlcjogSW5maW5pdHksXG5cdFx0Li4ub3B0aW9uc1xuXHR9O1xuXG5cdGNvbnN0IHttYXhCdWZmZXJ9ID0gb3B0aW9ucztcblxuXHRsZXQgc3RyZWFtO1xuXHRhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0Y29uc3QgcmVqZWN0UHJvbWlzZSA9IGVycm9yID0+IHtcblx0XHRcdC8vIERvbid0IHJldHJpZXZlIGFuIG92ZXJzaXplZCBidWZmZXIuXG5cdFx0XHRpZiAoZXJyb3IgJiYgc3RyZWFtLmdldEJ1ZmZlcmVkTGVuZ3RoKCkgPD0gQnVmZmVyQ29uc3RhbnRzLk1BWF9MRU5HVEgpIHtcblx0XHRcdFx0ZXJyb3IuYnVmZmVyZWREYXRhID0gc3RyZWFtLmdldEJ1ZmZlcmVkVmFsdWUoKTtcblx0XHRcdH1cblxuXHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHR9O1xuXG5cdFx0c3RyZWFtID0gcHVtcChpbnB1dFN0cmVhbSwgYnVmZmVyU3RyZWFtKG9wdGlvbnMpLCBlcnJvciA9PiB7XG5cdFx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdFx0cmVqZWN0UHJvbWlzZShlcnJvcik7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0cmVzb2x2ZSgpO1xuXHRcdH0pO1xuXG5cdFx0c3RyZWFtLm9uKCdkYXRhJywgKCkgPT4ge1xuXHRcdFx0aWYgKHN0cmVhbS5nZXRCdWZmZXJlZExlbmd0aCgpID4gbWF4QnVmZmVyKSB7XG5cdFx0XHRcdHJlamVjdFByb21pc2UobmV3IE1heEJ1ZmZlckVycm9yKCkpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcblxuXHRyZXR1cm4gc3RyZWFtLmdldEJ1ZmZlcmVkVmFsdWUoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRTdHJlYW07XG4vLyBUT0RPOiBSZW1vdmUgdGhpcyBmb3IgdGhlIG5leHQgbWFqb3IgcmVsZWFzZVxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGdldFN0cmVhbTtcbm1vZHVsZS5leHBvcnRzLmJ1ZmZlciA9IChzdHJlYW0sIG9wdGlvbnMpID0+IGdldFN0cmVhbShzdHJlYW0sIHsuLi5vcHRpb25zLCBlbmNvZGluZzogJ2J1ZmZlcid9KTtcbm1vZHVsZS5leHBvcnRzLmFycmF5ID0gKHN0cmVhbSwgb3B0aW9ucykgPT4gZ2V0U3RyZWFtKHN0cmVhbSwgey4uLm9wdGlvbnMsIGFycmF5OiB0cnVlfSk7XG5tb2R1bGUuZXhwb3J0cy5NYXhCdWZmZXJFcnJvciA9IE1heEJ1ZmZlckVycm9yO1xuIl0sIm5hbWVzIjpbImNvbnN0YW50cyIsIkJ1ZmZlckNvbnN0YW50cyIsInJlcXVpcmUiLCJwdW1wIiwiYnVmZmVyU3RyZWFtIiwiTWF4QnVmZmVyRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibmFtZSIsImdldFN0cmVhbSIsImlucHV0U3RyZWFtIiwib3B0aW9ucyIsIlByb21pc2UiLCJyZWplY3QiLCJtYXhCdWZmZXIiLCJJbmZpbml0eSIsInN0cmVhbSIsInJlc29sdmUiLCJyZWplY3RQcm9taXNlIiwiZXJyb3IiLCJnZXRCdWZmZXJlZExlbmd0aCIsIk1BWF9MRU5HVEgiLCJidWZmZXJlZERhdGEiLCJnZXRCdWZmZXJlZFZhbHVlIiwib24iLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdCIsImJ1ZmZlciIsImVuY29kaW5nIiwiYXJyYXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/cacheable-request/node_modules/get-stream/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/cacheable-request/node_modules/lowercase-keys/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/cacheable-request/node_modules/lowercase-keys/index.js ***!
  \*****************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = (object)=>{\n    const result = {};\n    for (const [key, value] of Object.entries(object)){\n        result[key.toLowerCase()] = value;\n    }\n    return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY2FjaGVhYmxlLXJlcXVlc3Qvbm9kZV9tb2R1bGVzL2xvd2VyY2FzZS1rZXlzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0FBLE9BQU9DLE9BQU8sR0FBR0MsQ0FBQUE7SUFDaEIsTUFBTUMsU0FBUyxDQUFDO0lBRWhCLEtBQUssTUFBTSxDQUFDQyxLQUFLQyxNQUFNLElBQUlDLE9BQU9DLE9BQU8sQ0FBQ0wsUUFBUztRQUNsREMsTUFBTSxDQUFDQyxJQUFJSSxXQUFXLEdBQUcsR0FBR0g7SUFDN0I7SUFFQSxPQUFPRjtBQUNSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZnVsbC8uL25vZGVfbW9kdWxlcy9jYWNoZWFibGUtcmVxdWVzdC9ub2RlX21vZHVsZXMvbG93ZXJjYXNlLWtleXMvaW5kZXguanM/MTMyOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IG9iamVjdCA9PiB7XG5cdGNvbnN0IHJlc3VsdCA9IHt9O1xuXG5cdGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG9iamVjdCkpIHtcblx0XHRyZXN1bHRba2V5LnRvTG93ZXJDYXNlKCldID0gdmFsdWU7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwib2JqZWN0IiwicmVzdWx0Iiwia2V5IiwidmFsdWUiLCJPYmplY3QiLCJlbnRyaWVzIiwidG9Mb3dlckNhc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/cacheable-request/node_modules/lowercase-keys/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/cacheable-request/src/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/cacheable-request/src/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst urlLib = __webpack_require__(/*! url */ \"url\");\nconst normalizeUrl = __webpack_require__(/*! normalize-url */ \"(rsc)/./node_modules/normalize-url/index.js\");\nconst getStream = __webpack_require__(/*! get-stream */ \"(rsc)/./node_modules/cacheable-request/node_modules/get-stream/index.js\");\nconst CachePolicy = __webpack_require__(/*! http-cache-semantics */ \"(rsc)/./node_modules/http-cache-semantics/index.js\");\nconst Response = __webpack_require__(/*! responselike */ \"(rsc)/./node_modules/responselike/src/index.js\");\nconst lowercaseKeys = __webpack_require__(/*! lowercase-keys */ \"(rsc)/./node_modules/cacheable-request/node_modules/lowercase-keys/index.js\");\nconst cloneResponse = __webpack_require__(/*! clone-response */ \"(rsc)/./node_modules/clone-response/src/index.js\");\nconst Keyv = __webpack_require__(/*! keyv */ \"(rsc)/./node_modules/keyv/src/index.js\");\nclass CacheableRequest {\n    constructor(request, cacheAdapter){\n        if (typeof request !== \"function\") {\n            throw new TypeError(\"Parameter `request` must be a function\");\n        }\n        this.cache = new Keyv({\n            uri: typeof cacheAdapter === \"string\" && cacheAdapter,\n            store: typeof cacheAdapter !== \"string\" && cacheAdapter,\n            namespace: \"cacheable-request\"\n        });\n        return this.createCacheableRequest(request);\n    }\n    createCacheableRequest(request) {\n        return (opts, cb)=>{\n            let url;\n            if (typeof opts === \"string\") {\n                url = normalizeUrlObject(urlLib.parse(opts));\n                opts = {};\n            } else if (opts instanceof urlLib.URL) {\n                url = normalizeUrlObject(urlLib.parse(opts.toString()));\n                opts = {};\n            } else {\n                const [pathname, ...searchParts] = (opts.path || \"\").split(\"?\");\n                const search = searchParts.length > 0 ? `?${searchParts.join(\"?\")}` : \"\";\n                url = normalizeUrlObject({\n                    ...opts,\n                    pathname,\n                    search\n                });\n            }\n            opts = {\n                headers: {},\n                method: \"GET\",\n                cache: true,\n                strictTtl: false,\n                automaticFailover: false,\n                ...opts,\n                ...urlObjectToRequestOptions(url)\n            };\n            opts.headers = lowercaseKeys(opts.headers);\n            const ee = new EventEmitter();\n            const normalizedUrlString = normalizeUrl(urlLib.format(url), {\n                stripWWW: false,\n                removeTrailingSlash: false,\n                stripAuthentication: false\n            });\n            const key = `${opts.method}:${normalizedUrlString}`;\n            let revalidate = false;\n            let madeRequest = false;\n            const makeRequest = (opts)=>{\n                madeRequest = true;\n                let requestErrored = false;\n                let requestErrorCallback;\n                const requestErrorPromise = new Promise((resolve)=>{\n                    requestErrorCallback = ()=>{\n                        if (!requestErrored) {\n                            requestErrored = true;\n                            resolve();\n                        }\n                    };\n                });\n                const handler = (response)=>{\n                    if (revalidate && !opts.forceRefresh) {\n                        response.status = response.statusCode;\n                        const revalidatedPolicy = CachePolicy.fromObject(revalidate.cachePolicy).revalidatedPolicy(opts, response);\n                        if (!revalidatedPolicy.modified) {\n                            const headers = revalidatedPolicy.policy.responseHeaders();\n                            response = new Response(revalidate.statusCode, headers, revalidate.body, revalidate.url);\n                            response.cachePolicy = revalidatedPolicy.policy;\n                            response.fromCache = true;\n                        }\n                    }\n                    if (!response.fromCache) {\n                        response.cachePolicy = new CachePolicy(opts, response, opts);\n                        response.fromCache = false;\n                    }\n                    let clonedResponse;\n                    if (opts.cache && response.cachePolicy.storable()) {\n                        clonedResponse = cloneResponse(response);\n                        (async ()=>{\n                            try {\n                                const bodyPromise = getStream.buffer(response);\n                                await Promise.race([\n                                    requestErrorPromise,\n                                    new Promise((resolve)=>response.once(\"end\", resolve))\n                                ]);\n                                if (requestErrored) {\n                                    return;\n                                }\n                                const body = await bodyPromise;\n                                const value = {\n                                    cachePolicy: response.cachePolicy.toObject(),\n                                    url: response.url,\n                                    statusCode: response.fromCache ? revalidate.statusCode : response.statusCode,\n                                    body\n                                };\n                                let ttl = opts.strictTtl ? response.cachePolicy.timeToLive() : undefined;\n                                if (opts.maxTtl) {\n                                    ttl = ttl ? Math.min(ttl, opts.maxTtl) : opts.maxTtl;\n                                }\n                                await this.cache.set(key, value, ttl);\n                            } catch (error) {\n                                ee.emit(\"error\", new CacheableRequest.CacheError(error));\n                            }\n                        })();\n                    } else if (opts.cache && revalidate) {\n                        (async ()=>{\n                            try {\n                                await this.cache.delete(key);\n                            } catch (error) {\n                                ee.emit(\"error\", new CacheableRequest.CacheError(error));\n                            }\n                        })();\n                    }\n                    ee.emit(\"response\", clonedResponse || response);\n                    if (typeof cb === \"function\") {\n                        cb(clonedResponse || response);\n                    }\n                };\n                try {\n                    const req = request(opts, handler);\n                    req.once(\"error\", requestErrorCallback);\n                    req.once(\"abort\", requestErrorCallback);\n                    ee.emit(\"request\", req);\n                } catch (error) {\n                    ee.emit(\"error\", new CacheableRequest.RequestError(error));\n                }\n            };\n            (async ()=>{\n                const get = async (opts)=>{\n                    await Promise.resolve();\n                    const cacheEntry = opts.cache ? await this.cache.get(key) : undefined;\n                    if (typeof cacheEntry === \"undefined\") {\n                        return makeRequest(opts);\n                    }\n                    const policy = CachePolicy.fromObject(cacheEntry.cachePolicy);\n                    if (policy.satisfiesWithoutRevalidation(opts) && !opts.forceRefresh) {\n                        const headers = policy.responseHeaders();\n                        const response = new Response(cacheEntry.statusCode, headers, cacheEntry.body, cacheEntry.url);\n                        response.cachePolicy = policy;\n                        response.fromCache = true;\n                        ee.emit(\"response\", response);\n                        if (typeof cb === \"function\") {\n                            cb(response);\n                        }\n                    } else {\n                        revalidate = cacheEntry;\n                        opts.headers = policy.revalidationHeaders(opts);\n                        makeRequest(opts);\n                    }\n                };\n                const errorHandler = (error)=>ee.emit(\"error\", new CacheableRequest.CacheError(error));\n                this.cache.once(\"error\", errorHandler);\n                ee.on(\"response\", ()=>this.cache.removeListener(\"error\", errorHandler));\n                try {\n                    await get(opts);\n                } catch (error) {\n                    if (opts.automaticFailover && !madeRequest) {\n                        makeRequest(opts);\n                    }\n                    ee.emit(\"error\", new CacheableRequest.CacheError(error));\n                }\n            })();\n            return ee;\n        };\n    }\n}\nfunction urlObjectToRequestOptions(url) {\n    const options = {\n        ...url\n    };\n    options.path = `${url.pathname || \"/\"}${url.search || \"\"}`;\n    delete options.pathname;\n    delete options.search;\n    return options;\n}\nfunction normalizeUrlObject(url) {\n    // If url was parsed by url.parse or new URL:\n    // - hostname will be set\n    // - host will be hostname[:port]\n    // - port will be set if it was explicit in the parsed string\n    // Otherwise, url was from request options:\n    // - hostname or host may be set\n    // - host shall not have port encoded\n    return {\n        protocol: url.protocol,\n        auth: url.auth,\n        hostname: url.hostname || url.host || \"localhost\",\n        port: url.port,\n        pathname: url.pathname,\n        search: url.search\n    };\n}\nCacheableRequest.RequestError = class extends Error {\n    constructor(error){\n        super(error.message);\n        this.name = \"RequestError\";\n        Object.assign(this, error);\n    }\n};\nCacheableRequest.CacheError = class extends Error {\n    constructor(error){\n        super(error.message);\n        this.name = \"CacheError\";\n        Object.assign(this, error);\n    }\n};\nmodule.exports = CacheableRequest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/cacheable-request/src/index.js\n");

/***/ })

};
;