"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/p-memoize";
exports.ids = ["vendor-chunks/p-memoize"];
exports.modules = {

/***/ "(rsc)/./node_modules/p-memoize/dist/index.js":
/*!**********************************************!*\
  !*** ./node_modules/p-memoize/dist/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ pMemoize),\n/* harmony export */   pMemoizeClear: () => (/* binding */ pMemoizeClear),\n/* harmony export */   pMemoizeDecorator: () => (/* binding */ pMemoizeDecorator)\n/* harmony export */ });\n/* harmony import */ var mimic_fn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mimic-fn */ \"(rsc)/./node_modules/mimic-fn/index.js\");\n\nconst cacheStore = new WeakMap();\nconst promiseCacheStore = new WeakMap();\n/**\n[Memoize](https://en.wikipedia.org/wiki/Memoization) functions - An optimization used to speed up consecutive function calls by caching the result of calls with identical input.\n\n@param fn - Function to be memoized.\n\n@example\n```\nimport {setTimeout as delay} from 'node:timer/promises';\nimport pMemoize from 'p-memoize';\nimport got from 'got';\n\nconst memoizedGot = pMemoize(got);\n\nawait memoizedGot('https://sindresorhus.com');\n\n// This call is cached\nawait memoizedGot('https://sindresorhus.com');\n\nawait delay(2000);\n\n// This call is not cached as the cache has expired\nawait memoizedGot('https://sindresorhus.com');\n```\n*/ function pMemoize(fn, { cachePromiseRejection = false, cacheKey, cache = new Map() } = {}) {\n    // Promise objects can't be serialized so we keep track of them internally and only provide their resolved values to `cache`\n    // `Promise<AsyncReturnType<FunctionToMemoize>>` is used instead of `ReturnType<FunctionToMemoize>` because promise properties are not kept\n    const promiseCache = new Map();\n    const memoized = async function(...arguments_) {\n        const key = cacheKey ? cacheKey(arguments_) : arguments_[0];\n        if (await cache.has(key)) {\n            if (promiseCache.has(key)) {\n                return promiseCache.get(key);\n            }\n            return await cache.get(key);\n        }\n        const promise = fn.apply(this, arguments_);\n        promiseCache.set(key, promise);\n        try {\n            const result = await promise;\n            cache.set(key, result);\n            return result;\n        } catch (error) {\n            if (!cachePromiseRejection) {\n                promiseCache.delete(key);\n            }\n            throw error;\n        }\n    };\n    (0,mimic_fn__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(memoized, fn, {\n        ignoreNonConfigurable: true\n    });\n    cacheStore.set(memoized, cache);\n    promiseCacheStore.set(memoized, promiseCache);\n    return memoized;\n}\n/**\n- Only class methods and getters/setters can be memoized, not regular functions (they aren't part of the proposal);\n- Only [TypeScript’s decorators](https://www.typescriptlang.org/docs/handbook/decorators.html#parameter-decorators) are supported, not [Babel’s](https://babeljs.io/docs/en/babel-plugin-proposal-decorators), which use a different version of the proposal;\n- Being an experimental feature, they need to be enabled with `--experimentalDecorators`; follow TypeScript’s docs.\n\n@returns A [decorator](https://github.com/tc39/proposal-decorators) to memoize class methods or static class methods.\n\n@example\n```\nimport {pMemoizeDecorator} from 'p-memoize';\n\nclass Example {\n    index = 0\n\n    @pMemoizeDecorator()\n    async counter() {\n        return ++this.index;\n    }\n}\n\nclass ExampleWithOptions {\n    index = 0\n\n    @pMemoizeDecorator()\n    async counter() {\n        return ++this.index;\n    }\n}\n```\n*/ function pMemoizeDecorator(options = {}) {\n    const instanceMap = new WeakMap();\n    return (target, propertyKey, descriptor)=>{\n        const input = target[propertyKey]; // eslint-disable-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n        if (typeof input !== \"function\") {\n            throw new TypeError(\"The decorated value must be a function\");\n        }\n        delete descriptor.value;\n        delete descriptor.writable;\n        descriptor.get = function() {\n            if (!instanceMap.has(this)) {\n                const value = pMemoize(input, options);\n                instanceMap.set(this, value);\n                return value;\n            }\n            return instanceMap.get(this);\n        };\n    };\n}\n/**\nClear all cached data of a memoized function.\n\n@param fn - Memoized function.\n*/ function pMemoizeClear(fn) {\n    const cache = cacheStore.get(fn);\n    if (!cache) {\n        throw new TypeError(\"Can't clear a function that was not memoized!\");\n    }\n    if (typeof cache.clear !== \"function\") {\n        throw new TypeError(\"The cache Map can't be cleared!\");\n    }\n    cache.clear();\n    promiseCacheStore.get(fn).clear();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/p-memoize/dist/index.js\n");

/***/ })

};
;