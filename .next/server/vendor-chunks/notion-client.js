"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/notion-client";
exports.ids = ["vendor-chunks/notion-client"];
exports.modules = {

/***/ "(rsc)/./node_modules/notion-client/node_modules/@szmarczak/http-timer/dist/source/index.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/@szmarczak/http-timer/dist/source/index.js ***!
  \********************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst defer_to_connect_1 = __webpack_require__(/*! defer-to-connect */ \"(rsc)/./node_modules/defer-to-connect/dist/source/index.js\");\nconst nodejsMajorVersion = Number(process.versions.node.split(\".\")[0]);\nconst timer = (request)=>{\n    const timings = {\n        start: Date.now(),\n        socket: undefined,\n        lookup: undefined,\n        connect: undefined,\n        secureConnect: undefined,\n        upload: undefined,\n        response: undefined,\n        end: undefined,\n        error: undefined,\n        abort: undefined,\n        phases: {\n            wait: undefined,\n            dns: undefined,\n            tcp: undefined,\n            tls: undefined,\n            request: undefined,\n            firstByte: undefined,\n            download: undefined,\n            total: undefined\n        }\n    };\n    request.timings = timings;\n    const handleError = (origin)=>{\n        const emit = origin.emit.bind(origin);\n        origin.emit = (event, ...args)=>{\n            // Catches the `error` event\n            if (event === \"error\") {\n                timings.error = Date.now();\n                timings.phases.total = timings.error - timings.start;\n                origin.emit = emit;\n            }\n            // Saves the original behavior\n            return emit(event, ...args);\n        };\n    };\n    handleError(request);\n    request.prependOnceListener(\"abort\", ()=>{\n        timings.abort = Date.now();\n        // Let the `end` response event be responsible for setting the total phase,\n        // unless the Node.js major version is >= 13.\n        if (!timings.response || nodejsMajorVersion >= 13) {\n            timings.phases.total = Date.now() - timings.start;\n        }\n    });\n    const onSocket = (socket)=>{\n        timings.socket = Date.now();\n        timings.phases.wait = timings.socket - timings.start;\n        const lookupListener = ()=>{\n            timings.lookup = Date.now();\n            timings.phases.dns = timings.lookup - timings.socket;\n        };\n        socket.prependOnceListener(\"lookup\", lookupListener);\n        defer_to_connect_1.default(socket, {\n            connect: ()=>{\n                timings.connect = Date.now();\n                if (timings.lookup === undefined) {\n                    socket.removeListener(\"lookup\", lookupListener);\n                    timings.lookup = timings.connect;\n                    timings.phases.dns = timings.lookup - timings.socket;\n                }\n                timings.phases.tcp = timings.connect - timings.lookup;\n            // This callback is called before flushing any data,\n            // so we don't need to set `timings.phases.request` here.\n            },\n            secureConnect: ()=>{\n                timings.secureConnect = Date.now();\n                timings.phases.tls = timings.secureConnect - timings.connect;\n            }\n        });\n    };\n    if (request.socket) {\n        onSocket(request.socket);\n    } else {\n        request.prependOnceListener(\"socket\", onSocket);\n    }\n    const onUpload = ()=>{\n        var _a;\n        timings.upload = Date.now();\n        timings.phases.request = timings.upload - (_a = timings.secureConnect, _a !== null && _a !== void 0 ? _a : timings.connect);\n    };\n    const writableFinished = ()=>{\n        if (typeof request.writableFinished === \"boolean\") {\n            return request.writableFinished;\n        }\n        // Node.js doesn't have `request.writableFinished` property\n        return request.finished && request.outputSize === 0 && (!request.socket || request.socket.writableLength === 0);\n    };\n    if (writableFinished()) {\n        onUpload();\n    } else {\n        request.prependOnceListener(\"finish\", onUpload);\n    }\n    request.prependOnceListener(\"response\", (response)=>{\n        timings.response = Date.now();\n        timings.phases.firstByte = timings.response - timings.upload;\n        response.timings = timings;\n        handleError(response);\n        response.prependOnceListener(\"end\", ()=>{\n            timings.end = Date.now();\n            timings.phases.download = timings.end - timings.response;\n            timings.phases.total = timings.end - timings.start;\n        });\n    });\n    return timings;\n};\nexports[\"default\"] = timer;\n// For CommonJS default export support\nmodule.exports = timer;\nmodule.exports[\"default\"] = timer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/@szmarczak/http-timer/dist/source/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/cacheable-lookup/source/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/cacheable-lookup/source/index.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { V4MAPPED, ADDRCONFIG, ALL, promises: { Resolver: AsyncResolver }, lookup: dnsLookup } = __webpack_require__(/*! dns */ \"dns\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst kCacheableLookupCreateConnection = Symbol(\"cacheableLookupCreateConnection\");\nconst kCacheableLookupInstance = Symbol(\"cacheableLookupInstance\");\nconst kExpires = Symbol(\"expires\");\nconst supportsALL = typeof ALL === \"number\";\nconst verifyAgent = (agent)=>{\n    if (!(agent && typeof agent.createConnection === \"function\")) {\n        throw new Error(\"Expected an Agent instance as the first argument\");\n    }\n};\nconst map4to6 = (entries)=>{\n    for (const entry of entries){\n        if (entry.family === 6) {\n            continue;\n        }\n        entry.address = `::ffff:${entry.address}`;\n        entry.family = 6;\n    }\n};\nconst getIfaceInfo = ()=>{\n    let has4 = false;\n    let has6 = false;\n    for (const device of Object.values(os.networkInterfaces())){\n        for (const iface of device){\n            if (iface.internal) {\n                continue;\n            }\n            if (iface.family === \"IPv6\") {\n                has6 = true;\n            } else {\n                has4 = true;\n            }\n            if (has4 && has6) {\n                return {\n                    has4,\n                    has6\n                };\n            }\n        }\n    }\n    return {\n        has4,\n        has6\n    };\n};\nconst isIterable = (map)=>{\n    return Symbol.iterator in map;\n};\nconst ttl = {\n    ttl: true\n};\nconst all = {\n    all: true\n};\nclass CacheableLookup {\n    constructor({ cache = new Map(), maxTtl = Infinity, fallbackDuration = 3600, errorTtl = 0.15, resolver = new AsyncResolver(), lookup = dnsLookup } = {}){\n        this.maxTtl = maxTtl;\n        this.errorTtl = errorTtl;\n        this._cache = cache;\n        this._resolver = resolver;\n        this._dnsLookup = promisify(lookup);\n        if (this._resolver instanceof AsyncResolver) {\n            this._resolve4 = this._resolver.resolve4.bind(this._resolver);\n            this._resolve6 = this._resolver.resolve6.bind(this._resolver);\n        } else {\n            this._resolve4 = promisify(this._resolver.resolve4.bind(this._resolver));\n            this._resolve6 = promisify(this._resolver.resolve6.bind(this._resolver));\n        }\n        this._iface = getIfaceInfo();\n        this._pending = {};\n        this._nextRemovalTime = false;\n        this._hostnamesToFallback = new Set();\n        if (fallbackDuration < 1) {\n            this._fallback = false;\n        } else {\n            this._fallback = true;\n            const interval = setInterval(()=>{\n                this._hostnamesToFallback.clear();\n            }, fallbackDuration * 1000);\n            /* istanbul ignore next: There is no `interval.unref()` when running inside an Electron renderer */ if (interval.unref) {\n                interval.unref();\n            }\n        }\n        this.lookup = this.lookup.bind(this);\n        this.lookupAsync = this.lookupAsync.bind(this);\n    }\n    set servers(servers) {\n        this.clear();\n        this._resolver.setServers(servers);\n    }\n    get servers() {\n        return this._resolver.getServers();\n    }\n    lookup(hostname, options, callback) {\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        } else if (typeof options === \"number\") {\n            options = {\n                family: options\n            };\n        }\n        if (!callback) {\n            throw new Error(\"Callback must be a function.\");\n        }\n        // eslint-disable-next-line promise/prefer-await-to-then\n        this.lookupAsync(hostname, options).then((result)=>{\n            if (options.all) {\n                callback(null, result);\n            } else {\n                callback(null, result.address, result.family, result.expires, result.ttl);\n            }\n        }, callback);\n    }\n    async lookupAsync(hostname, options = {}) {\n        if (typeof options === \"number\") {\n            options = {\n                family: options\n            };\n        }\n        let cached = await this.query(hostname);\n        if (options.family === 6) {\n            const filtered = cached.filter((entry)=>entry.family === 6);\n            if (options.hints & V4MAPPED) {\n                if (supportsALL && options.hints & ALL || filtered.length === 0) {\n                    map4to6(cached);\n                } else {\n                    cached = filtered;\n                }\n            } else {\n                cached = filtered;\n            }\n        } else if (options.family === 4) {\n            cached = cached.filter((entry)=>entry.family === 4);\n        }\n        if (options.hints & ADDRCONFIG) {\n            const { _iface } = this;\n            cached = cached.filter((entry)=>entry.family === 6 ? _iface.has6 : _iface.has4);\n        }\n        if (cached.length === 0) {\n            const error = new Error(`cacheableLookup ENOTFOUND ${hostname}`);\n            error.code = \"ENOTFOUND\";\n            error.hostname = hostname;\n            throw error;\n        }\n        if (options.all) {\n            return cached;\n        }\n        return cached[0];\n    }\n    async query(hostname) {\n        let cached = await this._cache.get(hostname);\n        if (!cached) {\n            const pending = this._pending[hostname];\n            if (pending) {\n                cached = await pending;\n            } else {\n                const newPromise = this.queryAndCache(hostname);\n                this._pending[hostname] = newPromise;\n                try {\n                    cached = await newPromise;\n                } finally{\n                    delete this._pending[hostname];\n                }\n            }\n        }\n        cached = cached.map((entry)=>{\n            return {\n                ...entry\n            };\n        });\n        return cached;\n    }\n    async _resolve(hostname) {\n        const wrap = async (promise)=>{\n            try {\n                return await promise;\n            } catch (error) {\n                if (error.code === \"ENODATA\" || error.code === \"ENOTFOUND\") {\n                    return [];\n                }\n                throw error;\n            }\n        };\n        // ANY is unsafe as it doesn't trigger new queries in the underlying server.\n        const [A, AAAA] = await Promise.all([\n            this._resolve4(hostname, ttl),\n            this._resolve6(hostname, ttl)\n        ].map((promise)=>wrap(promise)));\n        let aTtl = 0;\n        let aaaaTtl = 0;\n        let cacheTtl = 0;\n        const now = Date.now();\n        for (const entry of A){\n            entry.family = 4;\n            entry.expires = now + entry.ttl * 1000;\n            aTtl = Math.max(aTtl, entry.ttl);\n        }\n        for (const entry of AAAA){\n            entry.family = 6;\n            entry.expires = now + entry.ttl * 1000;\n            aaaaTtl = Math.max(aaaaTtl, entry.ttl);\n        }\n        if (A.length > 0) {\n            if (AAAA.length > 0) {\n                cacheTtl = Math.min(aTtl, aaaaTtl);\n            } else {\n                cacheTtl = aTtl;\n            }\n        } else {\n            cacheTtl = aaaaTtl;\n        }\n        return {\n            entries: [\n                ...A,\n                ...AAAA\n            ],\n            cacheTtl\n        };\n    }\n    async _lookup(hostname) {\n        try {\n            const entries = await this._dnsLookup(hostname, {\n                all: true\n            });\n            return {\n                entries,\n                cacheTtl: 0\n            };\n        } catch (_) {\n            return {\n                entries: [],\n                cacheTtl: 0\n            };\n        }\n    }\n    async _set(hostname, data, cacheTtl) {\n        if (this.maxTtl > 0 && cacheTtl > 0) {\n            cacheTtl = Math.min(cacheTtl, this.maxTtl) * 1000;\n            data[kExpires] = Date.now() + cacheTtl;\n            try {\n                await this._cache.set(hostname, data, cacheTtl);\n            } catch (error) {\n                this.lookupAsync = async ()=>{\n                    const cacheError = new Error(\"Cache Error. Please recreate the CacheableLookup instance.\");\n                    cacheError.cause = error;\n                    throw cacheError;\n                };\n            }\n            if (isIterable(this._cache)) {\n                this._tick(cacheTtl);\n            }\n        }\n    }\n    async queryAndCache(hostname) {\n        if (this._hostnamesToFallback.has(hostname)) {\n            return this._dnsLookup(hostname, all);\n        }\n        let query = await this._resolve(hostname);\n        if (query.entries.length === 0 && this._fallback) {\n            query = await this._lookup(hostname);\n            if (query.entries.length !== 0) {\n                // Use `dns.lookup(...)` for that particular hostname\n                this._hostnamesToFallback.add(hostname);\n            }\n        }\n        const cacheTtl = query.entries.length === 0 ? this.errorTtl : query.cacheTtl;\n        await this._set(hostname, query.entries, cacheTtl);\n        return query.entries;\n    }\n    _tick(ms) {\n        const nextRemovalTime = this._nextRemovalTime;\n        if (!nextRemovalTime || ms < nextRemovalTime) {\n            clearTimeout(this._removalTimeout);\n            this._nextRemovalTime = ms;\n            this._removalTimeout = setTimeout(()=>{\n                this._nextRemovalTime = false;\n                let nextExpiry = Infinity;\n                const now = Date.now();\n                for (const [hostname, entries] of this._cache){\n                    const expires = entries[kExpires];\n                    if (now >= expires) {\n                        this._cache.delete(hostname);\n                    } else if (expires < nextExpiry) {\n                        nextExpiry = expires;\n                    }\n                }\n                if (nextExpiry !== Infinity) {\n                    this._tick(nextExpiry - now);\n                }\n            }, ms);\n            /* istanbul ignore next: There is no `timeout.unref()` when running inside an Electron renderer */ if (this._removalTimeout.unref) {\n                this._removalTimeout.unref();\n            }\n        }\n    }\n    install(agent) {\n        verifyAgent(agent);\n        if (kCacheableLookupCreateConnection in agent) {\n            throw new Error(\"CacheableLookup has been already installed\");\n        }\n        agent[kCacheableLookupCreateConnection] = agent.createConnection;\n        agent[kCacheableLookupInstance] = this;\n        agent.createConnection = (options, callback)=>{\n            if (!(\"lookup\" in options)) {\n                options.lookup = this.lookup;\n            }\n            return agent[kCacheableLookupCreateConnection](options, callback);\n        };\n    }\n    uninstall(agent) {\n        verifyAgent(agent);\n        if (agent[kCacheableLookupCreateConnection]) {\n            if (agent[kCacheableLookupInstance] !== this) {\n                throw new Error(\"The agent is not owned by this CacheableLookup instance\");\n            }\n            agent.createConnection = agent[kCacheableLookupCreateConnection];\n            delete agent[kCacheableLookupCreateConnection];\n            delete agent[kCacheableLookupInstance];\n        }\n    }\n    updateInterfaceInfo() {\n        const { _iface } = this;\n        this._iface = getIfaceInfo();\n        if (_iface.has4 && !this._iface.has4 || _iface.has6 && !this._iface.has6) {\n            this._cache.clear();\n        }\n    }\n    clear(hostname) {\n        if (hostname) {\n            this._cache.delete(hostname);\n            return;\n        }\n        this._cache.clear();\n    }\n}\nmodule.exports = CacheableLookup;\nmodule.exports[\"default\"] = CacheableLookup;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/cacheable-lookup/source/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/create-rejection.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/as-promise/create-rejection.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/types.js\");\nfunction createRejection(error, ...beforeErrorGroups) {\n    const promise = (async ()=>{\n        if (error instanceof types_1.RequestError) {\n            try {\n                for (const hooks of beforeErrorGroups){\n                    if (hooks) {\n                        for (const hook of hooks){\n                            // eslint-disable-next-line no-await-in-loop\n                            error = await hook(error);\n                        }\n                    }\n                }\n            } catch (error_) {\n                error = error_;\n            }\n        }\n        throw error;\n    })();\n    const returnPromise = ()=>promise;\n    promise.json = returnPromise;\n    promise.text = returnPromise;\n    promise.buffer = returnPromise;\n    promise.on = returnPromise;\n    return promise;\n}\nexports[\"default\"] = createRejection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2FzLXByb21pc2UvY3JlYXRlLXJlamVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxVQUFVQyxtQkFBT0EsQ0FBQyxvR0FBUztBQUNqQyxTQUFTQyxnQkFBZ0JDLEtBQUssRUFBRSxHQUFHQyxpQkFBaUI7SUFDaEQsTUFBTUMsVUFBVSxDQUFDO1FBQ2IsSUFBSUYsaUJBQWlCSCxRQUFRTSxZQUFZLEVBQUU7WUFDdkMsSUFBSTtnQkFDQSxLQUFLLE1BQU1DLFNBQVNILGtCQUFtQjtvQkFDbkMsSUFBSUcsT0FBTzt3QkFDUCxLQUFLLE1BQU1DLFFBQVFELE1BQU87NEJBQ3RCLDRDQUE0Qzs0QkFDNUNKLFFBQVEsTUFBTUssS0FBS0w7d0JBQ3ZCO29CQUNKO2dCQUNKO1lBQ0osRUFDQSxPQUFPTSxRQUFRO2dCQUNYTixRQUFRTTtZQUNaO1FBQ0o7UUFDQSxNQUFNTjtJQUNWO0lBQ0EsTUFBTU8sZ0JBQWdCLElBQU1MO0lBQzVCQSxRQUFRTSxJQUFJLEdBQUdEO0lBQ2ZMLFFBQVFPLElBQUksR0FBR0Y7SUFDZkwsUUFBUVEsTUFBTSxHQUFHSDtJQUNqQkwsUUFBUVMsRUFBRSxHQUFHSjtJQUNiLE9BQU9MO0FBQ1g7QUFDQVAsa0JBQWUsR0FBR0kiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1mdWxsLy4vbm9kZV9tb2R1bGVzL25vdGlvbi1jbGllbnQvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9hcy1wcm9taXNlL2NyZWF0ZS1yZWplY3Rpb24uanM/NzI1MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbmZ1bmN0aW9uIGNyZWF0ZVJlamVjdGlvbihlcnJvciwgLi4uYmVmb3JlRXJyb3JHcm91cHMpIHtcbiAgICBjb25zdCBwcm9taXNlID0gKGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgdHlwZXNfMS5SZXF1ZXN0RXJyb3IpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBob29rcyBvZiBiZWZvcmVFcnJvckdyb3Vwcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaG9va3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaG9vayBvZiBob29rcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hd2FpdC1pbi1sb29wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBhd2FpdCBob29rKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcl8pIHtcbiAgICAgICAgICAgICAgICBlcnJvciA9IGVycm9yXztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9KSgpO1xuICAgIGNvbnN0IHJldHVyblByb21pc2UgPSAoKSA9PiBwcm9taXNlO1xuICAgIHByb21pc2UuanNvbiA9IHJldHVyblByb21pc2U7XG4gICAgcHJvbWlzZS50ZXh0ID0gcmV0dXJuUHJvbWlzZTtcbiAgICBwcm9taXNlLmJ1ZmZlciA9IHJldHVyblByb21pc2U7XG4gICAgcHJvbWlzZS5vbiA9IHJldHVyblByb21pc2U7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVSZWplY3Rpb247XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0eXBlc18xIiwicmVxdWlyZSIsImNyZWF0ZVJlamVjdGlvbiIsImVycm9yIiwiYmVmb3JlRXJyb3JHcm91cHMiLCJwcm9taXNlIiwiUmVxdWVzdEVycm9yIiwiaG9va3MiLCJob29rIiwiZXJyb3JfIiwicmV0dXJuUHJvbWlzZSIsImpzb24iLCJ0ZXh0IiwiYnVmZmVyIiwib24iLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/create-rejection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/as-promise/index.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\nconst PCancelable = __webpack_require__(/*! p-cancelable */ \"(rsc)/./node_modules/notion-client/node_modules/p-cancelable/index.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/types.js\");\nconst parse_body_1 = __webpack_require__(/*! ./parse-body */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/parse-body.js\");\nconst core_1 = __webpack_require__(/*! ../core */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/index.js\");\nconst proxy_events_1 = __webpack_require__(/*! ../core/utils/proxy-events */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/proxy-events.js\");\nconst get_buffer_1 = __webpack_require__(/*! ../core/utils/get-buffer */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/get-buffer.js\");\nconst is_response_ok_1 = __webpack_require__(/*! ../core/utils/is-response-ok */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/is-response-ok.js\");\nconst proxiedRequestEvents = [\n    \"request\",\n    \"response\",\n    \"redirect\",\n    \"uploadProgress\",\n    \"downloadProgress\"\n];\nfunction asPromise(normalizedOptions) {\n    let globalRequest;\n    let globalResponse;\n    const emitter = new events_1.EventEmitter();\n    const promise = new PCancelable((resolve, reject, onCancel)=>{\n        const makeRequest = (retryCount)=>{\n            const request = new core_1.default(undefined, normalizedOptions);\n            request.retryCount = retryCount;\n            request._noPipe = true;\n            onCancel(()=>request.destroy());\n            onCancel.shouldReject = false;\n            onCancel(()=>reject(new types_1.CancelError(request)));\n            globalRequest = request;\n            request.once(\"response\", async (response)=>{\n                var _a;\n                response.retryCount = retryCount;\n                if (response.request.aborted) {\n                    // Canceled while downloading - will throw a `CancelError` or `TimeoutError` error\n                    return;\n                }\n                // Download body\n                let rawBody;\n                try {\n                    rawBody = await get_buffer_1.default(request);\n                    response.rawBody = rawBody;\n                } catch (_b) {\n                    // The same error is caught below.\n                    // See request.once('error')\n                    return;\n                }\n                if (request._isAboutToError) {\n                    return;\n                }\n                // Parse body\n                const contentEncoding = ((_a = response.headers[\"content-encoding\"]) !== null && _a !== void 0 ? _a : \"\").toLowerCase();\n                const isCompressed = [\n                    \"gzip\",\n                    \"deflate\",\n                    \"br\"\n                ].includes(contentEncoding);\n                const { options } = request;\n                if (isCompressed && !options.decompress) {\n                    response.body = rawBody;\n                } else {\n                    try {\n                        response.body = parse_body_1.default(response, options.responseType, options.parseJson, options.encoding);\n                    } catch (error) {\n                        // Fallback to `utf8`\n                        response.body = rawBody.toString();\n                        if (is_response_ok_1.isResponseOk(response)) {\n                            request._beforeError(error);\n                            return;\n                        }\n                    }\n                }\n                try {\n                    for (const [index, hook] of options.hooks.afterResponse.entries()){\n                        // @ts-expect-error TS doesn't notice that CancelableRequest is a Promise\n                        // eslint-disable-next-line no-await-in-loop\n                        response = await hook(response, async (updatedOptions)=>{\n                            const typedOptions = core_1.default.normalizeArguments(undefined, {\n                                ...updatedOptions,\n                                retry: {\n                                    calculateDelay: ()=>0\n                                },\n                                throwHttpErrors: false,\n                                resolveBodyOnly: false\n                            }, options);\n                            // Remove any further hooks for that request, because we'll call them anyway.\n                            // The loop continues. We don't want duplicates (asPromise recursion).\n                            typedOptions.hooks.afterResponse = typedOptions.hooks.afterResponse.slice(0, index);\n                            for (const hook of typedOptions.hooks.beforeRetry){\n                                // eslint-disable-next-line no-await-in-loop\n                                await hook(typedOptions);\n                            }\n                            const promise = asPromise(typedOptions);\n                            onCancel(()=>{\n                                promise.catch(()=>{});\n                                promise.cancel();\n                            });\n                            return promise;\n                        });\n                    }\n                } catch (error) {\n                    request._beforeError(new types_1.RequestError(error.message, error, request));\n                    return;\n                }\n                if (!is_response_ok_1.isResponseOk(response)) {\n                    request._beforeError(new types_1.HTTPError(response));\n                    return;\n                }\n                globalResponse = response;\n                resolve(request.options.resolveBodyOnly ? response.body : response);\n            });\n            const onError = (error)=>{\n                if (promise.isCanceled) {\n                    return;\n                }\n                const { options } = request;\n                if (error instanceof types_1.HTTPError && !options.throwHttpErrors) {\n                    const { response } = error;\n                    resolve(request.options.resolveBodyOnly ? response.body : response);\n                    return;\n                }\n                reject(error);\n            };\n            request.once(\"error\", onError);\n            const previousBody = request.options.body;\n            request.once(\"retry\", (newRetryCount, error)=>{\n                var _a, _b;\n                if (previousBody === ((_a = error.request) === null || _a === void 0 ? void 0 : _a.options.body) && is_1.default.nodeStream((_b = error.request) === null || _b === void 0 ? void 0 : _b.options.body)) {\n                    onError(error);\n                    return;\n                }\n                makeRequest(newRetryCount);\n            });\n            proxy_events_1.default(request, emitter, proxiedRequestEvents);\n        };\n        makeRequest(0);\n    });\n    promise.on = (event, fn)=>{\n        emitter.on(event, fn);\n        return promise;\n    };\n    const shortcut = (responseType)=>{\n        const newPromise = (async ()=>{\n            // Wait until downloading has ended\n            await promise;\n            const { options } = globalResponse.request;\n            return parse_body_1.default(globalResponse, responseType, options.parseJson, options.encoding);\n        })();\n        Object.defineProperties(newPromise, Object.getOwnPropertyDescriptors(promise));\n        return newPromise;\n    };\n    promise.json = ()=>{\n        const { headers } = globalRequest.options;\n        if (!globalRequest.writableFinished && headers.accept === undefined) {\n            headers.accept = \"application/json\";\n        }\n        return shortcut(\"json\");\n    };\n    promise.buffer = ()=>shortcut(\"buffer\");\n    promise.text = ()=>shortcut(\"text\");\n    return promise;\n}\nexports[\"default\"] = asPromise;\n__exportStar(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/types.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/normalize-arguments.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/as-promise/normalize-arguments.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\nconst normalizeArguments = (options, defaults)=>{\n    if (is_1.default.null_(options.encoding)) {\n        throw new TypeError(\"To get a Buffer, set `options.responseType` to `buffer` instead\");\n    }\n    is_1.assert.any([\n        is_1.default.string,\n        is_1.default.undefined\n    ], options.encoding);\n    is_1.assert.any([\n        is_1.default.boolean,\n        is_1.default.undefined\n    ], options.resolveBodyOnly);\n    is_1.assert.any([\n        is_1.default.boolean,\n        is_1.default.undefined\n    ], options.methodRewriting);\n    is_1.assert.any([\n        is_1.default.boolean,\n        is_1.default.undefined\n    ], options.isStream);\n    is_1.assert.any([\n        is_1.default.string,\n        is_1.default.undefined\n    ], options.responseType);\n    // `options.responseType`\n    if (options.responseType === undefined) {\n        options.responseType = \"text\";\n    }\n    // `options.retry`\n    const { retry } = options;\n    if (defaults) {\n        options.retry = {\n            ...defaults.retry\n        };\n    } else {\n        options.retry = {\n            calculateDelay: (retryObject)=>retryObject.computedValue,\n            limit: 0,\n            methods: [],\n            statusCodes: [],\n            errorCodes: [],\n            maxRetryAfter: undefined\n        };\n    }\n    if (is_1.default.object(retry)) {\n        options.retry = {\n            ...options.retry,\n            ...retry\n        };\n        options.retry.methods = [\n            ...new Set(options.retry.methods.map((method)=>method.toUpperCase()))\n        ];\n        options.retry.statusCodes = [\n            ...new Set(options.retry.statusCodes)\n        ];\n        options.retry.errorCodes = [\n            ...new Set(options.retry.errorCodes)\n        ];\n    } else if (is_1.default.number(retry)) {\n        options.retry.limit = retry;\n    }\n    if (is_1.default.undefined(options.retry.maxRetryAfter)) {\n        options.retry.maxRetryAfter = Math.min(// TypeScript is not smart enough to handle `.filter(x => is.number(x))`.\n        // eslint-disable-next-line unicorn/no-fn-reference-in-iterator\n        ...[\n            options.timeout.request,\n            options.timeout.connect\n        ].filter(is_1.default.number));\n    }\n    // `options.pagination`\n    if (is_1.default.object(options.pagination)) {\n        if (defaults) {\n            options.pagination = {\n                ...defaults.pagination,\n                ...options.pagination\n            };\n        }\n        const { pagination } = options;\n        if (!is_1.default.function_(pagination.transform)) {\n            throw new Error(\"`options.pagination.transform` must be implemented\");\n        }\n        if (!is_1.default.function_(pagination.shouldContinue)) {\n            throw new Error(\"`options.pagination.shouldContinue` must be implemented\");\n        }\n        if (!is_1.default.function_(pagination.filter)) {\n            throw new TypeError(\"`options.pagination.filter` must be implemented\");\n        }\n        if (!is_1.default.function_(pagination.paginate)) {\n            throw new Error(\"`options.pagination.paginate` must be implemented\");\n        }\n    }\n    // JSON mode\n    if (options.responseType === \"json\" && options.headers.accept === undefined) {\n        options.headers.accept = \"application/json\";\n    }\n    return options;\n};\nexports[\"default\"] = normalizeArguments;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/normalize-arguments.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/parse-body.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/as-promise/parse-body.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/types.js\");\nconst parseBody = (response, responseType, parseJson, encoding)=>{\n    const { rawBody } = response;\n    try {\n        if (responseType === \"text\") {\n            return rawBody.toString(encoding);\n        }\n        if (responseType === \"json\") {\n            return rawBody.length === 0 ? \"\" : parseJson(rawBody.toString());\n        }\n        if (responseType === \"buffer\") {\n            return rawBody;\n        }\n        throw new types_1.ParseError({\n            message: `Unknown body type '${responseType}'`,\n            name: \"Error\"\n        }, response);\n    } catch (error) {\n        throw new types_1.ParseError(error, response);\n    }\n};\nexports[\"default\"] = parseBody;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2FzLXByb21pc2UvcGFyc2UtYm9keS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxVQUFVQyxtQkFBT0EsQ0FBQyxvR0FBUztBQUNqQyxNQUFNQyxZQUFZLENBQUNDLFVBQVVDLGNBQWNDLFdBQVdDO0lBQ2xELE1BQU0sRUFBRUMsT0FBTyxFQUFFLEdBQUdKO0lBQ3BCLElBQUk7UUFDQSxJQUFJQyxpQkFBaUIsUUFBUTtZQUN6QixPQUFPRyxRQUFRQyxRQUFRLENBQUNGO1FBQzVCO1FBQ0EsSUFBSUYsaUJBQWlCLFFBQVE7WUFDekIsT0FBT0csUUFBUUUsTUFBTSxLQUFLLElBQUksS0FBS0osVUFBVUUsUUFBUUMsUUFBUTtRQUNqRTtRQUNBLElBQUlKLGlCQUFpQixVQUFVO1lBQzNCLE9BQU9HO1FBQ1g7UUFDQSxNQUFNLElBQUlQLFFBQVFVLFVBQVUsQ0FBQztZQUN6QkMsU0FBUyxDQUFDLG1CQUFtQixFQUFFUCxhQUFhLENBQUMsQ0FBQztZQUM5Q1EsTUFBTTtRQUNWLEdBQUdUO0lBQ1AsRUFDQSxPQUFPVSxPQUFPO1FBQ1YsTUFBTSxJQUFJYixRQUFRVSxVQUFVLENBQUNHLE9BQU9WO0lBQ3hDO0FBQ0o7QUFDQUwsa0JBQWUsR0FBR0kiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1mdWxsLy4vbm9kZV9tb2R1bGVzL25vdGlvbi1jbGllbnQvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9hcy1wcm9taXNlL3BhcnNlLWJvZHkuanM/OGM4YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbmNvbnN0IHBhcnNlQm9keSA9IChyZXNwb25zZSwgcmVzcG9uc2VUeXBlLCBwYXJzZUpzb24sIGVuY29kaW5nKSA9PiB7XG4gICAgY29uc3QgeyByYXdCb2R5IH0gPSByZXNwb25zZTtcbiAgICB0cnkge1xuICAgICAgICBpZiAocmVzcG9uc2VUeXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgIHJldHVybiByYXdCb2R5LnRvU3RyaW5nKGVuY29kaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzcG9uc2VUeXBlID09PSAnanNvbicpIHtcbiAgICAgICAgICAgIHJldHVybiByYXdCb2R5Lmxlbmd0aCA9PT0gMCA/ICcnIDogcGFyc2VKc29uKHJhd0JvZHkudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3BvbnNlVHlwZSA9PT0gJ2J1ZmZlcicpIHtcbiAgICAgICAgICAgIHJldHVybiByYXdCb2R5O1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyB0eXBlc18xLlBhcnNlRXJyb3Ioe1xuICAgICAgICAgICAgbWVzc2FnZTogYFVua25vd24gYm9keSB0eXBlICcke3Jlc3BvbnNlVHlwZX0nYCxcbiAgICAgICAgICAgIG5hbWU6ICdFcnJvcidcbiAgICAgICAgfSwgcmVzcG9uc2UpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IHR5cGVzXzEuUGFyc2VFcnJvcihlcnJvciwgcmVzcG9uc2UpO1xuICAgIH1cbn07XG5leHBvcnRzLmRlZmF1bHQgPSBwYXJzZUJvZHk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0eXBlc18xIiwicmVxdWlyZSIsInBhcnNlQm9keSIsInJlc3BvbnNlIiwicmVzcG9uc2VUeXBlIiwicGFyc2VKc29uIiwiZW5jb2RpbmciLCJyYXdCb2R5IiwidG9TdHJpbmciLCJsZW5ndGgiLCJQYXJzZUVycm9yIiwibWVzc2FnZSIsIm5hbWUiLCJlcnJvciIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/parse-body.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/types.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/as-promise/types.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CancelError = exports.ParseError = void 0;\nconst core_1 = __webpack_require__(/*! ../core */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/index.js\");\n/**\nAn error to be thrown when server response code is 2xx, and parsing body fails.\nIncludes a `response` property.\n*/ class ParseError extends core_1.RequestError {\n    constructor(error, response){\n        const { options } = response.request;\n        super(`${error.message} in \"${options.url.toString()}\"`, error, response.request);\n        this.name = \"ParseError\";\n    }\n}\nexports.ParseError = ParseError;\n/**\nAn error to be thrown when the request is aborted with `.cancel()`.\n*/ class CancelError extends core_1.RequestError {\n    constructor(request){\n        super(\"Promise was canceled\", {}, request);\n        this.name = \"CancelError\";\n    }\n    get isCanceled() {\n        return true;\n    }\n}\nexports.CancelError = CancelError;\n__exportStar(__webpack_require__(/*! ../core */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/index.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2FzLXByb21pc2UvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQU1DLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQzFGLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCSixPQUFPTyxjQUFjLENBQUNMLEdBQUdHLElBQUk7UUFBRUcsWUFBWTtRQUFNQyxLQUFLO1lBQWEsT0FBT04sQ0FBQyxDQUFDQyxFQUFFO1FBQUU7SUFBRTtBQUN0RixJQUFNLFNBQVNGLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDdEIsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0JGLENBQUMsQ0FBQ0csR0FBRyxHQUFHRixDQUFDLENBQUNDLEVBQUU7QUFDaEIsQ0FBQztBQUNELElBQUlNLGVBQWUsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxZQUFZLElBQUssU0FBU1AsQ0FBQyxFQUFFUSxRQUFPO0lBQ2pFLElBQUssSUFBSUMsS0FBS1QsRUFBRyxJQUFJUyxNQUFNLGFBQWEsQ0FBQ1osT0FBT2EsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0osVUFBU0MsSUFBSWIsZ0JBQWdCWSxVQUFTUixHQUFHUztBQUMzSDtBQUNBWiw4Q0FBNkM7SUFBRWdCLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RMLG1CQUFtQixHQUFHQSxrQkFBa0IsR0FBRyxLQUFLO0FBQ2hELE1BQU1RLFNBQVNDLG1CQUFPQSxDQUFDLDhGQUFTO0FBQ2hDOzs7QUFHQSxHQUNBLE1BQU1GLG1CQUFtQkMsT0FBT0UsWUFBWTtJQUN4Q0MsWUFBWUMsS0FBSyxFQUFFQyxRQUFRLENBQUU7UUFDekIsTUFBTSxFQUFFQyxPQUFPLEVBQUUsR0FBR0QsU0FBU0UsT0FBTztRQUNwQyxLQUFLLENBQUMsQ0FBQyxFQUFFSCxNQUFNSSxPQUFPLENBQUMsS0FBSyxFQUFFRixRQUFRRyxHQUFHLENBQUNDLFFBQVEsR0FBRyxDQUFDLENBQUMsRUFBRU4sT0FBT0MsU0FBU0UsT0FBTztRQUNoRixJQUFJLENBQUNJLElBQUksR0FBRztJQUNoQjtBQUNKO0FBQ0FuQixrQkFBa0IsR0FBR087QUFDckI7O0FBRUEsR0FDQSxNQUFNRCxvQkFBb0JFLE9BQU9FLFlBQVk7SUFDekNDLFlBQVlJLE9BQU8sQ0FBRTtRQUNqQixLQUFLLENBQUMsd0JBQXdCLENBQUMsR0FBR0E7UUFDbEMsSUFBSSxDQUFDSSxJQUFJLEdBQUc7SUFDaEI7SUFDQSxJQUFJQyxhQUFhO1FBQ2IsT0FBTztJQUNYO0FBQ0o7QUFDQXBCLG1CQUFtQixHQUFHTTtBQUN0QlAsYUFBYVUsbUJBQU9BLENBQUMsOEZBQVMsR0FBR1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1mdWxsLy4vbm9kZV9tb2R1bGVzL25vdGlvbi1jbGllbnQvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9hcy1wcm9taXNlL3R5cGVzLmpzP2FiMTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ2FuY2VsRXJyb3IgPSBleHBvcnRzLlBhcnNlRXJyb3IgPSB2b2lkIDA7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiLi4vY29yZVwiKTtcbi8qKlxuQW4gZXJyb3IgdG8gYmUgdGhyb3duIHdoZW4gc2VydmVyIHJlc3BvbnNlIGNvZGUgaXMgMnh4LCBhbmQgcGFyc2luZyBib2R5IGZhaWxzLlxuSW5jbHVkZXMgYSBgcmVzcG9uc2VgIHByb3BlcnR5LlxuKi9cbmNsYXNzIFBhcnNlRXJyb3IgZXh0ZW5kcyBjb3JlXzEuUmVxdWVzdEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihlcnJvciwgcmVzcG9uc2UpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zIH0gPSByZXNwb25zZS5yZXF1ZXN0O1xuICAgICAgICBzdXBlcihgJHtlcnJvci5tZXNzYWdlfSBpbiBcIiR7b3B0aW9ucy51cmwudG9TdHJpbmcoKX1cImAsIGVycm9yLCByZXNwb25zZS5yZXF1ZXN0KTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ1BhcnNlRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuUGFyc2VFcnJvciA9IFBhcnNlRXJyb3I7XG4vKipcbkFuIGVycm9yIHRvIGJlIHRocm93biB3aGVuIHRoZSByZXF1ZXN0IGlzIGFib3J0ZWQgd2l0aCBgLmNhbmNlbCgpYC5cbiovXG5jbGFzcyBDYW5jZWxFcnJvciBleHRlbmRzIGNvcmVfMS5SZXF1ZXN0RXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHJlcXVlc3QpIHtcbiAgICAgICAgc3VwZXIoJ1Byb21pc2Ugd2FzIGNhbmNlbGVkJywge30sIHJlcXVlc3QpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnQ2FuY2VsRXJyb3InO1xuICAgIH1cbiAgICBnZXQgaXNDYW5jZWxlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuZXhwb3J0cy5DYW5jZWxFcnJvciA9IENhbmNlbEVycm9yO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuLi9jb3JlXCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6WyJfX2NyZWF0ZUJpbmRpbmciLCJPYmplY3QiLCJjcmVhdGUiLCJvIiwibSIsImsiLCJrMiIsInVuZGVmaW5lZCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIl9fZXhwb3J0U3RhciIsImV4cG9ydHMiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidmFsdWUiLCJDYW5jZWxFcnJvciIsIlBhcnNlRXJyb3IiLCJjb3JlXzEiLCJyZXF1aXJlIiwiUmVxdWVzdEVycm9yIiwiY29uc3RydWN0b3IiLCJlcnJvciIsInJlc3BvbnNlIiwib3B0aW9ucyIsInJlcXVlc3QiLCJtZXNzYWdlIiwidXJsIiwidG9TdHJpbmciLCJuYW1lIiwiaXNDYW5jZWxlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/calculate-retry-delay.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/core/calculate-retry-delay.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.retryAfterStatusCodes = void 0;\nexports.retryAfterStatusCodes = new Set([\n    413,\n    429,\n    503\n]);\nconst calculateRetryDelay = ({ attemptCount, retryOptions, error, retryAfter })=>{\n    if (attemptCount > retryOptions.limit) {\n        return 0;\n    }\n    const hasMethod = retryOptions.methods.includes(error.options.method);\n    const hasErrorCode = retryOptions.errorCodes.includes(error.code);\n    const hasStatusCode = error.response && retryOptions.statusCodes.includes(error.response.statusCode);\n    if (!hasMethod || !hasErrorCode && !hasStatusCode) {\n        return 0;\n    }\n    if (error.response) {\n        if (retryAfter) {\n            if (retryOptions.maxRetryAfter === undefined || retryAfter > retryOptions.maxRetryAfter) {\n                return 0;\n            }\n            return retryAfter;\n        }\n        if (error.response.statusCode === 413) {\n            return 0;\n        }\n    }\n    const noise = Math.random() * 100;\n    return 2 ** (attemptCount - 1) * 1000 + noise;\n};\nexports[\"default\"] = calculateRetryDelay;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvY2FsY3VsYXRlLXJldHJ5LWRlbGF5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw2QkFBNkIsR0FBRyxLQUFLO0FBQ3JDQSw2QkFBNkIsR0FBRyxJQUFJRyxJQUFJO0lBQUM7SUFBSztJQUFLO0NBQUk7QUFDdkQsTUFBTUMsc0JBQXNCLENBQUMsRUFBRUMsWUFBWSxFQUFFQyxZQUFZLEVBQUVDLEtBQUssRUFBRUMsVUFBVSxFQUFFO0lBQzFFLElBQUlILGVBQWVDLGFBQWFHLEtBQUssRUFBRTtRQUNuQyxPQUFPO0lBQ1g7SUFDQSxNQUFNQyxZQUFZSixhQUFhSyxPQUFPLENBQUNDLFFBQVEsQ0FBQ0wsTUFBTU0sT0FBTyxDQUFDQyxNQUFNO0lBQ3BFLE1BQU1DLGVBQWVULGFBQWFVLFVBQVUsQ0FBQ0osUUFBUSxDQUFDTCxNQUFNVSxJQUFJO0lBQ2hFLE1BQU1DLGdCQUFnQlgsTUFBTVksUUFBUSxJQUFJYixhQUFhYyxXQUFXLENBQUNSLFFBQVEsQ0FBQ0wsTUFBTVksUUFBUSxDQUFDRSxVQUFVO0lBQ25HLElBQUksQ0FBQ1gsYUFBYyxDQUFDSyxnQkFBZ0IsQ0FBQ0csZUFBZ0I7UUFDakQsT0FBTztJQUNYO0lBQ0EsSUFBSVgsTUFBTVksUUFBUSxFQUFFO1FBQ2hCLElBQUlYLFlBQVk7WUFDWixJQUFJRixhQUFhZ0IsYUFBYSxLQUFLQyxhQUFhZixhQUFhRixhQUFhZ0IsYUFBYSxFQUFFO2dCQUNyRixPQUFPO1lBQ1g7WUFDQSxPQUFPZDtRQUNYO1FBQ0EsSUFBSUQsTUFBTVksUUFBUSxDQUFDRSxVQUFVLEtBQUssS0FBSztZQUNuQyxPQUFPO1FBQ1g7SUFDSjtJQUNBLE1BQU1HLFFBQVFDLEtBQUtDLE1BQU0sS0FBSztJQUM5QixPQUFPLEtBQVFyQixDQUFBQSxlQUFlLEtBQU0sT0FBUW1CO0FBQ2hEO0FBQ0F4QixrQkFBZSxHQUFHSSIsInNvdXJjZXMiOlsid2VicGFjazovL25vdGlvbi14LWZ1bGwvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvY2FsY3VsYXRlLXJldHJ5LWRlbGF5LmpzP2Q1MTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJldHJ5QWZ0ZXJTdGF0dXNDb2RlcyA9IHZvaWQgMDtcbmV4cG9ydHMucmV0cnlBZnRlclN0YXR1c0NvZGVzID0gbmV3IFNldChbNDEzLCA0MjksIDUwM10pO1xuY29uc3QgY2FsY3VsYXRlUmV0cnlEZWxheSA9ICh7IGF0dGVtcHRDb3VudCwgcmV0cnlPcHRpb25zLCBlcnJvciwgcmV0cnlBZnRlciB9KSA9PiB7XG4gICAgaWYgKGF0dGVtcHRDb3VudCA+IHJldHJ5T3B0aW9ucy5saW1pdCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgY29uc3QgaGFzTWV0aG9kID0gcmV0cnlPcHRpb25zLm1ldGhvZHMuaW5jbHVkZXMoZXJyb3Iub3B0aW9ucy5tZXRob2QpO1xuICAgIGNvbnN0IGhhc0Vycm9yQ29kZSA9IHJldHJ5T3B0aW9ucy5lcnJvckNvZGVzLmluY2x1ZGVzKGVycm9yLmNvZGUpO1xuICAgIGNvbnN0IGhhc1N0YXR1c0NvZGUgPSBlcnJvci5yZXNwb25zZSAmJiByZXRyeU9wdGlvbnMuc3RhdHVzQ29kZXMuaW5jbHVkZXMoZXJyb3IucmVzcG9uc2Uuc3RhdHVzQ29kZSk7XG4gICAgaWYgKCFoYXNNZXRob2QgfHwgKCFoYXNFcnJvckNvZGUgJiYgIWhhc1N0YXR1c0NvZGUpKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBpZiAoZXJyb3IucmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJldHJ5QWZ0ZXIpIHtcbiAgICAgICAgICAgIGlmIChyZXRyeU9wdGlvbnMubWF4UmV0cnlBZnRlciA9PT0gdW5kZWZpbmVkIHx8IHJldHJ5QWZ0ZXIgPiByZXRyeU9wdGlvbnMubWF4UmV0cnlBZnRlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJldHJ5QWZ0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yLnJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDQxMykge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgbm9pc2UgPSBNYXRoLnJhbmRvbSgpICogMTAwO1xuICAgIHJldHVybiAoKDIgKiogKGF0dGVtcHRDb3VudCAtIDEpKSAqIDEwMDApICsgbm9pc2U7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gY2FsY3VsYXRlUmV0cnlEZWxheTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInJldHJ5QWZ0ZXJTdGF0dXNDb2RlcyIsIlNldCIsImNhbGN1bGF0ZVJldHJ5RGVsYXkiLCJhdHRlbXB0Q291bnQiLCJyZXRyeU9wdGlvbnMiLCJlcnJvciIsInJldHJ5QWZ0ZXIiLCJsaW1pdCIsImhhc01ldGhvZCIsIm1ldGhvZHMiLCJpbmNsdWRlcyIsIm9wdGlvbnMiLCJtZXRob2QiLCJoYXNFcnJvckNvZGUiLCJlcnJvckNvZGVzIiwiY29kZSIsImhhc1N0YXR1c0NvZGUiLCJyZXNwb25zZSIsInN0YXR1c0NvZGVzIiwic3RhdHVzQ29kZSIsIm1heFJldHJ5QWZ0ZXIiLCJ1bmRlZmluZWQiLCJub2lzZSIsIk1hdGgiLCJyYW5kb20iLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/calculate-retry-delay.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/core/index.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UnsupportedProtocolError = exports.ReadError = exports.TimeoutError = exports.UploadError = exports.CacheError = exports.HTTPError = exports.MaxRedirectsError = exports.RequestError = exports.setNonEnumerableProperties = exports.knownHookEvents = exports.withoutBody = exports.kIsNormalizedAlready = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst http_1 = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst http_timer_1 = __webpack_require__(/*! @szmarczak/http-timer */ \"(rsc)/./node_modules/notion-client/node_modules/@szmarczak/http-timer/dist/source/index.js\");\nconst cacheable_lookup_1 = __webpack_require__(/*! cacheable-lookup */ \"(rsc)/./node_modules/notion-client/node_modules/cacheable-lookup/source/index.js\");\nconst CacheableRequest = __webpack_require__(/*! cacheable-request */ \"(rsc)/./node_modules/cacheable-request/src/index.js\");\nconst decompressResponse = __webpack_require__(/*! decompress-response */ \"(rsc)/./node_modules/decompress-response/index.js\");\n// @ts-expect-error Missing types\nconst http2wrapper = __webpack_require__(/*! http2-wrapper */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/index.js\");\nconst lowercaseKeys = __webpack_require__(/*! lowercase-keys */ \"(rsc)/./node_modules/notion-client/node_modules/lowercase-keys/index.js\");\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\nconst get_body_size_1 = __webpack_require__(/*! ./utils/get-body-size */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/get-body-size.js\");\nconst is_form_data_1 = __webpack_require__(/*! ./utils/is-form-data */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/is-form-data.js\");\nconst proxy_events_1 = __webpack_require__(/*! ./utils/proxy-events */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/proxy-events.js\");\nconst timed_out_1 = __webpack_require__(/*! ./utils/timed-out */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/timed-out.js\");\nconst url_to_options_1 = __webpack_require__(/*! ./utils/url-to-options */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/url-to-options.js\");\nconst options_to_url_1 = __webpack_require__(/*! ./utils/options-to-url */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/options-to-url.js\");\nconst weakable_map_1 = __webpack_require__(/*! ./utils/weakable-map */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/weakable-map.js\");\nconst get_buffer_1 = __webpack_require__(/*! ./utils/get-buffer */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/get-buffer.js\");\nconst dns_ip_version_1 = __webpack_require__(/*! ./utils/dns-ip-version */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/dns-ip-version.js\");\nconst is_response_ok_1 = __webpack_require__(/*! ./utils/is-response-ok */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/is-response-ok.js\");\nconst deprecation_warning_1 = __webpack_require__(/*! ../utils/deprecation-warning */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/utils/deprecation-warning.js\");\nconst normalize_arguments_1 = __webpack_require__(/*! ../as-promise/normalize-arguments */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/normalize-arguments.js\");\nconst calculate_retry_delay_1 = __webpack_require__(/*! ./calculate-retry-delay */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/calculate-retry-delay.js\");\nlet globalDnsCache;\nconst kRequest = Symbol(\"request\");\nconst kResponse = Symbol(\"response\");\nconst kResponseSize = Symbol(\"responseSize\");\nconst kDownloadedSize = Symbol(\"downloadedSize\");\nconst kBodySize = Symbol(\"bodySize\");\nconst kUploadedSize = Symbol(\"uploadedSize\");\nconst kServerResponsesPiped = Symbol(\"serverResponsesPiped\");\nconst kUnproxyEvents = Symbol(\"unproxyEvents\");\nconst kIsFromCache = Symbol(\"isFromCache\");\nconst kCancelTimeouts = Symbol(\"cancelTimeouts\");\nconst kStartedReading = Symbol(\"startedReading\");\nconst kStopReading = Symbol(\"stopReading\");\nconst kTriggerRead = Symbol(\"triggerRead\");\nconst kBody = Symbol(\"body\");\nconst kJobs = Symbol(\"jobs\");\nconst kOriginalResponse = Symbol(\"originalResponse\");\nconst kRetryTimeout = Symbol(\"retryTimeout\");\nexports.kIsNormalizedAlready = Symbol(\"isNormalizedAlready\");\nconst supportsBrotli = is_1.default.string(process.versions.brotli);\nexports.withoutBody = new Set([\n    \"GET\",\n    \"HEAD\"\n]);\nexports.knownHookEvents = [\n    \"init\",\n    \"beforeRequest\",\n    \"beforeRedirect\",\n    \"beforeError\",\n    \"beforeRetry\",\n    // Promise-Only\n    \"afterResponse\"\n];\nfunction validateSearchParameters(searchParameters) {\n    // eslint-disable-next-line guard-for-in\n    for(const key in searchParameters){\n        const value = searchParameters[key];\n        if (!is_1.default.string(value) && !is_1.default.number(value) && !is_1.default.boolean(value) && !is_1.default.null_(value) && !is_1.default.undefined(value)) {\n            throw new TypeError(`The \\`searchParams\\` value '${String(value)}' must be a string, number, boolean or null`);\n        }\n    }\n}\nfunction isClientRequest(clientRequest) {\n    return is_1.default.object(clientRequest) && !(\"statusCode\" in clientRequest);\n}\nconst cacheableStore = new weakable_map_1.default();\nconst waitForOpenFile = async (file)=>new Promise((resolve, reject)=>{\n        const onError = (error)=>{\n            reject(error);\n        };\n        // Node.js 12 has incomplete types\n        if (!file.pending) {\n            resolve();\n        }\n        file.once(\"error\", onError);\n        file.once(\"ready\", ()=>{\n            file.off(\"error\", onError);\n            resolve();\n        });\n    });\nconst redirectCodes = new Set([\n    300,\n    301,\n    302,\n    303,\n    304,\n    307,\n    308\n]);\nconst nonEnumerableProperties = [\n    \"context\",\n    \"body\",\n    \"json\",\n    \"form\"\n];\nexports.setNonEnumerableProperties = (sources, to)=>{\n    // Non enumerable properties shall not be merged\n    const properties = {};\n    for (const source of sources){\n        if (!source) {\n            continue;\n        }\n        for (const name of nonEnumerableProperties){\n            if (!(name in source)) {\n                continue;\n            }\n            properties[name] = {\n                writable: true,\n                configurable: true,\n                enumerable: false,\n                // @ts-expect-error TS doesn't see the check above\n                value: source[name]\n            };\n        }\n    }\n    Object.defineProperties(to, properties);\n};\n/**\nAn error to be thrown when a request fails.\nContains a `code` property with error class code, like `ECONNREFUSED`.\n*/ class RequestError extends Error {\n    constructor(message, error, self){\n        var _a;\n        super(message);\n        Error.captureStackTrace(this, this.constructor);\n        this.name = \"RequestError\";\n        this.code = error.code;\n        if (self instanceof Request) {\n            Object.defineProperty(this, \"request\", {\n                enumerable: false,\n                value: self\n            });\n            Object.defineProperty(this, \"response\", {\n                enumerable: false,\n                value: self[kResponse]\n            });\n            Object.defineProperty(this, \"options\", {\n                // This fails because of TS 3.7.2 useDefineForClassFields\n                // Ref: https://github.com/microsoft/TypeScript/issues/34972\n                enumerable: false,\n                value: self.options\n            });\n        } else {\n            Object.defineProperty(this, \"options\", {\n                // This fails because of TS 3.7.2 useDefineForClassFields\n                // Ref: https://github.com/microsoft/TypeScript/issues/34972\n                enumerable: false,\n                value: self\n            });\n        }\n        this.timings = (_a = this.request) === null || _a === void 0 ? void 0 : _a.timings;\n        // Recover the original stacktrace\n        if (is_1.default.string(error.stack) && is_1.default.string(this.stack)) {\n            const indexOfMessage = this.stack.indexOf(this.message) + this.message.length;\n            const thisStackTrace = this.stack.slice(indexOfMessage).split(\"\\n\").reverse();\n            const errorStackTrace = error.stack.slice(error.stack.indexOf(error.message) + error.message.length).split(\"\\n\").reverse();\n            // Remove duplicated traces\n            while(errorStackTrace.length !== 0 && errorStackTrace[0] === thisStackTrace[0]){\n                thisStackTrace.shift();\n            }\n            this.stack = `${this.stack.slice(0, indexOfMessage)}${thisStackTrace.reverse().join(\"\\n\")}${errorStackTrace.reverse().join(\"\\n\")}`;\n        }\n    }\n}\nexports.RequestError = RequestError;\n/**\nAn error to be thrown when the server redirects you more than ten times.\nIncludes a `response` property.\n*/ class MaxRedirectsError extends RequestError {\n    constructor(request){\n        super(`Redirected ${request.options.maxRedirects} times. Aborting.`, {}, request);\n        this.name = \"MaxRedirectsError\";\n    }\n}\nexports.MaxRedirectsError = MaxRedirectsError;\n/**\nAn error to be thrown when the server response code is not 2xx nor 3xx if `options.followRedirect` is `true`, but always except for 304.\nIncludes a `response` property.\n*/ class HTTPError extends RequestError {\n    constructor(response){\n        super(`Response code ${response.statusCode} (${response.statusMessage})`, {}, response.request);\n        this.name = \"HTTPError\";\n    }\n}\nexports.HTTPError = HTTPError;\n/**\nAn error to be thrown when a cache method fails.\nFor example, if the database goes down or there's a filesystem error.\n*/ class CacheError extends RequestError {\n    constructor(error, request){\n        super(error.message, error, request);\n        this.name = \"CacheError\";\n    }\n}\nexports.CacheError = CacheError;\n/**\nAn error to be thrown when the request body is a stream and an error occurs while reading from that stream.\n*/ class UploadError extends RequestError {\n    constructor(error, request){\n        super(error.message, error, request);\n        this.name = \"UploadError\";\n    }\n}\nexports.UploadError = UploadError;\n/**\nAn error to be thrown when the request is aborted due to a timeout.\nIncludes an `event` and `timings` property.\n*/ class TimeoutError extends RequestError {\n    constructor(error, timings, request){\n        super(error.message, error, request);\n        this.name = \"TimeoutError\";\n        this.event = error.event;\n        this.timings = timings;\n    }\n}\nexports.TimeoutError = TimeoutError;\n/**\nAn error to be thrown when reading from response stream fails.\n*/ class ReadError extends RequestError {\n    constructor(error, request){\n        super(error.message, error, request);\n        this.name = \"ReadError\";\n    }\n}\nexports.ReadError = ReadError;\n/**\nAn error to be thrown when given an unsupported protocol.\n*/ class UnsupportedProtocolError extends RequestError {\n    constructor(options){\n        super(`Unsupported protocol \"${options.url.protocol}\"`, {}, options);\n        this.name = \"UnsupportedProtocolError\";\n    }\n}\nexports.UnsupportedProtocolError = UnsupportedProtocolError;\nconst proxiedRequestEvents = [\n    \"socket\",\n    \"connect\",\n    \"continue\",\n    \"information\",\n    \"upgrade\",\n    \"timeout\"\n];\nclass Request extends stream_1.Duplex {\n    constructor(url, options = {}, defaults){\n        super({\n            // This must be false, to enable throwing after destroy\n            // It is used for retry logic in Promise API\n            autoDestroy: false,\n            // It needs to be zero because we're just proxying the data to another stream\n            highWaterMark: 0\n        });\n        this[kDownloadedSize] = 0;\n        this[kUploadedSize] = 0;\n        this.requestInitialized = false;\n        this[kServerResponsesPiped] = new Set();\n        this.redirects = [];\n        this[kStopReading] = false;\n        this[kTriggerRead] = false;\n        this[kJobs] = [];\n        this.retryCount = 0;\n        // TODO: Remove this when targeting Node.js >= 12\n        this._progressCallbacks = [];\n        const unlockWrite = ()=>this._unlockWrite();\n        const lockWrite = ()=>this._lockWrite();\n        this.on(\"pipe\", (source)=>{\n            source.prependListener(\"data\", unlockWrite);\n            source.on(\"data\", lockWrite);\n            source.prependListener(\"end\", unlockWrite);\n            source.on(\"end\", lockWrite);\n        });\n        this.on(\"unpipe\", (source)=>{\n            source.off(\"data\", unlockWrite);\n            source.off(\"data\", lockWrite);\n            source.off(\"end\", unlockWrite);\n            source.off(\"end\", lockWrite);\n        });\n        this.on(\"pipe\", (source)=>{\n            if (source instanceof http_1.IncomingMessage) {\n                this.options.headers = {\n                    ...source.headers,\n                    ...this.options.headers\n                };\n            }\n        });\n        const { json, body, form } = options;\n        if (json || body || form) {\n            this._lockWrite();\n        }\n        if (exports.kIsNormalizedAlready in options) {\n            this.options = options;\n        } else {\n            try {\n                // @ts-expect-error Common TypeScript bug saying that `this.constructor` is not accessible\n                this.options = this.constructor.normalizeArguments(url, options, defaults);\n            } catch (error) {\n                // TODO: Move this to `_destroy()`\n                if (is_1.default.nodeStream(options.body)) {\n                    options.body.destroy();\n                }\n                this.destroy(error);\n                return;\n            }\n        }\n        (async ()=>{\n            var _a;\n            try {\n                if (this.options.body instanceof fs_1.ReadStream) {\n                    await waitForOpenFile(this.options.body);\n                }\n                const { url: normalizedURL } = this.options;\n                if (!normalizedURL) {\n                    throw new TypeError(\"Missing `url` property\");\n                }\n                this.requestUrl = normalizedURL.toString();\n                decodeURI(this.requestUrl);\n                await this._finalizeBody();\n                await this._makeRequest();\n                if (this.destroyed) {\n                    (_a = this[kRequest]) === null || _a === void 0 ? void 0 : _a.destroy();\n                    return;\n                }\n                // Queued writes etc.\n                for (const job of this[kJobs]){\n                    job();\n                }\n                // Prevent memory leak\n                this[kJobs].length = 0;\n                this.requestInitialized = true;\n            } catch (error) {\n                if (error instanceof RequestError) {\n                    this._beforeError(error);\n                    return;\n                }\n                // This is a workaround for https://github.com/nodejs/node/issues/33335\n                if (!this.destroyed) {\n                    this.destroy(error);\n                }\n            }\n        })();\n    }\n    static normalizeArguments(url, options, defaults) {\n        var _a, _b, _c, _d, _e;\n        const rawOptions = options;\n        if (is_1.default.object(url) && !is_1.default.urlInstance(url)) {\n            options = {\n                ...defaults,\n                ...url,\n                ...options\n            };\n        } else {\n            if (url && options && options.url !== undefined) {\n                throw new TypeError(\"The `url` option is mutually exclusive with the `input` argument\");\n            }\n            options = {\n                ...defaults,\n                ...options\n            };\n            if (url !== undefined) {\n                options.url = url;\n            }\n            if (is_1.default.urlInstance(options.url)) {\n                options.url = new url_1.URL(options.url.toString());\n            }\n        }\n        // TODO: Deprecate URL options in Got 12.\n        // Support extend-specific options\n        if (options.cache === false) {\n            options.cache = undefined;\n        }\n        if (options.dnsCache === false) {\n            options.dnsCache = undefined;\n        }\n        // Nice type assertions\n        is_1.assert.any([\n            is_1.default.string,\n            is_1.default.undefined\n        ], options.method);\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.undefined\n        ], options.headers);\n        is_1.assert.any([\n            is_1.default.string,\n            is_1.default.urlInstance,\n            is_1.default.undefined\n        ], options.prefixUrl);\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.undefined\n        ], options.cookieJar);\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.string,\n            is_1.default.undefined\n        ], options.searchParams);\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.string,\n            is_1.default.undefined\n        ], options.cache);\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.number,\n            is_1.default.undefined\n        ], options.timeout);\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.undefined\n        ], options.context);\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.undefined\n        ], options.hooks);\n        is_1.assert.any([\n            is_1.default.boolean,\n            is_1.default.undefined\n        ], options.decompress);\n        is_1.assert.any([\n            is_1.default.boolean,\n            is_1.default.undefined\n        ], options.ignoreInvalidCookies);\n        is_1.assert.any([\n            is_1.default.boolean,\n            is_1.default.undefined\n        ], options.followRedirect);\n        is_1.assert.any([\n            is_1.default.number,\n            is_1.default.undefined\n        ], options.maxRedirects);\n        is_1.assert.any([\n            is_1.default.boolean,\n            is_1.default.undefined\n        ], options.throwHttpErrors);\n        is_1.assert.any([\n            is_1.default.boolean,\n            is_1.default.undefined\n        ], options.http2);\n        is_1.assert.any([\n            is_1.default.boolean,\n            is_1.default.undefined\n        ], options.allowGetBody);\n        is_1.assert.any([\n            is_1.default.string,\n            is_1.default.undefined\n        ], options.localAddress);\n        is_1.assert.any([\n            dns_ip_version_1.isDnsLookupIpVersion,\n            is_1.default.undefined\n        ], options.dnsLookupIpVersion);\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.undefined\n        ], options.https);\n        is_1.assert.any([\n            is_1.default.boolean,\n            is_1.default.undefined\n        ], options.rejectUnauthorized);\n        if (options.https) {\n            is_1.assert.any([\n                is_1.default.boolean,\n                is_1.default.undefined\n            ], options.https.rejectUnauthorized);\n            is_1.assert.any([\n                is_1.default.function_,\n                is_1.default.undefined\n            ], options.https.checkServerIdentity);\n            is_1.assert.any([\n                is_1.default.string,\n                is_1.default.object,\n                is_1.default.array,\n                is_1.default.undefined\n            ], options.https.certificateAuthority);\n            is_1.assert.any([\n                is_1.default.string,\n                is_1.default.object,\n                is_1.default.array,\n                is_1.default.undefined\n            ], options.https.key);\n            is_1.assert.any([\n                is_1.default.string,\n                is_1.default.object,\n                is_1.default.array,\n                is_1.default.undefined\n            ], options.https.certificate);\n            is_1.assert.any([\n                is_1.default.string,\n                is_1.default.undefined\n            ], options.https.passphrase);\n            is_1.assert.any([\n                is_1.default.string,\n                is_1.default.buffer,\n                is_1.default.array,\n                is_1.default.undefined\n            ], options.https.pfx);\n        }\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.undefined\n        ], options.cacheOptions);\n        // `options.method`\n        if (is_1.default.string(options.method)) {\n            options.method = options.method.toUpperCase();\n        } else {\n            options.method = \"GET\";\n        }\n        // `options.headers`\n        if (options.headers === (defaults === null || defaults === void 0 ? void 0 : defaults.headers)) {\n            options.headers = {\n                ...options.headers\n            };\n        } else {\n            options.headers = lowercaseKeys({\n                ...defaults === null || defaults === void 0 ? void 0 : defaults.headers,\n                ...options.headers\n            });\n        }\n        // Disallow legacy `url.Url`\n        if (\"slashes\" in options) {\n            throw new TypeError(\"The legacy `url.Url` has been deprecated. Use `URL` instead.\");\n        }\n        // `options.auth`\n        if (\"auth\" in options) {\n            throw new TypeError(\"Parameter `auth` is deprecated. Use `username` / `password` instead.\");\n        }\n        // `options.searchParams`\n        if (\"searchParams\" in options) {\n            if (options.searchParams && options.searchParams !== (defaults === null || defaults === void 0 ? void 0 : defaults.searchParams)) {\n                let searchParameters;\n                if (is_1.default.string(options.searchParams) || options.searchParams instanceof url_1.URLSearchParams) {\n                    searchParameters = new url_1.URLSearchParams(options.searchParams);\n                } else {\n                    validateSearchParameters(options.searchParams);\n                    searchParameters = new url_1.URLSearchParams();\n                    // eslint-disable-next-line guard-for-in\n                    for(const key in options.searchParams){\n                        const value = options.searchParams[key];\n                        if (value === null) {\n                            searchParameters.append(key, \"\");\n                        } else if (value !== undefined) {\n                            searchParameters.append(key, value);\n                        }\n                    }\n                }\n                // `normalizeArguments()` is also used to merge options\n                (_a = defaults === null || defaults === void 0 ? void 0 : defaults.searchParams) === null || _a === void 0 ? void 0 : _a.forEach((value, key)=>{\n                    // Only use default if one isn't already defined\n                    if (!searchParameters.has(key)) {\n                        searchParameters.append(key, value);\n                    }\n                });\n                options.searchParams = searchParameters;\n            }\n        }\n        // `options.username` & `options.password`\n        options.username = (_b = options.username) !== null && _b !== void 0 ? _b : \"\";\n        options.password = (_c = options.password) !== null && _c !== void 0 ? _c : \"\";\n        // `options.prefixUrl` & `options.url`\n        if (is_1.default.undefined(options.prefixUrl)) {\n            options.prefixUrl = (_d = defaults === null || defaults === void 0 ? void 0 : defaults.prefixUrl) !== null && _d !== void 0 ? _d : \"\";\n        } else {\n            options.prefixUrl = options.prefixUrl.toString();\n            if (options.prefixUrl !== \"\" && !options.prefixUrl.endsWith(\"/\")) {\n                options.prefixUrl += \"/\";\n            }\n        }\n        if (is_1.default.string(options.url)) {\n            if (options.url.startsWith(\"/\")) {\n                throw new Error(\"`input` must not start with a slash when using `prefixUrl`\");\n            }\n            options.url = options_to_url_1.default(options.prefixUrl + options.url, options);\n        } else if (is_1.default.undefined(options.url) && options.prefixUrl !== \"\" || options.protocol) {\n            options.url = options_to_url_1.default(options.prefixUrl, options);\n        }\n        if (options.url) {\n            if (\"port\" in options) {\n                delete options.port;\n            }\n            // Make it possible to change `options.prefixUrl`\n            let { prefixUrl } = options;\n            Object.defineProperty(options, \"prefixUrl\", {\n                set: (value)=>{\n                    const url = options.url;\n                    if (!url.href.startsWith(value)) {\n                        throw new Error(`Cannot change \\`prefixUrl\\` from ${prefixUrl} to ${value}: ${url.href}`);\n                    }\n                    options.url = new url_1.URL(value + url.href.slice(prefixUrl.length));\n                    prefixUrl = value;\n                },\n                get: ()=>prefixUrl\n            });\n            // Support UNIX sockets\n            let { protocol } = options.url;\n            if (protocol === \"unix:\") {\n                protocol = \"http:\";\n                options.url = new url_1.URL(`http://unix${options.url.pathname}${options.url.search}`);\n            }\n            // Set search params\n            if (options.searchParams) {\n                // eslint-disable-next-line @typescript-eslint/no-base-to-string\n                options.url.search = options.searchParams.toString();\n            }\n            // Protocol check\n            if (protocol !== \"http:\" && protocol !== \"https:\") {\n                throw new UnsupportedProtocolError(options);\n            }\n            // Update `username`\n            if (options.username === \"\") {\n                options.username = options.url.username;\n            } else {\n                options.url.username = options.username;\n            }\n            // Update `password`\n            if (options.password === \"\") {\n                options.password = options.url.password;\n            } else {\n                options.url.password = options.password;\n            }\n        }\n        // `options.cookieJar`\n        const { cookieJar } = options;\n        if (cookieJar) {\n            let { setCookie, getCookieString } = cookieJar;\n            is_1.assert.function_(setCookie);\n            is_1.assert.function_(getCookieString);\n            /* istanbul ignore next: Horrible `tough-cookie` v3 check */ if (setCookie.length === 4 && getCookieString.length === 0) {\n                setCookie = util_1.promisify(setCookie.bind(options.cookieJar));\n                getCookieString = util_1.promisify(getCookieString.bind(options.cookieJar));\n                options.cookieJar = {\n                    setCookie,\n                    getCookieString: getCookieString\n                };\n            }\n        }\n        // `options.cache`\n        const { cache } = options;\n        if (cache) {\n            if (!cacheableStore.has(cache)) {\n                cacheableStore.set(cache, new CacheableRequest((requestOptions, handler)=>{\n                    const result = requestOptions[kRequest](requestOptions, handler);\n                    // TODO: remove this when `cacheable-request` supports async request functions.\n                    if (is_1.default.promise(result)) {\n                        // @ts-expect-error\n                        // We only need to implement the error handler in order to support HTTP2 caching.\n                        // The result will be a promise anyway.\n                        result.once = (event, handler)=>{\n                            if (event === \"error\") {\n                                result.catch(handler);\n                            } else if (event === \"abort\") {\n                                // The empty catch is needed here in case when\n                                // it rejects before it's `await`ed in `_makeRequest`.\n                                (async ()=>{\n                                    try {\n                                        const request = await result;\n                                        request.once(\"abort\", handler);\n                                    } catch (_a) {}\n                                })();\n                            } else {\n                                /* istanbul ignore next: safety check */ throw new Error(`Unknown HTTP2 promise event: ${event}`);\n                            }\n                            return result;\n                        };\n                    }\n                    return result;\n                }, cache));\n            }\n        }\n        // `options.cacheOptions`\n        options.cacheOptions = {\n            ...options.cacheOptions\n        };\n        // `options.dnsCache`\n        if (options.dnsCache === true) {\n            if (!globalDnsCache) {\n                globalDnsCache = new cacheable_lookup_1.default();\n            }\n            options.dnsCache = globalDnsCache;\n        } else if (!is_1.default.undefined(options.dnsCache) && !options.dnsCache.lookup) {\n            throw new TypeError(`Parameter \\`dnsCache\\` must be a CacheableLookup instance or a boolean, got ${is_1.default(options.dnsCache)}`);\n        }\n        // `options.timeout`\n        if (is_1.default.number(options.timeout)) {\n            options.timeout = {\n                request: options.timeout\n            };\n        } else if (defaults && options.timeout !== defaults.timeout) {\n            options.timeout = {\n                ...defaults.timeout,\n                ...options.timeout\n            };\n        } else {\n            options.timeout = {\n                ...options.timeout\n            };\n        }\n        // `options.context`\n        if (!options.context) {\n            options.context = {};\n        }\n        // `options.hooks`\n        const areHooksDefault = options.hooks === (defaults === null || defaults === void 0 ? void 0 : defaults.hooks);\n        options.hooks = {\n            ...options.hooks\n        };\n        for (const event of exports.knownHookEvents){\n            if (event in options.hooks) {\n                if (is_1.default.array(options.hooks[event])) {\n                    // See https://github.com/microsoft/TypeScript/issues/31445#issuecomment-576929044\n                    options.hooks[event] = [\n                        ...options.hooks[event]\n                    ];\n                } else {\n                    throw new TypeError(`Parameter \\`${event}\\` must be an Array, got ${is_1.default(options.hooks[event])}`);\n                }\n            } else {\n                options.hooks[event] = [];\n            }\n        }\n        if (defaults && !areHooksDefault) {\n            for (const event of exports.knownHookEvents){\n                const defaultHooks = defaults.hooks[event];\n                if (defaultHooks.length > 0) {\n                    // See https://github.com/microsoft/TypeScript/issues/31445#issuecomment-576929044\n                    options.hooks[event] = [\n                        ...defaults.hooks[event],\n                        ...options.hooks[event]\n                    ];\n                }\n            }\n        }\n        // DNS options\n        if (\"family\" in options) {\n            deprecation_warning_1.default('\"options.family\" was never documented, please use \"options.dnsLookupIpVersion\"');\n        }\n        // HTTPS options\n        if (defaults === null || defaults === void 0 ? void 0 : defaults.https) {\n            options.https = {\n                ...defaults.https,\n                ...options.https\n            };\n        }\n        if (\"rejectUnauthorized\" in options) {\n            deprecation_warning_1.default('\"options.rejectUnauthorized\" is now deprecated, please use \"options.https.rejectUnauthorized\"');\n        }\n        if (\"checkServerIdentity\" in options) {\n            deprecation_warning_1.default('\"options.checkServerIdentity\" was never documented, please use \"options.https.checkServerIdentity\"');\n        }\n        if (\"ca\" in options) {\n            deprecation_warning_1.default('\"options.ca\" was never documented, please use \"options.https.certificateAuthority\"');\n        }\n        if (\"key\" in options) {\n            deprecation_warning_1.default('\"options.key\" was never documented, please use \"options.https.key\"');\n        }\n        if (\"cert\" in options) {\n            deprecation_warning_1.default('\"options.cert\" was never documented, please use \"options.https.certificate\"');\n        }\n        if (\"passphrase\" in options) {\n            deprecation_warning_1.default('\"options.passphrase\" was never documented, please use \"options.https.passphrase\"');\n        }\n        if (\"pfx\" in options) {\n            deprecation_warning_1.default('\"options.pfx\" was never documented, please use \"options.https.pfx\"');\n        }\n        // Other options\n        if (\"followRedirects\" in options) {\n            throw new TypeError(\"The `followRedirects` option does not exist. Use `followRedirect` instead.\");\n        }\n        if (options.agent) {\n            for(const key in options.agent){\n                if (key !== \"http\" && key !== \"https\" && key !== \"http2\") {\n                    throw new TypeError(`Expected the \\`options.agent\\` properties to be \\`http\\`, \\`https\\` or \\`http2\\`, got \\`${key}\\``);\n                }\n            }\n        }\n        options.maxRedirects = (_e = options.maxRedirects) !== null && _e !== void 0 ? _e : 0;\n        // Set non-enumerable properties\n        exports.setNonEnumerableProperties([\n            defaults,\n            rawOptions\n        ], options);\n        return normalize_arguments_1.default(options, defaults);\n    }\n    _lockWrite() {\n        const onLockedWrite = ()=>{\n            throw new TypeError(\"The payload has been already provided\");\n        };\n        this.write = onLockedWrite;\n        this.end = onLockedWrite;\n    }\n    _unlockWrite() {\n        this.write = super.write;\n        this.end = super.end;\n    }\n    async _finalizeBody() {\n        const { options } = this;\n        const { headers } = options;\n        const isForm = !is_1.default.undefined(options.form);\n        const isJSON = !is_1.default.undefined(options.json);\n        const isBody = !is_1.default.undefined(options.body);\n        const hasPayload = isForm || isJSON || isBody;\n        const cannotHaveBody = exports.withoutBody.has(options.method) && !(options.method === \"GET\" && options.allowGetBody);\n        this._cannotHaveBody = cannotHaveBody;\n        if (hasPayload) {\n            if (cannotHaveBody) {\n                throw new TypeError(`The \\`${options.method}\\` method cannot be used with a body`);\n            }\n            if ([\n                isBody,\n                isForm,\n                isJSON\n            ].filter((isTrue)=>isTrue).length > 1) {\n                throw new TypeError(\"The `body`, `json` and `form` options are mutually exclusive\");\n            }\n            if (isBody && !(options.body instanceof stream_1.Readable) && !is_1.default.string(options.body) && !is_1.default.buffer(options.body) && !is_form_data_1.default(options.body)) {\n                throw new TypeError(\"The `body` option must be a stream.Readable, string or Buffer\");\n            }\n            if (isForm && !is_1.default.object(options.form)) {\n                throw new TypeError(\"The `form` option must be an Object\");\n            }\n            {\n                // Serialize body\n                const noContentType = !is_1.default.string(headers[\"content-type\"]);\n                if (isBody) {\n                    // Special case for https://github.com/form-data/form-data\n                    if (is_form_data_1.default(options.body) && noContentType) {\n                        headers[\"content-type\"] = `multipart/form-data; boundary=${options.body.getBoundary()}`;\n                    }\n                    this[kBody] = options.body;\n                } else if (isForm) {\n                    if (noContentType) {\n                        headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\n                    }\n                    this[kBody] = new url_1.URLSearchParams(options.form).toString();\n                } else {\n                    if (noContentType) {\n                        headers[\"content-type\"] = \"application/json\";\n                    }\n                    this[kBody] = options.stringifyJson(options.json);\n                }\n                const uploadBodySize = await get_body_size_1.default(this[kBody], options.headers);\n                // See https://tools.ietf.org/html/rfc7230#section-3.3.2\n                // A user agent SHOULD send a Content-Length in a request message when\n                // no Transfer-Encoding is sent and the request method defines a meaning\n                // for an enclosed payload body.  For example, a Content-Length header\n                // field is normally sent in a POST request even when the value is 0\n                // (indicating an empty payload body).  A user agent SHOULD NOT send a\n                // Content-Length header field when the request message does not contain\n                // a payload body and the method semantics do not anticipate such a\n                // body.\n                if (is_1.default.undefined(headers[\"content-length\"]) && is_1.default.undefined(headers[\"transfer-encoding\"])) {\n                    if (!cannotHaveBody && !is_1.default.undefined(uploadBodySize)) {\n                        headers[\"content-length\"] = String(uploadBodySize);\n                    }\n                }\n            }\n        } else if (cannotHaveBody) {\n            this._lockWrite();\n        } else {\n            this._unlockWrite();\n        }\n        this[kBodySize] = Number(headers[\"content-length\"]) || undefined;\n    }\n    async _onResponseBase(response) {\n        const { options } = this;\n        const { url } = options;\n        this[kOriginalResponse] = response;\n        if (options.decompress) {\n            response = decompressResponse(response);\n        }\n        const statusCode = response.statusCode;\n        const typedResponse = response;\n        typedResponse.statusMessage = typedResponse.statusMessage ? typedResponse.statusMessage : http.STATUS_CODES[statusCode];\n        typedResponse.url = options.url.toString();\n        typedResponse.requestUrl = this.requestUrl;\n        typedResponse.redirectUrls = this.redirects;\n        typedResponse.request = this;\n        typedResponse.isFromCache = response.fromCache || false;\n        typedResponse.ip = this.ip;\n        typedResponse.retryCount = this.retryCount;\n        this[kIsFromCache] = typedResponse.isFromCache;\n        this[kResponseSize] = Number(response.headers[\"content-length\"]) || undefined;\n        this[kResponse] = response;\n        response.once(\"end\", ()=>{\n            this[kResponseSize] = this[kDownloadedSize];\n            this.emit(\"downloadProgress\", this.downloadProgress);\n        });\n        response.once(\"error\", (error)=>{\n            // Force clean-up, because some packages don't do this.\n            // TODO: Fix decompress-response\n            response.destroy();\n            this._beforeError(new ReadError(error, this));\n        });\n        response.once(\"aborted\", ()=>{\n            this._beforeError(new ReadError({\n                name: \"Error\",\n                message: \"The server aborted pending request\",\n                code: \"ECONNRESET\"\n            }, this));\n        });\n        this.emit(\"downloadProgress\", this.downloadProgress);\n        const rawCookies = response.headers[\"set-cookie\"];\n        if (is_1.default.object(options.cookieJar) && rawCookies) {\n            let promises = rawCookies.map(async (rawCookie)=>options.cookieJar.setCookie(rawCookie, url.toString()));\n            if (options.ignoreInvalidCookies) {\n                promises = promises.map(async (p)=>p.catch(()=>{}));\n            }\n            try {\n                await Promise.all(promises);\n            } catch (error) {\n                this._beforeError(error);\n                return;\n            }\n        }\n        if (options.followRedirect && response.headers.location && redirectCodes.has(statusCode)) {\n            // We're being redirected, we don't care about the response.\n            // It'd be best to abort the request, but we can't because\n            // we would have to sacrifice the TCP connection. We don't want that.\n            response.resume();\n            if (this[kRequest]) {\n                this[kCancelTimeouts]();\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete this[kRequest];\n                this[kUnproxyEvents]();\n            }\n            const shouldBeGet = statusCode === 303 && options.method !== \"GET\" && options.method !== \"HEAD\";\n            if (shouldBeGet || !options.methodRewriting) {\n                // Server responded with \"see other\", indicating that the resource exists at another location,\n                // and the client should request it from that location via GET or HEAD.\n                options.method = \"GET\";\n                if (\"body\" in options) {\n                    delete options.body;\n                }\n                if (\"json\" in options) {\n                    delete options.json;\n                }\n                if (\"form\" in options) {\n                    delete options.form;\n                }\n                this[kBody] = undefined;\n                delete options.headers[\"content-length\"];\n            }\n            if (this.redirects.length >= options.maxRedirects) {\n                this._beforeError(new MaxRedirectsError(this));\n                return;\n            }\n            try {\n                // Do not remove. See https://github.com/sindresorhus/got/pull/214\n                const redirectBuffer = Buffer.from(response.headers.location, \"binary\").toString();\n                // Handles invalid URLs. See https://github.com/sindresorhus/got/issues/604\n                const redirectUrl = new url_1.URL(redirectBuffer, url);\n                const redirectString = redirectUrl.toString();\n                decodeURI(redirectString);\n                // Redirecting to a different site, clear sensitive data.\n                if (redirectUrl.hostname !== url.hostname || redirectUrl.port !== url.port) {\n                    if (\"host\" in options.headers) {\n                        delete options.headers.host;\n                    }\n                    if (\"cookie\" in options.headers) {\n                        delete options.headers.cookie;\n                    }\n                    if (\"authorization\" in options.headers) {\n                        delete options.headers.authorization;\n                    }\n                    if (options.username || options.password) {\n                        options.username = \"\";\n                        options.password = \"\";\n                    }\n                } else {\n                    redirectUrl.username = options.username;\n                    redirectUrl.password = options.password;\n                }\n                this.redirects.push(redirectString);\n                options.url = redirectUrl;\n                for (const hook of options.hooks.beforeRedirect){\n                    // eslint-disable-next-line no-await-in-loop\n                    await hook(options, typedResponse);\n                }\n                this.emit(\"redirect\", typedResponse, options);\n                await this._makeRequest();\n            } catch (error) {\n                this._beforeError(error);\n                return;\n            }\n            return;\n        }\n        if (options.isStream && options.throwHttpErrors && !is_response_ok_1.isResponseOk(typedResponse)) {\n            this._beforeError(new HTTPError(typedResponse));\n            return;\n        }\n        response.on(\"readable\", ()=>{\n            if (this[kTriggerRead]) {\n                this._read();\n            }\n        });\n        this.on(\"resume\", ()=>{\n            response.resume();\n        });\n        this.on(\"pause\", ()=>{\n            response.pause();\n        });\n        response.once(\"end\", ()=>{\n            this.push(null);\n        });\n        this.emit(\"response\", response);\n        for (const destination of this[kServerResponsesPiped]){\n            if (destination.headersSent) {\n                continue;\n            }\n            // eslint-disable-next-line guard-for-in\n            for(const key in response.headers){\n                const isAllowed = options.decompress ? key !== \"content-encoding\" : true;\n                const value = response.headers[key];\n                if (isAllowed) {\n                    destination.setHeader(key, value);\n                }\n            }\n            destination.statusCode = statusCode;\n        }\n    }\n    async _onResponse(response) {\n        try {\n            await this._onResponseBase(response);\n        } catch (error) {\n            /* istanbul ignore next: better safe than sorry */ this._beforeError(error);\n        }\n    }\n    _onRequest(request) {\n        const { options } = this;\n        const { timeout, url } = options;\n        http_timer_1.default(request);\n        this[kCancelTimeouts] = timed_out_1.default(request, timeout, url);\n        const responseEventName = options.cache ? \"cacheableResponse\" : \"response\";\n        request.once(responseEventName, (response)=>{\n            void this._onResponse(response);\n        });\n        request.once(\"error\", (error)=>{\n            var _a;\n            // Force clean-up, because some packages (e.g. nock) don't do this.\n            request.destroy();\n            // Node.js <= 12.18.2 mistakenly emits the response `end` first.\n            (_a = request.res) === null || _a === void 0 ? void 0 : _a.removeAllListeners(\"end\");\n            error = error instanceof timed_out_1.TimeoutError ? new TimeoutError(error, this.timings, this) : new RequestError(error.message, error, this);\n            this._beforeError(error);\n        });\n        this[kUnproxyEvents] = proxy_events_1.default(request, this, proxiedRequestEvents);\n        this[kRequest] = request;\n        this.emit(\"uploadProgress\", this.uploadProgress);\n        // Send body\n        const body = this[kBody];\n        const currentRequest = this.redirects.length === 0 ? this : request;\n        if (is_1.default.nodeStream(body)) {\n            body.pipe(currentRequest);\n            body.once(\"error\", (error)=>{\n                this._beforeError(new UploadError(error, this));\n            });\n        } else {\n            this._unlockWrite();\n            if (!is_1.default.undefined(body)) {\n                this._writeRequest(body, undefined, ()=>{});\n                currentRequest.end();\n                this._lockWrite();\n            } else if (this._cannotHaveBody || this._noPipe) {\n                currentRequest.end();\n                this._lockWrite();\n            }\n        }\n        this.emit(\"request\", request);\n    }\n    async _createCacheableRequest(url, options) {\n        return new Promise((resolve, reject)=>{\n            // TODO: Remove `utils/url-to-options.ts` when `cacheable-request` is fixed\n            Object.assign(options, url_to_options_1.default(url));\n            // `http-cache-semantics` checks this\n            // TODO: Fix this ignore.\n            // @ts-expect-error\n            delete options.url;\n            let request;\n            // This is ugly\n            const cacheRequest = cacheableStore.get(options.cache)(options, async (response)=>{\n                // TODO: Fix `cacheable-response`\n                response._readableState.autoDestroy = false;\n                if (request) {\n                    (await request).emit(\"cacheableResponse\", response);\n                }\n                resolve(response);\n            });\n            // Restore options\n            options.url = url;\n            cacheRequest.once(\"error\", reject);\n            cacheRequest.once(\"request\", async (requestOrPromise)=>{\n                request = requestOrPromise;\n                resolve(request);\n            });\n        });\n    }\n    async _makeRequest() {\n        var _a, _b, _c, _d, _e;\n        const { options } = this;\n        const { headers } = options;\n        for(const key in headers){\n            if (is_1.default.undefined(headers[key])) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete headers[key];\n            } else if (is_1.default.null_(headers[key])) {\n                throw new TypeError(`Use \\`undefined\\` instead of \\`null\\` to delete the \\`${key}\\` header`);\n            }\n        }\n        if (options.decompress && is_1.default.undefined(headers[\"accept-encoding\"])) {\n            headers[\"accept-encoding\"] = supportsBrotli ? \"gzip, deflate, br\" : \"gzip, deflate\";\n        }\n        // Set cookies\n        if (options.cookieJar) {\n            const cookieString = await options.cookieJar.getCookieString(options.url.toString());\n            if (is_1.default.nonEmptyString(cookieString)) {\n                options.headers.cookie = cookieString;\n            }\n        }\n        for (const hook of options.hooks.beforeRequest){\n            // eslint-disable-next-line no-await-in-loop\n            const result = await hook(options);\n            if (!is_1.default.undefined(result)) {\n                // @ts-expect-error Skip the type mismatch to support abstract responses\n                options.request = ()=>result;\n                break;\n            }\n        }\n        if (options.body && this[kBody] !== options.body) {\n            this[kBody] = options.body;\n        }\n        const { agent, request, timeout, url } = options;\n        if (options.dnsCache && !(\"lookup\" in options)) {\n            options.lookup = options.dnsCache.lookup;\n        }\n        // UNIX sockets\n        if (url.hostname === \"unix\") {\n            const matches = /(?<socketPath>.+?):(?<path>.+)/.exec(`${url.pathname}${url.search}`);\n            if (matches === null || matches === void 0 ? void 0 : matches.groups) {\n                const { socketPath, path } = matches.groups;\n                Object.assign(options, {\n                    socketPath,\n                    path,\n                    host: \"\"\n                });\n            }\n        }\n        const isHttps = url.protocol === \"https:\";\n        // Fallback function\n        let fallbackFn;\n        if (options.http2) {\n            fallbackFn = http2wrapper.auto;\n        } else {\n            fallbackFn = isHttps ? https.request : http.request;\n        }\n        const realFn = (_a = options.request) !== null && _a !== void 0 ? _a : fallbackFn;\n        // Cache support\n        const fn = options.cache ? this._createCacheableRequest : realFn;\n        // Pass an agent directly when HTTP2 is disabled\n        if (agent && !options.http2) {\n            options.agent = agent[isHttps ? \"https\" : \"http\"];\n        }\n        // Prepare plain HTTP request options\n        options[kRequest] = realFn;\n        delete options.request;\n        // TODO: Fix this ignore.\n        // @ts-expect-error\n        delete options.timeout;\n        const requestOptions = options;\n        requestOptions.shared = (_b = options.cacheOptions) === null || _b === void 0 ? void 0 : _b.shared;\n        requestOptions.cacheHeuristic = (_c = options.cacheOptions) === null || _c === void 0 ? void 0 : _c.cacheHeuristic;\n        requestOptions.immutableMinTimeToLive = (_d = options.cacheOptions) === null || _d === void 0 ? void 0 : _d.immutableMinTimeToLive;\n        requestOptions.ignoreCargoCult = (_e = options.cacheOptions) === null || _e === void 0 ? void 0 : _e.ignoreCargoCult;\n        // If `dnsLookupIpVersion` is not present do not override `family`\n        if (options.dnsLookupIpVersion !== undefined) {\n            try {\n                requestOptions.family = dns_ip_version_1.dnsLookupIpVersionToFamily(options.dnsLookupIpVersion);\n            } catch (_f) {\n                throw new Error(\"Invalid `dnsLookupIpVersion` option value\");\n            }\n        }\n        // HTTPS options remapping\n        if (options.https) {\n            if (\"rejectUnauthorized\" in options.https) {\n                requestOptions.rejectUnauthorized = options.https.rejectUnauthorized;\n            }\n            if (options.https.checkServerIdentity) {\n                requestOptions.checkServerIdentity = options.https.checkServerIdentity;\n            }\n            if (options.https.certificateAuthority) {\n                requestOptions.ca = options.https.certificateAuthority;\n            }\n            if (options.https.certificate) {\n                requestOptions.cert = options.https.certificate;\n            }\n            if (options.https.key) {\n                requestOptions.key = options.https.key;\n            }\n            if (options.https.passphrase) {\n                requestOptions.passphrase = options.https.passphrase;\n            }\n            if (options.https.pfx) {\n                requestOptions.pfx = options.https.pfx;\n            }\n        }\n        try {\n            let requestOrResponse = await fn(url, requestOptions);\n            if (is_1.default.undefined(requestOrResponse)) {\n                requestOrResponse = fallbackFn(url, requestOptions);\n            }\n            // Restore options\n            options.request = request;\n            options.timeout = timeout;\n            options.agent = agent;\n            // HTTPS options restore\n            if (options.https) {\n                if (\"rejectUnauthorized\" in options.https) {\n                    delete requestOptions.rejectUnauthorized;\n                }\n                if (options.https.checkServerIdentity) {\n                    // @ts-expect-error - This one will be removed when we remove the alias.\n                    delete requestOptions.checkServerIdentity;\n                }\n                if (options.https.certificateAuthority) {\n                    delete requestOptions.ca;\n                }\n                if (options.https.certificate) {\n                    delete requestOptions.cert;\n                }\n                if (options.https.key) {\n                    delete requestOptions.key;\n                }\n                if (options.https.passphrase) {\n                    delete requestOptions.passphrase;\n                }\n                if (options.https.pfx) {\n                    delete requestOptions.pfx;\n                }\n            }\n            if (isClientRequest(requestOrResponse)) {\n                this._onRequest(requestOrResponse);\n            // Emit the response after the stream has been ended\n            } else if (this.writable) {\n                this.once(\"finish\", ()=>{\n                    void this._onResponse(requestOrResponse);\n                });\n                this._unlockWrite();\n                this.end();\n                this._lockWrite();\n            } else {\n                void this._onResponse(requestOrResponse);\n            }\n        } catch (error) {\n            if (error instanceof CacheableRequest.CacheError) {\n                throw new CacheError(error, this);\n            }\n            throw new RequestError(error.message, error, this);\n        }\n    }\n    async _error(error) {\n        try {\n            for (const hook of this.options.hooks.beforeError){\n                // eslint-disable-next-line no-await-in-loop\n                error = await hook(error);\n            }\n        } catch (error_) {\n            error = new RequestError(error_.message, error_, this);\n        }\n        this.destroy(error);\n    }\n    _beforeError(error) {\n        if (this[kStopReading]) {\n            return;\n        }\n        const { options } = this;\n        const retryCount = this.retryCount + 1;\n        this[kStopReading] = true;\n        if (!(error instanceof RequestError)) {\n            error = new RequestError(error.message, error, this);\n        }\n        const typedError = error;\n        const { response } = typedError;\n        void (async ()=>{\n            if (response && !response.body) {\n                response.setEncoding(this._readableState.encoding);\n                try {\n                    response.rawBody = await get_buffer_1.default(response);\n                    response.body = response.rawBody.toString();\n                } catch (_a) {}\n            }\n            if (this.listenerCount(\"retry\") !== 0) {\n                let backoff;\n                try {\n                    let retryAfter;\n                    if (response && \"retry-after\" in response.headers) {\n                        retryAfter = Number(response.headers[\"retry-after\"]);\n                        if (Number.isNaN(retryAfter)) {\n                            retryAfter = Date.parse(response.headers[\"retry-after\"]) - Date.now();\n                            if (retryAfter <= 0) {\n                                retryAfter = 1;\n                            }\n                        } else {\n                            retryAfter *= 1000;\n                        }\n                    }\n                    backoff = await options.retry.calculateDelay({\n                        attemptCount: retryCount,\n                        retryOptions: options.retry,\n                        error: typedError,\n                        retryAfter,\n                        computedValue: calculate_retry_delay_1.default({\n                            attemptCount: retryCount,\n                            retryOptions: options.retry,\n                            error: typedError,\n                            retryAfter,\n                            computedValue: 0\n                        })\n                    });\n                } catch (error_) {\n                    void this._error(new RequestError(error_.message, error_, this));\n                    return;\n                }\n                if (backoff) {\n                    const retry = async ()=>{\n                        try {\n                            for (const hook of this.options.hooks.beforeRetry){\n                                // eslint-disable-next-line no-await-in-loop\n                                await hook(this.options, typedError, retryCount);\n                            }\n                        } catch (error_) {\n                            void this._error(new RequestError(error_.message, error, this));\n                            return;\n                        }\n                        // Something forced us to abort the retry\n                        if (this.destroyed) {\n                            return;\n                        }\n                        this.destroy();\n                        this.emit(\"retry\", retryCount, error);\n                    };\n                    this[kRetryTimeout] = setTimeout(retry, backoff);\n                    return;\n                }\n            }\n            void this._error(typedError);\n        })();\n    }\n    _read() {\n        this[kTriggerRead] = true;\n        const response = this[kResponse];\n        if (response && !this[kStopReading]) {\n            // We cannot put this in the `if` above\n            // because `.read()` also triggers the `end` event\n            if (response.readableLength) {\n                this[kTriggerRead] = false;\n            }\n            let data;\n            while((data = response.read()) !== null){\n                this[kDownloadedSize] += data.length;\n                this[kStartedReading] = true;\n                const progress = this.downloadProgress;\n                if (progress.percent < 1) {\n                    this.emit(\"downloadProgress\", progress);\n                }\n                this.push(data);\n            }\n        }\n    }\n    // Node.js 12 has incorrect types, so the encoding must be a string\n    _write(chunk, encoding, callback) {\n        const write = ()=>{\n            this._writeRequest(chunk, encoding, callback);\n        };\n        if (this.requestInitialized) {\n            write();\n        } else {\n            this[kJobs].push(write);\n        }\n    }\n    _writeRequest(chunk, encoding, callback) {\n        if (this[kRequest].destroyed) {\n            // Probably the `ClientRequest` instance will throw\n            return;\n        }\n        this._progressCallbacks.push(()=>{\n            this[kUploadedSize] += Buffer.byteLength(chunk, encoding);\n            const progress = this.uploadProgress;\n            if (progress.percent < 1) {\n                this.emit(\"uploadProgress\", progress);\n            }\n        });\n        // TODO: What happens if it's from cache? Then this[kRequest] won't be defined.\n        this[kRequest].write(chunk, encoding, (error)=>{\n            if (!error && this._progressCallbacks.length > 0) {\n                this._progressCallbacks.shift()();\n            }\n            callback(error);\n        });\n    }\n    _final(callback) {\n        const endRequest = ()=>{\n            // FIX: Node.js 10 calls the write callback AFTER the end callback!\n            while(this._progressCallbacks.length !== 0){\n                this._progressCallbacks.shift()();\n            }\n            // We need to check if `this[kRequest]` is present,\n            // because it isn't when we use cache.\n            if (!(kRequest in this)) {\n                callback();\n                return;\n            }\n            if (this[kRequest].destroyed) {\n                callback();\n                return;\n            }\n            this[kRequest].end((error)=>{\n                if (!error) {\n                    this[kBodySize] = this[kUploadedSize];\n                    this.emit(\"uploadProgress\", this.uploadProgress);\n                    this[kRequest].emit(\"upload-complete\");\n                }\n                callback(error);\n            });\n        };\n        if (this.requestInitialized) {\n            endRequest();\n        } else {\n            this[kJobs].push(endRequest);\n        }\n    }\n    _destroy(error, callback) {\n        var _a;\n        this[kStopReading] = true;\n        // Prevent further retries\n        clearTimeout(this[kRetryTimeout]);\n        if (kRequest in this) {\n            this[kCancelTimeouts]();\n            // TODO: Remove the next `if` when these get fixed:\n            // - https://github.com/nodejs/node/issues/32851\n            if (!((_a = this[kResponse]) === null || _a === void 0 ? void 0 : _a.complete)) {\n                this[kRequest].destroy();\n            }\n        }\n        if (error !== null && !is_1.default.undefined(error) && !(error instanceof RequestError)) {\n            error = new RequestError(error.message, error, this);\n        }\n        callback(error);\n    }\n    get _isAboutToError() {\n        return this[kStopReading];\n    }\n    /**\n    The remote IP address.\n    */ get ip() {\n        var _a;\n        return (_a = this.socket) === null || _a === void 0 ? void 0 : _a.remoteAddress;\n    }\n    /**\n    Indicates whether the request has been aborted or not.\n    */ get aborted() {\n        var _a, _b, _c;\n        return ((_b = (_a = this[kRequest]) === null || _a === void 0 ? void 0 : _a.destroyed) !== null && _b !== void 0 ? _b : this.destroyed) && !((_c = this[kOriginalResponse]) === null || _c === void 0 ? void 0 : _c.complete);\n    }\n    get socket() {\n        var _a, _b;\n        return (_b = (_a = this[kRequest]) === null || _a === void 0 ? void 0 : _a.socket) !== null && _b !== void 0 ? _b : undefined;\n    }\n    /**\n    Progress event for downloading (receiving a response).\n    */ get downloadProgress() {\n        let percent;\n        if (this[kResponseSize]) {\n            percent = this[kDownloadedSize] / this[kResponseSize];\n        } else if (this[kResponseSize] === this[kDownloadedSize]) {\n            percent = 1;\n        } else {\n            percent = 0;\n        }\n        return {\n            percent,\n            transferred: this[kDownloadedSize],\n            total: this[kResponseSize]\n        };\n    }\n    /**\n    Progress event for uploading (sending a request).\n    */ get uploadProgress() {\n        let percent;\n        if (this[kBodySize]) {\n            percent = this[kUploadedSize] / this[kBodySize];\n        } else if (this[kBodySize] === this[kUploadedSize]) {\n            percent = 1;\n        } else {\n            percent = 0;\n        }\n        return {\n            percent,\n            transferred: this[kUploadedSize],\n            total: this[kBodySize]\n        };\n    }\n    /**\n    The object contains the following properties:\n\n    - `start` - Time when the request started.\n    - `socket` - Time when a socket was assigned to the request.\n    - `lookup` - Time when the DNS lookup finished.\n    - `connect` - Time when the socket successfully connected.\n    - `secureConnect` - Time when the socket securely connected.\n    - `upload` - Time when the request finished uploading.\n    - `response` - Time when the request fired `response` event.\n    - `end` - Time when the response fired `end` event.\n    - `error` - Time when the request fired `error` event.\n    - `abort` - Time when the request fired `abort` event.\n    - `phases`\n        - `wait` - `timings.socket - timings.start`\n        - `dns` - `timings.lookup - timings.socket`\n        - `tcp` - `timings.connect - timings.lookup`\n        - `tls` - `timings.secureConnect - timings.connect`\n        - `request` - `timings.upload - (timings.secureConnect || timings.connect)`\n        - `firstByte` - `timings.response - timings.upload`\n        - `download` - `timings.end - timings.response`\n        - `total` - `(timings.end || timings.error || timings.abort) - timings.start`\n\n    If something has not been measured yet, it will be `undefined`.\n\n    __Note__: The time is a `number` representing the milliseconds elapsed since the UNIX epoch.\n    */ get timings() {\n        var _a;\n        return (_a = this[kRequest]) === null || _a === void 0 ? void 0 : _a.timings;\n    }\n    /**\n    Whether the response was retrieved from the cache.\n    */ get isFromCache() {\n        return this[kIsFromCache];\n    }\n    pipe(destination, options) {\n        if (this[kStartedReading]) {\n            throw new Error(\"Failed to pipe. The response has been emitted already.\");\n        }\n        if (destination instanceof http_1.ServerResponse) {\n            this[kServerResponsesPiped].add(destination);\n        }\n        return super.pipe(destination, options);\n    }\n    unpipe(destination) {\n        if (destination instanceof http_1.ServerResponse) {\n            this[kServerResponsesPiped].delete(destination);\n        }\n        super.unpipe(destination);\n        return this;\n    }\n}\nexports[\"default\"] = Request;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/dns-ip-version.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/core/utils/dns-ip-version.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.dnsLookupIpVersionToFamily = exports.isDnsLookupIpVersion = void 0;\nconst conversionTable = {\n    auto: 0,\n    ipv4: 4,\n    ipv6: 6\n};\nexports.isDnsLookupIpVersion = (value)=>{\n    return value in conversionTable;\n};\nexports.dnsLookupIpVersionToFamily = (dnsLookupIpVersion)=>{\n    if (exports.isDnsLookupIpVersion(dnsLookupIpVersion)) {\n        return conversionTable[dnsLookupIpVersion];\n    }\n    throw new Error(\"Invalid DNS lookup IP version\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvZG5zLWlwLXZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGtDQUFrQyxHQUFHQSw0QkFBNEIsR0FBRyxLQUFLO0FBQ3pFLE1BQU1JLGtCQUFrQjtJQUNwQkMsTUFBTTtJQUNOQyxNQUFNO0lBQ05DLE1BQU07QUFDVjtBQUNBUCw0QkFBNEIsR0FBRyxDQUFDQztJQUM1QixPQUFPQSxTQUFTRztBQUNwQjtBQUNBSixrQ0FBa0MsR0FBRyxDQUFDUTtJQUNsQyxJQUFJUixRQUFRRyxvQkFBb0IsQ0FBQ0sscUJBQXFCO1FBQ2xELE9BQU9KLGVBQWUsQ0FBQ0ksbUJBQW1CO0lBQzlDO0lBQ0EsTUFBTSxJQUFJQyxNQUFNO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZnVsbC8uL25vZGVfbW9kdWxlcy9ub3Rpb24tY2xpZW50L25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS91dGlscy9kbnMtaXAtdmVyc2lvbi5qcz82ZjRmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kbnNMb29rdXBJcFZlcnNpb25Ub0ZhbWlseSA9IGV4cG9ydHMuaXNEbnNMb29rdXBJcFZlcnNpb24gPSB2b2lkIDA7XG5jb25zdCBjb252ZXJzaW9uVGFibGUgPSB7XG4gICAgYXV0bzogMCxcbiAgICBpcHY0OiA0LFxuICAgIGlwdjY6IDZcbn07XG5leHBvcnRzLmlzRG5zTG9va3VwSXBWZXJzaW9uID0gKHZhbHVlKSA9PiB7XG4gICAgcmV0dXJuIHZhbHVlIGluIGNvbnZlcnNpb25UYWJsZTtcbn07XG5leHBvcnRzLmRuc0xvb2t1cElwVmVyc2lvblRvRmFtaWx5ID0gKGRuc0xvb2t1cElwVmVyc2lvbikgPT4ge1xuICAgIGlmIChleHBvcnRzLmlzRG5zTG9va3VwSXBWZXJzaW9uKGRuc0xvb2t1cElwVmVyc2lvbikpIHtcbiAgICAgICAgcmV0dXJuIGNvbnZlcnNpb25UYWJsZVtkbnNMb29rdXBJcFZlcnNpb25dO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgRE5TIGxvb2t1cCBJUCB2ZXJzaW9uJyk7XG59O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZG5zTG9va3VwSXBWZXJzaW9uVG9GYW1pbHkiLCJpc0Ruc0xvb2t1cElwVmVyc2lvbiIsImNvbnZlcnNpb25UYWJsZSIsImF1dG8iLCJpcHY0IiwiaXB2NiIsImRuc0xvb2t1cElwVmVyc2lvbiIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/dns-ip-version.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/get-body-size.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/core/utils/get-body-size.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\nconst is_form_data_1 = __webpack_require__(/*! ./is-form-data */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/is-form-data.js\");\nconst statAsync = util_1.promisify(fs_1.stat);\nexports[\"default\"] = async (body, headers)=>{\n    if (headers && \"content-length\" in headers) {\n        return Number(headers[\"content-length\"]);\n    }\n    if (!body) {\n        return 0;\n    }\n    if (is_1.default.string(body)) {\n        return Buffer.byteLength(body);\n    }\n    if (is_1.default.buffer(body)) {\n        return body.length;\n    }\n    if (is_form_data_1.default(body)) {\n        return util_1.promisify(body.getLength.bind(body))();\n    }\n    if (body instanceof fs_1.ReadStream) {\n        const { size } = await statAsync(body.path);\n        if (size === 0) {\n            return undefined;\n        }\n        return size;\n    }\n    return undefined;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvZ2V0LWJvZHktc2l6ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxPQUFPQyxtQkFBT0EsQ0FBQyxjQUFJO0FBQ3pCLE1BQU1DLFNBQVNELG1CQUFPQSxDQUFDLGtCQUFNO0FBQzdCLE1BQU1FLE9BQU9GLG1CQUFPQSxDQUFDLDZFQUFrQjtBQUN2QyxNQUFNRyxpQkFBaUJILG1CQUFPQSxDQUFDLGtIQUFnQjtBQUMvQyxNQUFNSSxZQUFZSCxPQUFPSSxTQUFTLENBQUNOLEtBQUtPLElBQUk7QUFDNUNULGtCQUFlLEdBQUcsT0FBT1csTUFBTUM7SUFDM0IsSUFBSUEsV0FBVyxvQkFBb0JBLFNBQVM7UUFDeEMsT0FBT0MsT0FBT0QsT0FBTyxDQUFDLGlCQUFpQjtJQUMzQztJQUNBLElBQUksQ0FBQ0QsTUFBTTtRQUNQLE9BQU87SUFDWDtJQUNBLElBQUlOLEtBQUtLLE9BQU8sQ0FBQ0ksTUFBTSxDQUFDSCxPQUFPO1FBQzNCLE9BQU9JLE9BQU9DLFVBQVUsQ0FBQ0w7SUFDN0I7SUFDQSxJQUFJTixLQUFLSyxPQUFPLENBQUNPLE1BQU0sQ0FBQ04sT0FBTztRQUMzQixPQUFPQSxLQUFLTyxNQUFNO0lBQ3RCO0lBQ0EsSUFBSVosZUFBZUksT0FBTyxDQUFDQyxPQUFPO1FBQzlCLE9BQU9QLE9BQU9JLFNBQVMsQ0FBQ0csS0FBS1EsU0FBUyxDQUFDQyxJQUFJLENBQUNUO0lBQ2hEO0lBQ0EsSUFBSUEsZ0JBQWdCVCxLQUFLbUIsVUFBVSxFQUFFO1FBQ2pDLE1BQU0sRUFBRUMsSUFBSSxFQUFFLEdBQUcsTUFBTWYsVUFBVUksS0FBS1ksSUFBSTtRQUMxQyxJQUFJRCxTQUFTLEdBQUc7WUFDWixPQUFPRTtRQUNYO1FBQ0EsT0FBT0Y7SUFDWDtJQUNBLE9BQU9FO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1mdWxsLy4vbm9kZV9tb2R1bGVzL25vdGlvbi1jbGllbnQvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL2dldC1ib2R5LXNpemUuanM/MGUxOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGZzXzEgPSByZXF1aXJlKFwiZnNcIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwidXRpbFwiKTtcbmNvbnN0IGlzXzEgPSByZXF1aXJlKFwiQHNpbmRyZXNvcmh1cy9pc1wiKTtcbmNvbnN0IGlzX2Zvcm1fZGF0YV8xID0gcmVxdWlyZShcIi4vaXMtZm9ybS1kYXRhXCIpO1xuY29uc3Qgc3RhdEFzeW5jID0gdXRpbF8xLnByb21pc2lmeShmc18xLnN0YXQpO1xuZXhwb3J0cy5kZWZhdWx0ID0gYXN5bmMgKGJvZHksIGhlYWRlcnMpID0+IHtcbiAgICBpZiAoaGVhZGVycyAmJiAnY29udGVudC1sZW5ndGgnIGluIGhlYWRlcnMpIHtcbiAgICAgICAgcmV0dXJuIE51bWJlcihoZWFkZXJzWydjb250ZW50LWxlbmd0aCddKTtcbiAgICB9XG4gICAgaWYgKCFib2R5KSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBpZiAoaXNfMS5kZWZhdWx0LnN0cmluZyhib2R5KSkge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmJ5dGVMZW5ndGgoYm9keSk7XG4gICAgfVxuICAgIGlmIChpc18xLmRlZmF1bHQuYnVmZmVyKGJvZHkpKSB7XG4gICAgICAgIHJldHVybiBib2R5Lmxlbmd0aDtcbiAgICB9XG4gICAgaWYgKGlzX2Zvcm1fZGF0YV8xLmRlZmF1bHQoYm9keSkpIHtcbiAgICAgICAgcmV0dXJuIHV0aWxfMS5wcm9taXNpZnkoYm9keS5nZXRMZW5ndGguYmluZChib2R5KSkoKTtcbiAgICB9XG4gICAgaWYgKGJvZHkgaW5zdGFuY2VvZiBmc18xLlJlYWRTdHJlYW0pIHtcbiAgICAgICAgY29uc3QgeyBzaXplIH0gPSBhd2FpdCBzdGF0QXN5bmMoYm9keS5wYXRoKTtcbiAgICAgICAgaWYgKHNpemUgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZnNfMSIsInJlcXVpcmUiLCJ1dGlsXzEiLCJpc18xIiwiaXNfZm9ybV9kYXRhXzEiLCJzdGF0QXN5bmMiLCJwcm9taXNpZnkiLCJzdGF0IiwiZGVmYXVsdCIsImJvZHkiLCJoZWFkZXJzIiwiTnVtYmVyIiwic3RyaW5nIiwiQnVmZmVyIiwiYnl0ZUxlbmd0aCIsImJ1ZmZlciIsImxlbmd0aCIsImdldExlbmd0aCIsImJpbmQiLCJSZWFkU3RyZWFtIiwic2l6ZSIsInBhdGgiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/get-body-size.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/get-buffer.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/core/utils/get-buffer.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n// TODO: Update https://github.com/sindresorhus/get-stream\nconst getBuffer = async (stream)=>{\n    const chunks = [];\n    let length = 0;\n    for await (const chunk of stream){\n        chunks.push(chunk);\n        length += Buffer.byteLength(chunk);\n    }\n    if (Buffer.isBuffer(chunks[0])) {\n        return Buffer.concat(chunks, length);\n    }\n    return Buffer.from(chunks.join(\"\"));\n};\nexports[\"default\"] = getBuffer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvZ2V0LWJ1ZmZlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCwwREFBMEQ7QUFDMUQsTUFBTUMsWUFBWSxPQUFPQztJQUNyQixNQUFNQyxTQUFTLEVBQUU7SUFDakIsSUFBSUMsU0FBUztJQUNiLFdBQVcsTUFBTUMsU0FBU0gsT0FBUTtRQUM5QkMsT0FBT0csSUFBSSxDQUFDRDtRQUNaRCxVQUFVRyxPQUFPQyxVQUFVLENBQUNIO0lBQ2hDO0lBQ0EsSUFBSUUsT0FBT0UsUUFBUSxDQUFDTixNQUFNLENBQUMsRUFBRSxHQUFHO1FBQzVCLE9BQU9JLE9BQU9HLE1BQU0sQ0FBQ1AsUUFBUUM7SUFDakM7SUFDQSxPQUFPRyxPQUFPSSxJQUFJLENBQUNSLE9BQU9TLElBQUksQ0FBQztBQUNuQztBQUNBYixrQkFBZSxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL25vdGlvbi14LWZ1bGwvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvZ2V0LWJ1ZmZlci5qcz80YWExIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8gVE9ETzogVXBkYXRlIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvZ2V0LXN0cmVhbVxuY29uc3QgZ2V0QnVmZmVyID0gYXN5bmMgKHN0cmVhbSkgPT4ge1xuICAgIGNvbnN0IGNodW5rcyA9IFtdO1xuICAgIGxldCBsZW5ndGggPSAwO1xuICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2Ygc3RyZWFtKSB7XG4gICAgICAgIGNodW5rcy5wdXNoKGNodW5rKTtcbiAgICAgICAgbGVuZ3RoICs9IEJ1ZmZlci5ieXRlTGVuZ3RoKGNodW5rKTtcbiAgICB9XG4gICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihjaHVua3NbMF0pKSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuY29uY2F0KGNodW5rcywgbGVuZ3RoKTtcbiAgICB9XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rcy5qb2luKCcnKSk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0QnVmZmVyO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0QnVmZmVyIiwic3RyZWFtIiwiY2h1bmtzIiwibGVuZ3RoIiwiY2h1bmsiLCJwdXNoIiwiQnVmZmVyIiwiYnl0ZUxlbmd0aCIsImlzQnVmZmVyIiwiY29uY2F0IiwiZnJvbSIsImpvaW4iLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/get-buffer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/is-form-data.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/core/utils/is-form-data.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\nexports[\"default\"] = (body)=>is_1.default.nodeStream(body) && is_1.default.function_(body.getBoundary);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvaXMtZm9ybS1kYXRhLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLE9BQU9DLG1CQUFPQSxDQUFDLDZFQUFrQjtBQUN2Q0gsa0JBQWUsR0FBRyxDQUFDSyxPQUFTSCxLQUFLRSxPQUFPLENBQUNFLFVBQVUsQ0FBQ0QsU0FBU0gsS0FBS0UsT0FBTyxDQUFDRyxTQUFTLENBQUNGLEtBQUtHLFdBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1mdWxsLy4vbm9kZV9tb2R1bGVzL25vdGlvbi1jbGllbnQvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL2lzLWZvcm0tZGF0YS5qcz9jYzhlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaXNfMSA9IHJlcXVpcmUoXCJAc2luZHJlc29yaHVzL2lzXCIpO1xuZXhwb3J0cy5kZWZhdWx0ID0gKGJvZHkpID0+IGlzXzEuZGVmYXVsdC5ub2RlU3RyZWFtKGJvZHkpICYmIGlzXzEuZGVmYXVsdC5mdW5jdGlvbl8oYm9keS5nZXRCb3VuZGFyeSk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpc18xIiwicmVxdWlyZSIsImRlZmF1bHQiLCJib2R5Iiwibm9kZVN0cmVhbSIsImZ1bmN0aW9uXyIsImdldEJvdW5kYXJ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/is-form-data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/is-response-ok.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/core/utils/is-response-ok.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isResponseOk = void 0;\nexports.isResponseOk = (response)=>{\n    const { statusCode } = response;\n    const limitStatusCode = response.request.options.followRedirect ? 299 : 399;\n    return statusCode >= 200 && statusCode <= limitStatusCode || statusCode === 304;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvaXMtcmVzcG9uc2Utb2suanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9CQUFvQixHQUFHLEtBQUs7QUFDNUJBLG9CQUFvQixHQUFHLENBQUNHO0lBQ3BCLE1BQU0sRUFBRUMsVUFBVSxFQUFFLEdBQUdEO0lBQ3ZCLE1BQU1FLGtCQUFrQkYsU0FBU0csT0FBTyxDQUFDQyxPQUFPLENBQUNDLGNBQWMsR0FBRyxNQUFNO0lBQ3hFLE9BQU8sY0FBZSxPQUFPSixjQUFjQyxtQkFBb0JELGVBQWU7QUFDbEYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1mdWxsLy4vbm9kZV9tb2R1bGVzL25vdGlvbi1jbGllbnQvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL2lzLXJlc3BvbnNlLW9rLmpzPzNkNjgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzUmVzcG9uc2VPayA9IHZvaWQgMDtcbmV4cG9ydHMuaXNSZXNwb25zZU9rID0gKHJlc3BvbnNlKSA9PiB7XG4gICAgY29uc3QgeyBzdGF0dXNDb2RlIH0gPSByZXNwb25zZTtcbiAgICBjb25zdCBsaW1pdFN0YXR1c0NvZGUgPSByZXNwb25zZS5yZXF1ZXN0Lm9wdGlvbnMuZm9sbG93UmVkaXJlY3QgPyAyOTkgOiAzOTk7XG4gICAgcmV0dXJuIChzdGF0dXNDb2RlID49IDIwMCAmJiBzdGF0dXNDb2RlIDw9IGxpbWl0U3RhdHVzQ29kZSkgfHwgc3RhdHVzQ29kZSA9PT0gMzA0O1xufTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzUmVzcG9uc2VPayIsInJlc3BvbnNlIiwic3RhdHVzQ29kZSIsImxpbWl0U3RhdHVzQ29kZSIsInJlcXVlc3QiLCJvcHRpb25zIiwiZm9sbG93UmVkaXJlY3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/is-response-ok.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/options-to-url.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/core/utils/options-to-url.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n/* istanbul ignore file: deprecated */ const url_1 = __webpack_require__(/*! url */ \"url\");\nconst keys = [\n    \"protocol\",\n    \"host\",\n    \"hostname\",\n    \"port\",\n    \"pathname\",\n    \"search\"\n];\nexports[\"default\"] = (origin, options)=>{\n    var _a, _b;\n    if (options.path) {\n        if (options.pathname) {\n            throw new TypeError(\"Parameters `path` and `pathname` are mutually exclusive.\");\n        }\n        if (options.search) {\n            throw new TypeError(\"Parameters `path` and `search` are mutually exclusive.\");\n        }\n        if (options.searchParams) {\n            throw new TypeError(\"Parameters `path` and `searchParams` are mutually exclusive.\");\n        }\n    }\n    if (options.search && options.searchParams) {\n        throw new TypeError(\"Parameters `search` and `searchParams` are mutually exclusive.\");\n    }\n    if (!origin) {\n        if (!options.protocol) {\n            throw new TypeError(\"No URL protocol specified\");\n        }\n        origin = `${options.protocol}//${(_b = (_a = options.hostname) !== null && _a !== void 0 ? _a : options.host) !== null && _b !== void 0 ? _b : \"\"}`;\n    }\n    const url = new url_1.URL(origin);\n    if (options.path) {\n        const searchIndex = options.path.indexOf(\"?\");\n        if (searchIndex === -1) {\n            options.pathname = options.path;\n        } else {\n            options.pathname = options.path.slice(0, searchIndex);\n            options.search = options.path.slice(searchIndex + 1);\n        }\n        delete options.path;\n    }\n    for (const key of keys){\n        if (options[key]) {\n            url[key] = options[key].toString();\n        }\n    }\n    return url;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvb3B0aW9ucy10by11cmwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0Qsb0NBQW9DLEdBQ3BDLE1BQU1DLFFBQVFDLG1CQUFPQSxDQUFDLGdCQUFLO0FBQzNCLE1BQU1DLE9BQU87SUFDVDtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDSDtBQUNESixrQkFBZSxHQUFHLENBQUNNLFFBQVFDO0lBQ3ZCLElBQUlDLElBQUlDO0lBQ1IsSUFBSUYsUUFBUUcsSUFBSSxFQUFFO1FBQ2QsSUFBSUgsUUFBUUksUUFBUSxFQUFFO1lBQ2xCLE1BQU0sSUFBSUMsVUFBVTtRQUN4QjtRQUNBLElBQUlMLFFBQVFNLE1BQU0sRUFBRTtZQUNoQixNQUFNLElBQUlELFVBQVU7UUFDeEI7UUFDQSxJQUFJTCxRQUFRTyxZQUFZLEVBQUU7WUFDdEIsTUFBTSxJQUFJRixVQUFVO1FBQ3hCO0lBQ0o7SUFDQSxJQUFJTCxRQUFRTSxNQUFNLElBQUlOLFFBQVFPLFlBQVksRUFBRTtRQUN4QyxNQUFNLElBQUlGLFVBQVU7SUFDeEI7SUFDQSxJQUFJLENBQUNOLFFBQVE7UUFDVCxJQUFJLENBQUNDLFFBQVFRLFFBQVEsRUFBRTtZQUNuQixNQUFNLElBQUlILFVBQVU7UUFDeEI7UUFDQU4sU0FBUyxDQUFDLEVBQUVDLFFBQVFRLFFBQVEsQ0FBQyxFQUFFLEVBQUUsQ0FBQ04sS0FBSyxDQUFDRCxLQUFLRCxRQUFRUyxRQUFRLE1BQU0sUUFBUVIsT0FBTyxLQUFLLElBQUlBLEtBQUtELFFBQVFVLElBQUksTUFBTSxRQUFRUixPQUFPLEtBQUssSUFBSUEsS0FBSyxHQUFHLENBQUM7SUFDdko7SUFDQSxNQUFNUyxNQUFNLElBQUloQixNQUFNaUIsR0FBRyxDQUFDYjtJQUMxQixJQUFJQyxRQUFRRyxJQUFJLEVBQUU7UUFDZCxNQUFNVSxjQUFjYixRQUFRRyxJQUFJLENBQUNXLE9BQU8sQ0FBQztRQUN6QyxJQUFJRCxnQkFBZ0IsQ0FBQyxHQUFHO1lBQ3BCYixRQUFRSSxRQUFRLEdBQUdKLFFBQVFHLElBQUk7UUFDbkMsT0FDSztZQUNESCxRQUFRSSxRQUFRLEdBQUdKLFFBQVFHLElBQUksQ0FBQ1ksS0FBSyxDQUFDLEdBQUdGO1lBQ3pDYixRQUFRTSxNQUFNLEdBQUdOLFFBQVFHLElBQUksQ0FBQ1ksS0FBSyxDQUFDRixjQUFjO1FBQ3REO1FBQ0EsT0FBT2IsUUFBUUcsSUFBSTtJQUN2QjtJQUNBLEtBQUssTUFBTWEsT0FBT25CLEtBQU07UUFDcEIsSUFBSUcsT0FBTyxDQUFDZ0IsSUFBSSxFQUFFO1lBQ2RMLEdBQUcsQ0FBQ0ssSUFBSSxHQUFHaEIsT0FBTyxDQUFDZ0IsSUFBSSxDQUFDQyxRQUFRO1FBQ3BDO0lBQ0o7SUFDQSxPQUFPTjtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZnVsbC8uL25vZGVfbW9kdWxlcy9ub3Rpb24tY2xpZW50L25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS91dGlscy9vcHRpb25zLXRvLXVybC5qcz82YTM4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyogaXN0YW5idWwgaWdub3JlIGZpbGU6IGRlcHJlY2F0ZWQgKi9cbmNvbnN0IHVybF8xID0gcmVxdWlyZShcInVybFwiKTtcbmNvbnN0IGtleXMgPSBbXG4gICAgJ3Byb3RvY29sJyxcbiAgICAnaG9zdCcsXG4gICAgJ2hvc3RuYW1lJyxcbiAgICAncG9ydCcsXG4gICAgJ3BhdGhuYW1lJyxcbiAgICAnc2VhcmNoJ1xuXTtcbmV4cG9ydHMuZGVmYXVsdCA9IChvcmlnaW4sIG9wdGlvbnMpID0+IHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGlmIChvcHRpb25zLnBhdGgpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMucGF0aG5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BhcmFtZXRlcnMgYHBhdGhgIGFuZCBgcGF0aG5hbWVgIGFyZSBtdXR1YWxseSBleGNsdXNpdmUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuc2VhcmNoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQYXJhbWV0ZXJzIGBwYXRoYCBhbmQgYHNlYXJjaGAgYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZS4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5zZWFyY2hQYXJhbXMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BhcmFtZXRlcnMgYHBhdGhgIGFuZCBgc2VhcmNoUGFyYW1zYCBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnNlYXJjaCAmJiBvcHRpb25zLnNlYXJjaFBhcmFtcykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQYXJhbWV0ZXJzIGBzZWFyY2hgIGFuZCBgc2VhcmNoUGFyYW1zYCBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLicpO1xuICAgIH1cbiAgICBpZiAoIW9yaWdpbikge1xuICAgICAgICBpZiAoIW9wdGlvbnMucHJvdG9jb2wpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05vIFVSTCBwcm90b2NvbCBzcGVjaWZpZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBvcmlnaW4gPSBgJHtvcHRpb25zLnByb3RvY29sfS8vJHsoX2IgPSAoX2EgPSBvcHRpb25zLmhvc3RuYW1lKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBvcHRpb25zLmhvc3QpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICcnfWA7XG4gICAgfVxuICAgIGNvbnN0IHVybCA9IG5ldyB1cmxfMS5VUkwob3JpZ2luKTtcbiAgICBpZiAob3B0aW9ucy5wYXRoKSB7XG4gICAgICAgIGNvbnN0IHNlYXJjaEluZGV4ID0gb3B0aW9ucy5wYXRoLmluZGV4T2YoJz8nKTtcbiAgICAgICAgaWYgKHNlYXJjaEluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgb3B0aW9ucy5wYXRobmFtZSA9IG9wdGlvbnMucGF0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMucGF0aG5hbWUgPSBvcHRpb25zLnBhdGguc2xpY2UoMCwgc2VhcmNoSW5kZXgpO1xuICAgICAgICAgICAgb3B0aW9ucy5zZWFyY2ggPSBvcHRpb25zLnBhdGguc2xpY2Uoc2VhcmNoSW5kZXggKyAxKTtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgb3B0aW9ucy5wYXRoO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgICAgIGlmIChvcHRpb25zW2tleV0pIHtcbiAgICAgICAgICAgIHVybFtrZXldID0gb3B0aW9uc1trZXldLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVybDtcbn07XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ1cmxfMSIsInJlcXVpcmUiLCJrZXlzIiwiZGVmYXVsdCIsIm9yaWdpbiIsIm9wdGlvbnMiLCJfYSIsIl9iIiwicGF0aCIsInBhdGhuYW1lIiwiVHlwZUVycm9yIiwic2VhcmNoIiwic2VhcmNoUGFyYW1zIiwicHJvdG9jb2wiLCJob3N0bmFtZSIsImhvc3QiLCJ1cmwiLCJVUkwiLCJzZWFyY2hJbmRleCIsImluZGV4T2YiLCJzbGljZSIsImtleSIsInRvU3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/options-to-url.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/proxy-events.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/core/utils/proxy-events.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nfunction default_1(from, to, events) {\n    const fns = {};\n    for (const event of events){\n        fns[event] = (...args)=>{\n            to.emit(event, ...args);\n        };\n        from.on(event, fns[event]);\n    }\n    return ()=>{\n        for (const event of events){\n            from.off(event, fns[event]);\n        }\n    };\n}\nexports[\"default\"] = default_1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvcHJveHktZXZlbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELFNBQVNDLFVBQVVDLElBQUksRUFBRUMsRUFBRSxFQUFFQyxNQUFNO0lBQy9CLE1BQU1DLE1BQU0sQ0FBQztJQUNiLEtBQUssTUFBTUMsU0FBU0YsT0FBUTtRQUN4QkMsR0FBRyxDQUFDQyxNQUFNLEdBQUcsQ0FBQyxHQUFHQztZQUNiSixHQUFHSyxJQUFJLENBQUNGLFVBQVVDO1FBQ3RCO1FBQ0FMLEtBQUtPLEVBQUUsQ0FBQ0gsT0FBT0QsR0FBRyxDQUFDQyxNQUFNO0lBQzdCO0lBQ0EsT0FBTztRQUNILEtBQUssTUFBTUEsU0FBU0YsT0FBUTtZQUN4QkYsS0FBS1EsR0FBRyxDQUFDSixPQUFPRCxHQUFHLENBQUNDLE1BQU07UUFDOUI7SUFDSjtBQUNKO0FBQ0FQLGtCQUFlLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZnVsbC8uL25vZGVfbW9kdWxlcy9ub3Rpb24tY2xpZW50L25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS91dGlscy9wcm94eS1ldmVudHMuanM/NjVkMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGRlZmF1bHRfMShmcm9tLCB0bywgZXZlbnRzKSB7XG4gICAgY29uc3QgZm5zID0ge307XG4gICAgZm9yIChjb25zdCBldmVudCBvZiBldmVudHMpIHtcbiAgICAgICAgZm5zW2V2ZW50XSA9ICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICB0by5lbWl0KGV2ZW50LCAuLi5hcmdzKTtcbiAgICAgICAgfTtcbiAgICAgICAgZnJvbS5vbihldmVudCwgZm5zW2V2ZW50XSk7XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgZXZlbnQgb2YgZXZlbnRzKSB7XG4gICAgICAgICAgICBmcm9tLm9mZihldmVudCwgZm5zW2V2ZW50XSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gZGVmYXVsdF8xO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdF8xIiwiZnJvbSIsInRvIiwiZXZlbnRzIiwiZm5zIiwiZXZlbnQiLCJhcmdzIiwiZW1pdCIsIm9uIiwib2ZmIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/proxy-events.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/timed-out.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/core/utils/timed-out.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TimeoutError = void 0;\nconst net = __webpack_require__(/*! net */ \"net\");\nconst unhandle_1 = __webpack_require__(/*! ./unhandle */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/unhandle.js\");\nconst reentry = Symbol(\"reentry\");\nconst noop = ()=>{};\nclass TimeoutError extends Error {\n    constructor(threshold, event){\n        super(`Timeout awaiting '${event}' for ${threshold}ms`);\n        this.event = event;\n        this.name = \"TimeoutError\";\n        this.code = \"ETIMEDOUT\";\n    }\n}\nexports.TimeoutError = TimeoutError;\nexports[\"default\"] = (request, delays, options)=>{\n    if (reentry in request) {\n        return noop;\n    }\n    request[reentry] = true;\n    const cancelers = [];\n    const { once, unhandleAll } = unhandle_1.default();\n    const addTimeout = (delay, callback, event)=>{\n        var _a;\n        const timeout = setTimeout(callback, delay, delay, event);\n        (_a = timeout.unref) === null || _a === void 0 ? void 0 : _a.call(timeout);\n        const cancel = ()=>{\n            clearTimeout(timeout);\n        };\n        cancelers.push(cancel);\n        return cancel;\n    };\n    const { host, hostname } = options;\n    const timeoutHandler = (delay, event)=>{\n        request.destroy(new TimeoutError(delay, event));\n    };\n    const cancelTimeouts = ()=>{\n        for (const cancel of cancelers){\n            cancel();\n        }\n        unhandleAll();\n    };\n    request.once(\"error\", (error)=>{\n        cancelTimeouts();\n        // Save original behavior\n        /* istanbul ignore next */ if (request.listenerCount(\"error\") === 0) {\n            throw error;\n        }\n    });\n    request.once(\"close\", cancelTimeouts);\n    once(request, \"response\", (response)=>{\n        once(response, \"end\", cancelTimeouts);\n    });\n    if (typeof delays.request !== \"undefined\") {\n        addTimeout(delays.request, timeoutHandler, \"request\");\n    }\n    if (typeof delays.socket !== \"undefined\") {\n        const socketTimeoutHandler = ()=>{\n            timeoutHandler(delays.socket, \"socket\");\n        };\n        request.setTimeout(delays.socket, socketTimeoutHandler);\n        // `request.setTimeout(0)` causes a memory leak.\n        // We can just remove the listener and forget about the timer - it's unreffed.\n        // See https://github.com/sindresorhus/got/issues/690\n        cancelers.push(()=>{\n            request.removeListener(\"timeout\", socketTimeoutHandler);\n        });\n    }\n    once(request, \"socket\", (socket)=>{\n        var _a;\n        const { socketPath } = request;\n        /* istanbul ignore next: hard to test */ if (socket.connecting) {\n            const hasPath = Boolean(socketPath !== null && socketPath !== void 0 ? socketPath : net.isIP((_a = hostname !== null && hostname !== void 0 ? hostname : host) !== null && _a !== void 0 ? _a : \"\") !== 0);\n            if (typeof delays.lookup !== \"undefined\" && !hasPath && typeof socket.address().address === \"undefined\") {\n                const cancelTimeout = addTimeout(delays.lookup, timeoutHandler, \"lookup\");\n                once(socket, \"lookup\", cancelTimeout);\n            }\n            if (typeof delays.connect !== \"undefined\") {\n                const timeConnect = ()=>addTimeout(delays.connect, timeoutHandler, \"connect\");\n                if (hasPath) {\n                    once(socket, \"connect\", timeConnect());\n                } else {\n                    once(socket, \"lookup\", (error)=>{\n                        if (error === null) {\n                            once(socket, \"connect\", timeConnect());\n                        }\n                    });\n                }\n            }\n            if (typeof delays.secureConnect !== \"undefined\" && options.protocol === \"https:\") {\n                once(socket, \"connect\", ()=>{\n                    const cancelTimeout = addTimeout(delays.secureConnect, timeoutHandler, \"secureConnect\");\n                    once(socket, \"secureConnect\", cancelTimeout);\n                });\n            }\n        }\n        if (typeof delays.send !== \"undefined\") {\n            const timeRequest = ()=>addTimeout(delays.send, timeoutHandler, \"send\");\n            /* istanbul ignore next: hard to test */ if (socket.connecting) {\n                once(socket, \"connect\", ()=>{\n                    once(request, \"upload-complete\", timeRequest());\n                });\n            } else {\n                once(request, \"upload-complete\", timeRequest());\n            }\n        }\n    });\n    if (typeof delays.response !== \"undefined\") {\n        once(request, \"upload-complete\", ()=>{\n            const cancelTimeout = addTimeout(delays.response, timeoutHandler, \"response\");\n            once(request, \"response\", cancelTimeout);\n        });\n    }\n    return cancelTimeouts;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/timed-out.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/unhandle.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/core/utils/unhandle.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n// When attaching listeners, it's very easy to forget about them.\n// Especially if you do error handling and set timeouts.\n// So instead of checking if it's proper to throw an error on every timeout ever,\n// use this simple tool which will remove all listeners you have attached.\nexports[\"default\"] = ()=>{\n    const handlers = [];\n    return {\n        once (origin, event, fn) {\n            origin.once(event, fn);\n            handlers.push({\n                origin,\n                event,\n                fn\n            });\n        },\n        unhandleAll () {\n            for (const handler of handlers){\n                const { origin, event, fn } = handler;\n                origin.removeListener(event, fn);\n            }\n            handlers.length = 0;\n        }\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvdW5oYW5kbGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsaUVBQWlFO0FBQ2pFLHdEQUF3RDtBQUN4RCxpRkFBaUY7QUFDakYsMEVBQTBFO0FBQzFFRCxrQkFBZSxHQUFHO0lBQ2QsTUFBTUcsV0FBVyxFQUFFO0lBQ25CLE9BQU87UUFDSEMsTUFBS0MsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLEVBQUU7WUFDbEJGLE9BQU9ELElBQUksQ0FBQ0UsT0FBT0M7WUFDbkJKLFNBQVNLLElBQUksQ0FBQztnQkFBRUg7Z0JBQVFDO2dCQUFPQztZQUFHO1FBQ3RDO1FBQ0FFO1lBQ0ksS0FBSyxNQUFNQyxXQUFXUCxTQUFVO2dCQUM1QixNQUFNLEVBQUVFLE1BQU0sRUFBRUMsS0FBSyxFQUFFQyxFQUFFLEVBQUUsR0FBR0c7Z0JBQzlCTCxPQUFPTSxjQUFjLENBQUNMLE9BQU9DO1lBQ2pDO1lBQ0FKLFNBQVNTLE1BQU0sR0FBRztRQUN0QjtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1mdWxsLy4vbm9kZV9tb2R1bGVzL25vdGlvbi1jbGllbnQvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL3VuaGFuZGxlLmpzPzI3NjgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyBXaGVuIGF0dGFjaGluZyBsaXN0ZW5lcnMsIGl0J3MgdmVyeSBlYXN5IHRvIGZvcmdldCBhYm91dCB0aGVtLlxuLy8gRXNwZWNpYWxseSBpZiB5b3UgZG8gZXJyb3IgaGFuZGxpbmcgYW5kIHNldCB0aW1lb3V0cy5cbi8vIFNvIGluc3RlYWQgb2YgY2hlY2tpbmcgaWYgaXQncyBwcm9wZXIgdG8gdGhyb3cgYW4gZXJyb3Igb24gZXZlcnkgdGltZW91dCBldmVyLFxuLy8gdXNlIHRoaXMgc2ltcGxlIHRvb2wgd2hpY2ggd2lsbCByZW1vdmUgYWxsIGxpc3RlbmVycyB5b3UgaGF2ZSBhdHRhY2hlZC5cbmV4cG9ydHMuZGVmYXVsdCA9ICgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVycyA9IFtdO1xuICAgIHJldHVybiB7XG4gICAgICAgIG9uY2Uob3JpZ2luLCBldmVudCwgZm4pIHtcbiAgICAgICAgICAgIG9yaWdpbi5vbmNlKGV2ZW50LCBmbik7XG4gICAgICAgICAgICBoYW5kbGVycy5wdXNoKHsgb3JpZ2luLCBldmVudCwgZm4gfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHVuaGFuZGxlQWxsKCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBoYW5kbGVyIG9mIGhhbmRsZXJzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBvcmlnaW4sIGV2ZW50LCBmbiB9ID0gaGFuZGxlcjtcbiAgICAgICAgICAgICAgICBvcmlnaW4ucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGZuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhhbmRsZXJzLmxlbmd0aCA9IDA7XG4gICAgICAgIH1cbiAgICB9O1xufTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJoYW5kbGVycyIsIm9uY2UiLCJvcmlnaW4iLCJldmVudCIsImZuIiwicHVzaCIsInVuaGFuZGxlQWxsIiwiaGFuZGxlciIsInJlbW92ZUxpc3RlbmVyIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/unhandle.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/url-to-options.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/core/utils/url-to-options.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\nexports[\"default\"] = (url)=>{\n    // Cast to URL\n    url = url;\n    const options = {\n        protocol: url.protocol,\n        hostname: is_1.default.string(url.hostname) && url.hostname.startsWith(\"[\") ? url.hostname.slice(1, -1) : url.hostname,\n        host: url.host,\n        hash: url.hash,\n        search: url.search,\n        pathname: url.pathname,\n        href: url.href,\n        path: `${url.pathname || \"\"}${url.search || \"\"}`\n    };\n    if (is_1.default.string(url.port) && url.port.length > 0) {\n        options.port = Number(url.port);\n    }\n    if (url.username || url.password) {\n        options.auth = `${url.username || \"\"}:${url.password || \"\"}`;\n    }\n    return options;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvdXJsLXRvLW9wdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsT0FBT0MsbUJBQU9BLENBQUMsNkVBQWtCO0FBQ3ZDSCxrQkFBZSxHQUFHLENBQUNLO0lBQ2YsY0FBYztJQUNkQSxNQUFNQTtJQUNOLE1BQU1DLFVBQVU7UUFDWkMsVUFBVUYsSUFBSUUsUUFBUTtRQUN0QkMsVUFBVU4sS0FBS0UsT0FBTyxDQUFDSyxNQUFNLENBQUNKLElBQUlHLFFBQVEsS0FBS0gsSUFBSUcsUUFBUSxDQUFDRSxVQUFVLENBQUMsT0FBT0wsSUFBSUcsUUFBUSxDQUFDRyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUtOLElBQUlHLFFBQVE7UUFDdEhJLE1BQU1QLElBQUlPLElBQUk7UUFDZEMsTUFBTVIsSUFBSVEsSUFBSTtRQUNkQyxRQUFRVCxJQUFJUyxNQUFNO1FBQ2xCQyxVQUFVVixJQUFJVSxRQUFRO1FBQ3RCQyxNQUFNWCxJQUFJVyxJQUFJO1FBQ2RDLE1BQU0sQ0FBQyxFQUFFWixJQUFJVSxRQUFRLElBQUksR0FBRyxFQUFFVixJQUFJUyxNQUFNLElBQUksR0FBRyxDQUFDO0lBQ3BEO0lBQ0EsSUFBSVosS0FBS0UsT0FBTyxDQUFDSyxNQUFNLENBQUNKLElBQUlhLElBQUksS0FBS2IsSUFBSWEsSUFBSSxDQUFDQyxNQUFNLEdBQUcsR0FBRztRQUN0RGIsUUFBUVksSUFBSSxHQUFHRSxPQUFPZixJQUFJYSxJQUFJO0lBQ2xDO0lBQ0EsSUFBSWIsSUFBSWdCLFFBQVEsSUFBSWhCLElBQUlpQixRQUFRLEVBQUU7UUFDOUJoQixRQUFRaUIsSUFBSSxHQUFHLENBQUMsRUFBRWxCLElBQUlnQixRQUFRLElBQUksR0FBRyxDQUFDLEVBQUVoQixJQUFJaUIsUUFBUSxJQUFJLEdBQUcsQ0FBQztJQUNoRTtJQUNBLE9BQU9oQjtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZnVsbC8uL25vZGVfbW9kdWxlcy9ub3Rpb24tY2xpZW50L25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS91dGlscy91cmwtdG8tb3B0aW9ucy5qcz8wYjg0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaXNfMSA9IHJlcXVpcmUoXCJAc2luZHJlc29yaHVzL2lzXCIpO1xuZXhwb3J0cy5kZWZhdWx0ID0gKHVybCkgPT4ge1xuICAgIC8vIENhc3QgdG8gVVJMXG4gICAgdXJsID0gdXJsO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIHByb3RvY29sOiB1cmwucHJvdG9jb2wsXG4gICAgICAgIGhvc3RuYW1lOiBpc18xLmRlZmF1bHQuc3RyaW5nKHVybC5ob3N0bmFtZSkgJiYgdXJsLmhvc3RuYW1lLnN0YXJ0c1dpdGgoJ1snKSA/IHVybC5ob3N0bmFtZS5zbGljZSgxLCAtMSkgOiB1cmwuaG9zdG5hbWUsXG4gICAgICAgIGhvc3Q6IHVybC5ob3N0LFxuICAgICAgICBoYXNoOiB1cmwuaGFzaCxcbiAgICAgICAgc2VhcmNoOiB1cmwuc2VhcmNoLFxuICAgICAgICBwYXRobmFtZTogdXJsLnBhdGhuYW1lLFxuICAgICAgICBocmVmOiB1cmwuaHJlZixcbiAgICAgICAgcGF0aDogYCR7dXJsLnBhdGhuYW1lIHx8ICcnfSR7dXJsLnNlYXJjaCB8fCAnJ31gXG4gICAgfTtcbiAgICBpZiAoaXNfMS5kZWZhdWx0LnN0cmluZyh1cmwucG9ydCkgJiYgdXJsLnBvcnQubGVuZ3RoID4gMCkge1xuICAgICAgICBvcHRpb25zLnBvcnQgPSBOdW1iZXIodXJsLnBvcnQpO1xuICAgIH1cbiAgICBpZiAodXJsLnVzZXJuYW1lIHx8IHVybC5wYXNzd29yZCkge1xuICAgICAgICBvcHRpb25zLmF1dGggPSBgJHt1cmwudXNlcm5hbWUgfHwgJyd9OiR7dXJsLnBhc3N3b3JkIHx8ICcnfWA7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xufTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzXzEiLCJyZXF1aXJlIiwiZGVmYXVsdCIsInVybCIsIm9wdGlvbnMiLCJwcm90b2NvbCIsImhvc3RuYW1lIiwic3RyaW5nIiwic3RhcnRzV2l0aCIsInNsaWNlIiwiaG9zdCIsImhhc2giLCJzZWFyY2giLCJwYXRobmFtZSIsImhyZWYiLCJwYXRoIiwicG9ydCIsImxlbmd0aCIsIk51bWJlciIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJhdXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/url-to-options.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/weakable-map.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/core/utils/weakable-map.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nclass WeakableMap {\n    constructor(){\n        this.weakMap = new WeakMap();\n        this.map = new Map();\n    }\n    set(key, value) {\n        if (typeof key === \"object\") {\n            this.weakMap.set(key, value);\n        } else {\n            this.map.set(key, value);\n        }\n    }\n    get(key) {\n        if (typeof key === \"object\") {\n            return this.weakMap.get(key);\n        }\n        return this.map.get(key);\n    }\n    has(key) {\n        if (typeof key === \"object\") {\n            return this.weakMap.has(key);\n        }\n        return this.map.has(key);\n    }\n}\nexports[\"default\"] = WeakableMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvd2Vha2FibGUtbWFwLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DO0lBQ0ZDLGFBQWM7UUFDVixJQUFJLENBQUNDLE9BQU8sR0FBRyxJQUFJQztRQUNuQixJQUFJLENBQUNDLEdBQUcsR0FBRyxJQUFJQztJQUNuQjtJQUNBQyxJQUFJQyxHQUFHLEVBQUVSLEtBQUssRUFBRTtRQUNaLElBQUksT0FBT1EsUUFBUSxVQUFVO1lBQ3pCLElBQUksQ0FBQ0wsT0FBTyxDQUFDSSxHQUFHLENBQUNDLEtBQUtSO1FBQzFCLE9BQ0s7WUFDRCxJQUFJLENBQUNLLEdBQUcsQ0FBQ0UsR0FBRyxDQUFDQyxLQUFLUjtRQUN0QjtJQUNKO0lBQ0FTLElBQUlELEdBQUcsRUFBRTtRQUNMLElBQUksT0FBT0EsUUFBUSxVQUFVO1lBQ3pCLE9BQU8sSUFBSSxDQUFDTCxPQUFPLENBQUNNLEdBQUcsQ0FBQ0Q7UUFDNUI7UUFDQSxPQUFPLElBQUksQ0FBQ0gsR0FBRyxDQUFDSSxHQUFHLENBQUNEO0lBQ3hCO0lBQ0FFLElBQUlGLEdBQUcsRUFBRTtRQUNMLElBQUksT0FBT0EsUUFBUSxVQUFVO1lBQ3pCLE9BQU8sSUFBSSxDQUFDTCxPQUFPLENBQUNPLEdBQUcsQ0FBQ0Y7UUFDNUI7UUFDQSxPQUFPLElBQUksQ0FBQ0gsR0FBRyxDQUFDSyxHQUFHLENBQUNGO0lBQ3hCO0FBQ0o7QUFDQVQsa0JBQWUsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1mdWxsLy4vbm9kZV9tb2R1bGVzL25vdGlvbi1jbGllbnQvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL3dlYWthYmxlLW1hcC5qcz81NzRjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY2xhc3MgV2Vha2FibGVNYXAge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLndlYWtNYXAgPSBuZXcgV2Vha01hcCgpO1xuICAgICAgICB0aGlzLm1hcCA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB0aGlzLndlYWtNYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldChrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53ZWFrTWFwLmdldChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm1hcC5nZXQoa2V5KTtcbiAgICB9XG4gICAgaGFzKGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndlYWtNYXAuaGFzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubWFwLmhhcyhrZXkpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFdlYWthYmxlTWFwO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiV2Vha2FibGVNYXAiLCJjb25zdHJ1Y3RvciIsIndlYWtNYXAiLCJXZWFrTWFwIiwibWFwIiwiTWFwIiwic2V0Iiwia2V5IiwiZ2V0IiwiaGFzIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/weakable-map.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/create.js":
/*!***************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/create.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.defaultHandler = void 0;\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\nconst as_promise_1 = __webpack_require__(/*! ./as-promise */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/index.js\");\nconst create_rejection_1 = __webpack_require__(/*! ./as-promise/create-rejection */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/create-rejection.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/index.js\");\nconst deep_freeze_1 = __webpack_require__(/*! ./utils/deep-freeze */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/utils/deep-freeze.js\");\nconst errors = {\n    RequestError: as_promise_1.RequestError,\n    CacheError: as_promise_1.CacheError,\n    ReadError: as_promise_1.ReadError,\n    HTTPError: as_promise_1.HTTPError,\n    MaxRedirectsError: as_promise_1.MaxRedirectsError,\n    TimeoutError: as_promise_1.TimeoutError,\n    ParseError: as_promise_1.ParseError,\n    CancelError: as_promise_1.CancelError,\n    UnsupportedProtocolError: as_promise_1.UnsupportedProtocolError,\n    UploadError: as_promise_1.UploadError\n};\n// The `delay` package weighs 10KB (!)\nconst delay = async (ms)=>new Promise((resolve)=>{\n        setTimeout(resolve, ms);\n    });\nconst { normalizeArguments } = core_1.default;\nconst mergeOptions = (...sources)=>{\n    let mergedOptions;\n    for (const source of sources){\n        mergedOptions = normalizeArguments(undefined, source, mergedOptions);\n    }\n    return mergedOptions;\n};\nconst getPromiseOrStream = (options)=>options.isStream ? new core_1.default(undefined, options) : as_promise_1.default(options);\nconst isGotInstance = (value)=>\"defaults\" in value && \"options\" in value.defaults;\nconst aliases = [\n    \"get\",\n    \"post\",\n    \"put\",\n    \"patch\",\n    \"head\",\n    \"delete\"\n];\nexports.defaultHandler = (options, next)=>next(options);\nconst callInitHooks = (hooks, options)=>{\n    if (hooks) {\n        for (const hook of hooks){\n            hook(options);\n        }\n    }\n};\nconst create = (defaults)=>{\n    // Proxy properties from next handlers\n    defaults._rawHandlers = defaults.handlers;\n    defaults.handlers = defaults.handlers.map((fn)=>(options, next)=>{\n            // This will be assigned by assigning result\n            let root;\n            const result = fn(options, (newOptions)=>{\n                root = next(newOptions);\n                return root;\n            });\n            if (result !== root && !options.isStream && root) {\n                const typedResult = result;\n                const { then: promiseThen, catch: promiseCatch, finally: promiseFianlly } = typedResult;\n                Object.setPrototypeOf(typedResult, Object.getPrototypeOf(root));\n                Object.defineProperties(typedResult, Object.getOwnPropertyDescriptors(root));\n                // These should point to the new promise\n                // eslint-disable-next-line promise/prefer-await-to-then\n                typedResult.then = promiseThen;\n                typedResult.catch = promiseCatch;\n                typedResult.finally = promiseFianlly;\n            }\n            return result;\n        });\n    // Got interface\n    const got = (url, options = {}, _defaults)=>{\n        var _a, _b;\n        let iteration = 0;\n        const iterateHandlers = (newOptions)=>{\n            return defaults.handlers[iteration++](newOptions, iteration === defaults.handlers.length ? getPromiseOrStream : iterateHandlers);\n        };\n        // TODO: Remove this in Got 12.\n        if (is_1.default.plainObject(url)) {\n            const mergedOptions = {\n                ...url,\n                ...options\n            };\n            core_1.setNonEnumerableProperties([\n                url,\n                options\n            ], mergedOptions);\n            options = mergedOptions;\n            url = undefined;\n        }\n        try {\n            // Call `init` hooks\n            let initHookError;\n            try {\n                callInitHooks(defaults.options.hooks.init, options);\n                callInitHooks((_a = options.hooks) === null || _a === void 0 ? void 0 : _a.init, options);\n            } catch (error) {\n                initHookError = error;\n            }\n            // Normalize options & call handlers\n            const normalizedOptions = normalizeArguments(url, options, _defaults !== null && _defaults !== void 0 ? _defaults : defaults.options);\n            normalizedOptions[core_1.kIsNormalizedAlready] = true;\n            if (initHookError) {\n                throw new as_promise_1.RequestError(initHookError.message, initHookError, normalizedOptions);\n            }\n            return iterateHandlers(normalizedOptions);\n        } catch (error) {\n            if (options.isStream) {\n                throw error;\n            } else {\n                return create_rejection_1.default(error, defaults.options.hooks.beforeError, (_b = options.hooks) === null || _b === void 0 ? void 0 : _b.beforeError);\n            }\n        }\n    };\n    got.extend = (...instancesOrOptions)=>{\n        const optionsArray = [\n            defaults.options\n        ];\n        let handlers = [\n            ...defaults._rawHandlers\n        ];\n        let isMutableDefaults;\n        for (const value of instancesOrOptions){\n            if (isGotInstance(value)) {\n                optionsArray.push(value.defaults.options);\n                handlers.push(...value.defaults._rawHandlers);\n                isMutableDefaults = value.defaults.mutableDefaults;\n            } else {\n                optionsArray.push(value);\n                if (\"handlers\" in value) {\n                    handlers.push(...value.handlers);\n                }\n                isMutableDefaults = value.mutableDefaults;\n            }\n        }\n        handlers = handlers.filter((handler)=>handler !== exports.defaultHandler);\n        if (handlers.length === 0) {\n            handlers.push(exports.defaultHandler);\n        }\n        return create({\n            options: mergeOptions(...optionsArray),\n            handlers,\n            mutableDefaults: Boolean(isMutableDefaults)\n        });\n    };\n    // Pagination\n    const paginateEach = async function*(url, options) {\n        // TODO: Remove this `@ts-expect-error` when upgrading to TypeScript 4.\n        // Error: Argument of type 'Merge<Options, PaginationOptions<T, R>> | undefined' is not assignable to parameter of type 'Options | undefined'.\n        // @ts-expect-error\n        let normalizedOptions = normalizeArguments(url, options, defaults.options);\n        normalizedOptions.resolveBodyOnly = false;\n        const pagination = normalizedOptions.pagination;\n        if (!is_1.default.object(pagination)) {\n            throw new TypeError(\"`options.pagination` must be implemented\");\n        }\n        const all = [];\n        let { countLimit } = pagination;\n        let numberOfRequests = 0;\n        while(numberOfRequests < pagination.requestLimit){\n            if (numberOfRequests !== 0) {\n                // eslint-disable-next-line no-await-in-loop\n                await delay(pagination.backoff);\n            }\n            // @ts-expect-error FIXME!\n            // TODO: Throw when result is not an instance of Response\n            // eslint-disable-next-line no-await-in-loop\n            const result = await got(undefined, undefined, normalizedOptions);\n            // eslint-disable-next-line no-await-in-loop\n            const parsed = await pagination.transform(result);\n            const current = [];\n            for (const item of parsed){\n                if (pagination.filter(item, all, current)) {\n                    if (!pagination.shouldContinue(item, all, current)) {\n                        return;\n                    }\n                    yield item;\n                    if (pagination.stackAllItems) {\n                        all.push(item);\n                    }\n                    current.push(item);\n                    if (--countLimit <= 0) {\n                        return;\n                    }\n                }\n            }\n            const optionsToMerge = pagination.paginate(result, all, current);\n            if (optionsToMerge === false) {\n                return;\n            }\n            if (optionsToMerge === result.request.options) {\n                normalizedOptions = result.request.options;\n            } else if (optionsToMerge !== undefined) {\n                normalizedOptions = normalizeArguments(undefined, optionsToMerge, normalizedOptions);\n            }\n            numberOfRequests++;\n        }\n    };\n    got.paginate = paginateEach;\n    got.paginate.all = async (url, options)=>{\n        const results = [];\n        for await (const item of paginateEach(url, options)){\n            results.push(item);\n        }\n        return results;\n    };\n    // For those who like very descriptive names\n    got.paginate.each = paginateEach;\n    // Stream API\n    got.stream = (url, options)=>got(url, {\n            ...options,\n            isStream: true\n        });\n    // Shortcuts\n    for (const method of aliases){\n        got[method] = (url, options)=>got(url, {\n                ...options,\n                method\n            });\n        got.stream[method] = (url, options)=>{\n            return got(url, {\n                ...options,\n                method,\n                isStream: true\n            });\n        };\n    }\n    Object.assign(got, errors);\n    Object.defineProperty(got, \"defaults\", {\n        value: defaults.mutableDefaults ? defaults : deep_freeze_1.default(defaults),\n        writable: defaults.mutableDefaults,\n        configurable: defaults.mutableDefaults,\n        enumerable: true\n    });\n    got.mergeOptions = mergeOptions;\n    return got;\n};\nexports[\"default\"] = create;\n__exportStar(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/types.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/create.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/index.js ***!
  \**************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst create_1 = __webpack_require__(/*! ./create */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/create.js\");\nconst defaults = {\n    options: {\n        method: \"GET\",\n        retry: {\n            limit: 2,\n            methods: [\n                \"GET\",\n                \"PUT\",\n                \"HEAD\",\n                \"DELETE\",\n                \"OPTIONS\",\n                \"TRACE\"\n            ],\n            statusCodes: [\n                408,\n                413,\n                429,\n                500,\n                502,\n                503,\n                504,\n                521,\n                522,\n                524\n            ],\n            errorCodes: [\n                \"ETIMEDOUT\",\n                \"ECONNRESET\",\n                \"EADDRINUSE\",\n                \"ECONNREFUSED\",\n                \"EPIPE\",\n                \"ENOTFOUND\",\n                \"ENETUNREACH\",\n                \"EAI_AGAIN\"\n            ],\n            maxRetryAfter: undefined,\n            calculateDelay: ({ computedValue })=>computedValue\n        },\n        timeout: {},\n        headers: {\n            \"user-agent\": \"got (https://github.com/sindresorhus/got)\"\n        },\n        hooks: {\n            init: [],\n            beforeRequest: [],\n            beforeRedirect: [],\n            beforeRetry: [],\n            beforeError: [],\n            afterResponse: []\n        },\n        cache: undefined,\n        dnsCache: undefined,\n        decompress: true,\n        throwHttpErrors: true,\n        followRedirect: true,\n        isStream: false,\n        responseType: \"text\",\n        resolveBodyOnly: false,\n        maxRedirects: 10,\n        prefixUrl: \"\",\n        methodRewriting: true,\n        ignoreInvalidCookies: false,\n        context: {},\n        // TODO: Set this to `true` when Got 12 gets released\n        http2: false,\n        allowGetBody: false,\n        https: undefined,\n        pagination: {\n            transform: (response)=>{\n                if (response.request.options.responseType === \"json\") {\n                    return response.body;\n                }\n                return JSON.parse(response.body);\n            },\n            paginate: (response)=>{\n                if (!Reflect.has(response.headers, \"link\")) {\n                    return false;\n                }\n                const items = response.headers.link.split(\",\");\n                let next;\n                for (const item of items){\n                    const parsed = item.split(\";\");\n                    if (parsed[1].includes(\"next\")) {\n                        next = parsed[0].trimStart().trim();\n                        next = next.slice(1, -1);\n                        break;\n                    }\n                }\n                if (next) {\n                    const options = {\n                        url: new url_1.URL(next)\n                    };\n                    return options;\n                }\n                return false;\n            },\n            filter: ()=>true,\n            shouldContinue: ()=>true,\n            countLimit: Infinity,\n            backoff: 0,\n            requestLimit: 10000,\n            stackAllItems: true\n        },\n        parseJson: (text)=>JSON.parse(text),\n        stringifyJson: (object)=>JSON.stringify(object),\n        cacheOptions: {}\n    },\n    handlers: [\n        create_1.defaultHandler\n    ],\n    mutableDefaults: false\n};\nconst got = create_1.default(defaults);\nexports[\"default\"] = got;\n// For CommonJS default export support\nmodule.exports = got;\nmodule.exports[\"default\"] = got;\nmodule.exports.__esModule = true; // Workaround for TS issue: https://github.com/sindresorhus/got/pull/1267\n__exportStar(__webpack_require__(/*! ./create */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/create.js\"), exports);\n__exportStar(__webpack_require__(/*! ./as-promise */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/index.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsZUFBZSxJQUFNQyxDQUFBQSxPQUFPQyxNQUFNLEdBQUksU0FBU0MsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUMxRixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQkosT0FBT08sY0FBYyxDQUFDTCxHQUFHRyxJQUFJO1FBQUVHLFlBQVk7UUFBTUMsS0FBSztZQUFhLE9BQU9OLENBQUMsQ0FBQ0MsRUFBRTtRQUFFO0lBQUU7QUFDdEYsSUFBTSxTQUFTRixDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQ3RCLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCRixDQUFDLENBQUNHLEdBQUcsR0FBR0YsQ0FBQyxDQUFDQyxFQUFFO0FBQ2hCLENBQUM7QUFDRCxJQUFJTSxlQUFlLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsWUFBWSxJQUFLLFNBQVNQLENBQUMsRUFBRVEsUUFBTztJQUNqRSxJQUFLLElBQUlDLEtBQUtULEVBQUcsSUFBSVMsTUFBTSxhQUFhLENBQUNaLE9BQU9hLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNKLFVBQVNDLElBQUliLGdCQUFnQlksVUFBU1IsR0FBR1M7QUFDM0g7QUFDQVosOENBQTZDO0lBQUVnQixPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFFBQVFDLG1CQUFPQSxDQUFDLGdCQUFLO0FBQzNCLE1BQU1DLFdBQVdELG1CQUFPQSxDQUFDLDJGQUFVO0FBQ25DLE1BQU1FLFdBQVc7SUFDYkMsU0FBUztRQUNMQyxRQUFRO1FBQ1JDLE9BQU87WUFDSEMsT0FBTztZQUNQQyxTQUFTO2dCQUNMO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2FBQ0g7WUFDREMsYUFBYTtnQkFDVDtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTthQUNIO1lBQ0RDLFlBQVk7Z0JBQ1I7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7YUFDSDtZQUNEQyxlQUFldEI7WUFDZnVCLGdCQUFnQixDQUFDLEVBQUVDLGFBQWEsRUFBRSxHQUFLQTtRQUMzQztRQUNBQyxTQUFTLENBQUM7UUFDVkMsU0FBUztZQUNMLGNBQWM7UUFDbEI7UUFDQUMsT0FBTztZQUNIQyxNQUFNLEVBQUU7WUFDUkMsZUFBZSxFQUFFO1lBQ2pCQyxnQkFBZ0IsRUFBRTtZQUNsQkMsYUFBYSxFQUFFO1lBQ2ZDLGFBQWEsRUFBRTtZQUNmQyxlQUFlLEVBQUU7UUFDckI7UUFDQUMsT0FBT2xDO1FBQ1BtQyxVQUFVbkM7UUFDVm9DLFlBQVk7UUFDWkMsaUJBQWlCO1FBQ2pCQyxnQkFBZ0I7UUFDaEJDLFVBQVU7UUFDVkMsY0FBYztRQUNkQyxpQkFBaUI7UUFDakJDLGNBQWM7UUFDZEMsV0FBVztRQUNYQyxpQkFBaUI7UUFDakJDLHNCQUFzQjtRQUN0QkMsU0FBUyxDQUFDO1FBQ1YscURBQXFEO1FBQ3JEQyxPQUFPO1FBQ1BDLGNBQWM7UUFDZEMsT0FBT2pEO1FBQ1BrRCxZQUFZO1lBQ1JDLFdBQVcsQ0FBQ0M7Z0JBQ1IsSUFBSUEsU0FBU0MsT0FBTyxDQUFDdEMsT0FBTyxDQUFDeUIsWUFBWSxLQUFLLFFBQVE7b0JBQ2xELE9BQU9ZLFNBQVNFLElBQUk7Z0JBQ3hCO2dCQUNBLE9BQU9DLEtBQUtDLEtBQUssQ0FBQ0osU0FBU0UsSUFBSTtZQUNuQztZQUNBRyxVQUFVTCxDQUFBQTtnQkFDTixJQUFJLENBQUNNLFFBQVFDLEdBQUcsQ0FBQ1AsU0FBUzFCLE9BQU8sRUFBRSxTQUFTO29CQUN4QyxPQUFPO2dCQUNYO2dCQUNBLE1BQU1rQyxRQUFRUixTQUFTMUIsT0FBTyxDQUFDbUMsSUFBSSxDQUFDQyxLQUFLLENBQUM7Z0JBQzFDLElBQUlDO2dCQUNKLEtBQUssTUFBTUMsUUFBUUosTUFBTztvQkFDdEIsTUFBTUssU0FBU0QsS0FBS0YsS0FBSyxDQUFDO29CQUMxQixJQUFJRyxNQUFNLENBQUMsRUFBRSxDQUFDQyxRQUFRLENBQUMsU0FBUzt3QkFDNUJILE9BQU9FLE1BQU0sQ0FBQyxFQUFFLENBQUNFLFNBQVMsR0FBR0MsSUFBSTt3QkFDakNMLE9BQU9BLEtBQUtNLEtBQUssQ0FBQyxHQUFHLENBQUM7d0JBQ3RCO29CQUNKO2dCQUNKO2dCQUNBLElBQUlOLE1BQU07b0JBQ04sTUFBTWhELFVBQVU7d0JBQ1p1RCxLQUFLLElBQUkzRCxNQUFNNEQsR0FBRyxDQUFDUjtvQkFDdkI7b0JBQ0EsT0FBT2hEO2dCQUNYO2dCQUNBLE9BQU87WUFDWDtZQUNBeUQsUUFBUSxJQUFNO1lBQ2RDLGdCQUFnQixJQUFNO1lBQ3RCQyxZQUFZQztZQUNaQyxTQUFTO1lBQ1RDLGNBQWM7WUFDZEMsZUFBZTtRQUNuQjtRQUNBQyxXQUFXLENBQUNDLE9BQVN6QixLQUFLQyxLQUFLLENBQUN3QjtRQUNoQ0MsZUFBZSxDQUFDQyxTQUFXM0IsS0FBSzRCLFNBQVMsQ0FBQ0Q7UUFDMUNFLGNBQWMsQ0FBQztJQUNuQjtJQUNBQyxVQUFVO1FBQUN4RSxTQUFTeUUsY0FBYztLQUFDO0lBQ25DQyxpQkFBaUI7QUFDckI7QUFDQSxNQUFNQyxNQUFNM0UsU0FBUzRFLE9BQU8sQ0FBQzNFO0FBQzdCVCxrQkFBZSxHQUFHbUY7QUFDbEIsc0NBQXNDO0FBQ3RDRSxPQUFPckYsT0FBTyxHQUFHbUY7QUFDakJFLHlCQUFzQixHQUFHRjtBQUN6QkUseUJBQXlCLEdBQUcsTUFBTSx5RUFBeUU7QUFDM0d0RixhQUFhUSxtQkFBT0EsQ0FBQywyRkFBVSxHQUFHUDtBQUNsQ0QsYUFBYVEsbUJBQU9BLENBQUMseUdBQWMsR0FBR1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1mdWxsLy4vbm9kZV9tb2R1bGVzL25vdGlvbi1jbGllbnQvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9pbmRleC5qcz9hNmJmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB1cmxfMSA9IHJlcXVpcmUoXCJ1cmxcIik7XG5jb25zdCBjcmVhdGVfMSA9IHJlcXVpcmUoXCIuL2NyZWF0ZVwiKTtcbmNvbnN0IGRlZmF1bHRzID0ge1xuICAgIG9wdGlvbnM6IHtcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgcmV0cnk6IHtcbiAgICAgICAgICAgIGxpbWl0OiAyLFxuICAgICAgICAgICAgbWV0aG9kczogW1xuICAgICAgICAgICAgICAgICdHRVQnLFxuICAgICAgICAgICAgICAgICdQVVQnLFxuICAgICAgICAgICAgICAgICdIRUFEJyxcbiAgICAgICAgICAgICAgICAnREVMRVRFJyxcbiAgICAgICAgICAgICAgICAnT1BUSU9OUycsXG4gICAgICAgICAgICAgICAgJ1RSQUNFJ1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHN0YXR1c0NvZGVzOiBbXG4gICAgICAgICAgICAgICAgNDA4LFxuICAgICAgICAgICAgICAgIDQxMyxcbiAgICAgICAgICAgICAgICA0MjksXG4gICAgICAgICAgICAgICAgNTAwLFxuICAgICAgICAgICAgICAgIDUwMixcbiAgICAgICAgICAgICAgICA1MDMsXG4gICAgICAgICAgICAgICAgNTA0LFxuICAgICAgICAgICAgICAgIDUyMSxcbiAgICAgICAgICAgICAgICA1MjIsXG4gICAgICAgICAgICAgICAgNTI0XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZXJyb3JDb2RlczogW1xuICAgICAgICAgICAgICAgICdFVElNRURPVVQnLFxuICAgICAgICAgICAgICAgICdFQ09OTlJFU0VUJyxcbiAgICAgICAgICAgICAgICAnRUFERFJJTlVTRScsXG4gICAgICAgICAgICAgICAgJ0VDT05OUkVGVVNFRCcsXG4gICAgICAgICAgICAgICAgJ0VQSVBFJyxcbiAgICAgICAgICAgICAgICAnRU5PVEZPVU5EJyxcbiAgICAgICAgICAgICAgICAnRU5FVFVOUkVBQ0gnLFxuICAgICAgICAgICAgICAgICdFQUlfQUdBSU4nXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgbWF4UmV0cnlBZnRlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY2FsY3VsYXRlRGVsYXk6ICh7IGNvbXB1dGVkVmFsdWUgfSkgPT4gY29tcHV0ZWRWYWx1ZVxuICAgICAgICB9LFxuICAgICAgICB0aW1lb3V0OiB7fSxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ3VzZXItYWdlbnQnOiAnZ290IChodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2dvdCknXG4gICAgICAgIH0sXG4gICAgICAgIGhvb2tzOiB7XG4gICAgICAgICAgICBpbml0OiBbXSxcbiAgICAgICAgICAgIGJlZm9yZVJlcXVlc3Q6IFtdLFxuICAgICAgICAgICAgYmVmb3JlUmVkaXJlY3Q6IFtdLFxuICAgICAgICAgICAgYmVmb3JlUmV0cnk6IFtdLFxuICAgICAgICAgICAgYmVmb3JlRXJyb3I6IFtdLFxuICAgICAgICAgICAgYWZ0ZXJSZXNwb25zZTogW11cbiAgICAgICAgfSxcbiAgICAgICAgY2FjaGU6IHVuZGVmaW5lZCxcbiAgICAgICAgZG5zQ2FjaGU6IHVuZGVmaW5lZCxcbiAgICAgICAgZGVjb21wcmVzczogdHJ1ZSxcbiAgICAgICAgdGhyb3dIdHRwRXJyb3JzOiB0cnVlLFxuICAgICAgICBmb2xsb3dSZWRpcmVjdDogdHJ1ZSxcbiAgICAgICAgaXNTdHJlYW06IGZhbHNlLFxuICAgICAgICByZXNwb25zZVR5cGU6ICd0ZXh0JyxcbiAgICAgICAgcmVzb2x2ZUJvZHlPbmx5OiBmYWxzZSxcbiAgICAgICAgbWF4UmVkaXJlY3RzOiAxMCxcbiAgICAgICAgcHJlZml4VXJsOiAnJyxcbiAgICAgICAgbWV0aG9kUmV3cml0aW5nOiB0cnVlLFxuICAgICAgICBpZ25vcmVJbnZhbGlkQ29va2llczogZmFsc2UsXG4gICAgICAgIGNvbnRleHQ6IHt9LFxuICAgICAgICAvLyBUT0RPOiBTZXQgdGhpcyB0byBgdHJ1ZWAgd2hlbiBHb3QgMTIgZ2V0cyByZWxlYXNlZFxuICAgICAgICBodHRwMjogZmFsc2UsXG4gICAgICAgIGFsbG93R2V0Qm9keTogZmFsc2UsXG4gICAgICAgIGh0dHBzOiB1bmRlZmluZWQsXG4gICAgICAgIHBhZ2luYXRpb246IHtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnJlcXVlc3Qub3B0aW9ucy5yZXNwb25zZVR5cGUgPT09ICdqc29uJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuYm9keTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFnaW5hdGU6IHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIVJlZmxlY3QuaGFzKHJlc3BvbnNlLmhlYWRlcnMsICdsaW5rJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtcyA9IHJlc3BvbnNlLmhlYWRlcnMubGluay5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgICAgIGxldCBuZXh0O1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWQgPSBpdGVtLnNwbGl0KCc7Jyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZWRbMV0uaW5jbHVkZXMoJ25leHQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCA9IHBhcnNlZFswXS50cmltU3RhcnQoKS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0ID0gbmV4dC5zbGljZSgxLCAtMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobmV4dCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBuZXcgdXJsXzEuVVJMKG5leHQpXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmlsdGVyOiAoKSA9PiB0cnVlLFxuICAgICAgICAgICAgc2hvdWxkQ29udGludWU6ICgpID0+IHRydWUsXG4gICAgICAgICAgICBjb3VudExpbWl0OiBJbmZpbml0eSxcbiAgICAgICAgICAgIGJhY2tvZmY6IDAsXG4gICAgICAgICAgICByZXF1ZXN0TGltaXQ6IDEwMDAwLFxuICAgICAgICAgICAgc3RhY2tBbGxJdGVtczogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBwYXJzZUpzb246ICh0ZXh0KSA9PiBKU09OLnBhcnNlKHRleHQpLFxuICAgICAgICBzdHJpbmdpZnlKc29uOiAob2JqZWN0KSA9PiBKU09OLnN0cmluZ2lmeShvYmplY3QpLFxuICAgICAgICBjYWNoZU9wdGlvbnM6IHt9XG4gICAgfSxcbiAgICBoYW5kbGVyczogW2NyZWF0ZV8xLmRlZmF1bHRIYW5kbGVyXSxcbiAgICBtdXRhYmxlRGVmYXVsdHM6IGZhbHNlXG59O1xuY29uc3QgZ290ID0gY3JlYXRlXzEuZGVmYXVsdChkZWZhdWx0cyk7XG5leHBvcnRzLmRlZmF1bHQgPSBnb3Q7XG4vLyBGb3IgQ29tbW9uSlMgZGVmYXVsdCBleHBvcnQgc3VwcG9ydFxubW9kdWxlLmV4cG9ydHMgPSBnb3Q7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZ290O1xubW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IC8vIFdvcmthcm91bmQgZm9yIFRTIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2dvdC9wdWxsLzEyNjdcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jcmVhdGVcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2FzLXByb21pc2VcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbIl9fY3JlYXRlQmluZGluZyIsIk9iamVjdCIsImNyZWF0ZSIsIm8iLCJtIiwiayIsImsyIiwidW5kZWZpbmVkIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX19leHBvcnRTdGFyIiwiZXhwb3J0cyIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJ2YWx1ZSIsInVybF8xIiwicmVxdWlyZSIsImNyZWF0ZV8xIiwiZGVmYXVsdHMiLCJvcHRpb25zIiwibWV0aG9kIiwicmV0cnkiLCJsaW1pdCIsIm1ldGhvZHMiLCJzdGF0dXNDb2RlcyIsImVycm9yQ29kZXMiLCJtYXhSZXRyeUFmdGVyIiwiY2FsY3VsYXRlRGVsYXkiLCJjb21wdXRlZFZhbHVlIiwidGltZW91dCIsImhlYWRlcnMiLCJob29rcyIsImluaXQiLCJiZWZvcmVSZXF1ZXN0IiwiYmVmb3JlUmVkaXJlY3QiLCJiZWZvcmVSZXRyeSIsImJlZm9yZUVycm9yIiwiYWZ0ZXJSZXNwb25zZSIsImNhY2hlIiwiZG5zQ2FjaGUiLCJkZWNvbXByZXNzIiwidGhyb3dIdHRwRXJyb3JzIiwiZm9sbG93UmVkaXJlY3QiLCJpc1N0cmVhbSIsInJlc3BvbnNlVHlwZSIsInJlc29sdmVCb2R5T25seSIsIm1heFJlZGlyZWN0cyIsInByZWZpeFVybCIsIm1ldGhvZFJld3JpdGluZyIsImlnbm9yZUludmFsaWRDb29raWVzIiwiY29udGV4dCIsImh0dHAyIiwiYWxsb3dHZXRCb2R5IiwiaHR0cHMiLCJwYWdpbmF0aW9uIiwidHJhbnNmb3JtIiwicmVzcG9uc2UiLCJyZXF1ZXN0IiwiYm9keSIsIkpTT04iLCJwYXJzZSIsInBhZ2luYXRlIiwiUmVmbGVjdCIsImhhcyIsIml0ZW1zIiwibGluayIsInNwbGl0IiwibmV4dCIsIml0ZW0iLCJwYXJzZWQiLCJpbmNsdWRlcyIsInRyaW1TdGFydCIsInRyaW0iLCJzbGljZSIsInVybCIsIlVSTCIsImZpbHRlciIsInNob3VsZENvbnRpbnVlIiwiY291bnRMaW1pdCIsIkluZmluaXR5IiwiYmFja29mZiIsInJlcXVlc3RMaW1pdCIsInN0YWNrQWxsSXRlbXMiLCJwYXJzZUpzb24iLCJ0ZXh0Iiwic3RyaW5naWZ5SnNvbiIsIm9iamVjdCIsInN0cmluZ2lmeSIsImNhY2hlT3B0aW9ucyIsImhhbmRsZXJzIiwiZGVmYXVsdEhhbmRsZXIiLCJtdXRhYmxlRGVmYXVsdHMiLCJnb3QiLCJkZWZhdWx0IiwibW9kdWxlIiwiX19lc01vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/types.js":
/*!**************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/types.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZnVsbC8uL25vZGVfbW9kdWxlcy9ub3Rpb24tY2xpZW50L25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvdHlwZXMuanM/NjkyNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/utils/deep-freeze.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/utils/deep-freeze.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\nfunction deepFreeze(object) {\n    for (const value of Object.values(object)){\n        if (is_1.default.plainObject(value) || is_1.default.array(value)) {\n            deepFreeze(value);\n        }\n    }\n    return Object.freeze(object);\n}\nexports[\"default\"] = deepFreeze;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL3V0aWxzL2RlZXAtZnJlZXplLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLE9BQU9DLG1CQUFPQSxDQUFDLDZFQUFrQjtBQUN2QyxTQUFTQyxXQUFXQyxNQUFNO0lBQ3RCLEtBQUssTUFBTUosU0FBU0gsT0FBT1EsTUFBTSxDQUFDRCxRQUFTO1FBQ3ZDLElBQUlILEtBQUtLLE9BQU8sQ0FBQ0MsV0FBVyxDQUFDUCxVQUFVQyxLQUFLSyxPQUFPLENBQUNFLEtBQUssQ0FBQ1IsUUFBUTtZQUM5REcsV0FBV0g7UUFDZjtJQUNKO0lBQ0EsT0FBT0gsT0FBT1ksTUFBTSxDQUFDTDtBQUN6QjtBQUNBTCxrQkFBZSxHQUFHSSIsInNvdXJjZXMiOlsid2VicGFjazovL25vdGlvbi14LWZ1bGwvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL3V0aWxzL2RlZXAtZnJlZXplLmpzPzg0ZDIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBpc18xID0gcmVxdWlyZShcIkBzaW5kcmVzb3JodXMvaXNcIik7XG5mdW5jdGlvbiBkZWVwRnJlZXplKG9iamVjdCkge1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgT2JqZWN0LnZhbHVlcyhvYmplY3QpKSB7XG4gICAgICAgIGlmIChpc18xLmRlZmF1bHQucGxhaW5PYmplY3QodmFsdWUpIHx8IGlzXzEuZGVmYXVsdC5hcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGRlZXBGcmVlemUodmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuZnJlZXplKG9iamVjdCk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBkZWVwRnJlZXplO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNfMSIsInJlcXVpcmUiLCJkZWVwRnJlZXplIiwib2JqZWN0IiwidmFsdWVzIiwiZGVmYXVsdCIsInBsYWluT2JqZWN0IiwiYXJyYXkiLCJmcmVlemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/utils/deep-freeze.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/utils/deprecation-warning.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/utils/deprecation-warning.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst alreadyWarned = new Set();\nexports[\"default\"] = (message)=>{\n    if (alreadyWarned.has(message)) {\n        return;\n    }\n    alreadyWarned.add(message);\n    // @ts-expect-error Missing types.\n    process.emitWarning(`Got: ${message}`, {\n        type: \"DeprecationWarning\"\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL3V0aWxzL2RlcHJlY2F0aW9uLXdhcm5pbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsZ0JBQWdCLElBQUlDO0FBQzFCSCxrQkFBZSxHQUFHLENBQUNLO0lBQ2YsSUFBSUgsY0FBY0ksR0FBRyxDQUFDRCxVQUFVO1FBQzVCO0lBQ0o7SUFDQUgsY0FBY0ssR0FBRyxDQUFDRjtJQUNsQixrQ0FBa0M7SUFDbENHLFFBQVFDLFdBQVcsQ0FBQyxDQUFDLEtBQUssRUFBRUosUUFBUSxDQUFDLEVBQUU7UUFDbkNLLE1BQU07SUFDVjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZnVsbC8uL25vZGVfbW9kdWxlcy9ub3Rpb24tY2xpZW50L25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvdXRpbHMvZGVwcmVjYXRpb24td2FybmluZy5qcz8wOTg5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgYWxyZWFkeVdhcm5lZCA9IG5ldyBTZXQoKTtcbmV4cG9ydHMuZGVmYXVsdCA9IChtZXNzYWdlKSA9PiB7XG4gICAgaWYgKGFscmVhZHlXYXJuZWQuaGFzKG1lc3NhZ2UpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYWxyZWFkeVdhcm5lZC5hZGQobWVzc2FnZSk7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBNaXNzaW5nIHR5cGVzLlxuICAgIHByb2Nlc3MuZW1pdFdhcm5pbmcoYEdvdDogJHttZXNzYWdlfWAsIHtcbiAgICAgICAgdHlwZTogJ0RlcHJlY2F0aW9uV2FybmluZydcbiAgICB9KTtcbn07XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJhbHJlYWR5V2FybmVkIiwiU2V0IiwiZGVmYXVsdCIsIm1lc3NhZ2UiLCJoYXMiLCJhZGQiLCJwcm9jZXNzIiwiZW1pdFdhcm5pbmciLCJ0eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/utils/deprecation-warning.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/agent.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/http2-wrapper/source/agent.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst QuickLRU = __webpack_require__(/*! quick-lru */ \"(rsc)/./node_modules/quick-lru/index.js\");\nconst kCurrentStreamsCount = Symbol(\"currentStreamsCount\");\nconst kRequest = Symbol(\"request\");\nconst kOriginSet = Symbol(\"cachedOriginSet\");\nconst kGracefullyClosing = Symbol(\"gracefullyClosing\");\nconst nameKeys = [\n    // `http2.connect()` options\n    \"maxDeflateDynamicTableSize\",\n    \"maxSessionMemory\",\n    \"maxHeaderListPairs\",\n    \"maxOutstandingPings\",\n    \"maxReservedRemoteStreams\",\n    \"maxSendHeaderBlockLength\",\n    \"paddingStrategy\",\n    // `tls.connect()` options\n    \"localAddress\",\n    \"path\",\n    \"rejectUnauthorized\",\n    \"minDHSize\",\n    // `tls.createSecureContext()` options\n    \"ca\",\n    \"cert\",\n    \"clientCertEngine\",\n    \"ciphers\",\n    \"key\",\n    \"pfx\",\n    \"servername\",\n    \"minVersion\",\n    \"maxVersion\",\n    \"secureProtocol\",\n    \"crl\",\n    \"honorCipherOrder\",\n    \"ecdhCurve\",\n    \"dhparam\",\n    \"secureOptions\",\n    \"sessionIdContext\"\n];\nconst getSortedIndex = (array, value, compare)=>{\n    let low = 0;\n    let high = array.length;\n    while(low < high){\n        const mid = low + high >>> 1;\n        /* istanbul ignore next */ if (compare(array[mid], value)) {\n            // This never gets called because we use descending sort. Better to have this anyway.\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n};\nconst compareSessions = (a, b)=>{\n    return a.remoteSettings.maxConcurrentStreams > b.remoteSettings.maxConcurrentStreams;\n};\n// See https://tools.ietf.org/html/rfc8336\nconst closeCoveredSessions = (where, session)=>{\n    // Clients SHOULD NOT emit new requests on any connection whose Origin\n    // Set is a proper subset of another connection's Origin Set, and they\n    // SHOULD close it once all outstanding requests are satisfied.\n    for (const coveredSession of where){\n        if (// The set is a proper subset when its length is less than the other set.\n        coveredSession[kOriginSet].length < session[kOriginSet].length && // And the other set includes all elements of the subset.\n        coveredSession[kOriginSet].every((origin)=>session[kOriginSet].includes(origin)) && // Makes sure that the session can handle all requests from the covered session.\n        coveredSession[kCurrentStreamsCount] + session[kCurrentStreamsCount] <= session.remoteSettings.maxConcurrentStreams) {\n            // This allows pending requests to finish and prevents making new requests.\n            gracefullyClose(coveredSession);\n        }\n    }\n};\n// This is basically inverted `closeCoveredSessions(...)`.\nconst closeSessionIfCovered = (where, coveredSession)=>{\n    for (const session of where){\n        if (coveredSession[kOriginSet].length < session[kOriginSet].length && coveredSession[kOriginSet].every((origin)=>session[kOriginSet].includes(origin)) && coveredSession[kCurrentStreamsCount] + session[kCurrentStreamsCount] <= session.remoteSettings.maxConcurrentStreams) {\n            gracefullyClose(coveredSession);\n        }\n    }\n};\nconst getSessions = ({ agent, isFree })=>{\n    const result = {};\n    // eslint-disable-next-line guard-for-in\n    for(const normalizedOptions in agent.sessions){\n        const sessions = agent.sessions[normalizedOptions];\n        const filtered = sessions.filter((session)=>{\n            const result = session[Agent.kCurrentStreamsCount] < session.remoteSettings.maxConcurrentStreams;\n            return isFree ? result : !result;\n        });\n        if (filtered.length !== 0) {\n            result[normalizedOptions] = filtered;\n        }\n    }\n    return result;\n};\nconst gracefullyClose = (session)=>{\n    session[kGracefullyClosing] = true;\n    if (session[kCurrentStreamsCount] === 0) {\n        session.close();\n    }\n};\nclass Agent extends EventEmitter {\n    constructor({ timeout = 60000, maxSessions = Infinity, maxFreeSessions = 10, maxCachedTlsSessions = 100 } = {}){\n        super();\n        // A session is considered busy when its current streams count\n        // is equal to or greater than the `maxConcurrentStreams` value.\n        // A session is considered free when its current streams count\n        // is less than the `maxConcurrentStreams` value.\n        // SESSIONS[NORMALIZED_OPTIONS] = [];\n        this.sessions = {};\n        // The queue for creating new sessions. It looks like this:\n        // QUEUE[NORMALIZED_OPTIONS][NORMALIZED_ORIGIN] = ENTRY_FUNCTION\n        //\n        // The entry function has `listeners`, `completed` and `destroyed` properties.\n        // `listeners` is an array of objects containing `resolve` and `reject` functions.\n        // `completed` is a boolean. It's set to true after ENTRY_FUNCTION is executed.\n        // `destroyed` is a boolean. If it's set to true, the session will be destroyed if hasn't connected yet.\n        this.queue = {};\n        // Each session will use this timeout value.\n        this.timeout = timeout;\n        // Max sessions in total\n        this.maxSessions = maxSessions;\n        // Max free sessions in total\n        // TODO: decreasing `maxFreeSessions` should close some sessions\n        this.maxFreeSessions = maxFreeSessions;\n        this._freeSessionsCount = 0;\n        this._sessionsCount = 0;\n        // We don't support push streams by default.\n        this.settings = {\n            enablePush: false\n        };\n        // Reusing TLS sessions increases performance.\n        this.tlsSessionCache = new QuickLRU({\n            maxSize: maxCachedTlsSessions\n        });\n    }\n    static normalizeOrigin(url, servername) {\n        if (typeof url === \"string\") {\n            url = new URL(url);\n        }\n        if (servername && url.hostname !== servername) {\n            url.hostname = servername;\n        }\n        return url.origin;\n    }\n    normalizeOptions(options) {\n        let normalized = \"\";\n        if (options) {\n            for (const key of nameKeys){\n                if (options[key]) {\n                    normalized += `:${options[key]}`;\n                }\n            }\n        }\n        return normalized;\n    }\n    _tryToCreateNewSession(normalizedOptions, normalizedOrigin) {\n        if (!(normalizedOptions in this.queue) || !(normalizedOrigin in this.queue[normalizedOptions])) {\n            return;\n        }\n        const item = this.queue[normalizedOptions][normalizedOrigin];\n        // The entry function can be run only once.\n        // BUG: The session may be never created when:\n        // - the first condition is false AND\n        // - this function is never called with the same arguments in the future.\n        if (this._sessionsCount < this.maxSessions && !item.completed) {\n            item.completed = true;\n            item();\n        }\n    }\n    getSession(origin, options, listeners) {\n        return new Promise((resolve, reject)=>{\n            if (Array.isArray(listeners)) {\n                listeners = [\n                    ...listeners\n                ];\n                // Resolve the current promise ASAP, we're just moving the listeners.\n                // They will be executed at a different time.\n                resolve();\n            } else {\n                listeners = [\n                    {\n                        resolve,\n                        reject\n                    }\n                ];\n            }\n            const normalizedOptions = this.normalizeOptions(options);\n            const normalizedOrigin = Agent.normalizeOrigin(origin, options && options.servername);\n            if (normalizedOrigin === undefined) {\n                for (const { reject } of listeners){\n                    reject(new TypeError(\"The `origin` argument needs to be a string or an URL object\"));\n                }\n                return;\n            }\n            if (normalizedOptions in this.sessions) {\n                const sessions = this.sessions[normalizedOptions];\n                let maxConcurrentStreams = -1;\n                let currentStreamsCount = -1;\n                let optimalSession;\n                // We could just do this.sessions[normalizedOptions].find(...) but that isn't optimal.\n                // Additionally, we are looking for session which has biggest current pending streams count.\n                for (const session of sessions){\n                    const sessionMaxConcurrentStreams = session.remoteSettings.maxConcurrentStreams;\n                    if (sessionMaxConcurrentStreams < maxConcurrentStreams) {\n                        break;\n                    }\n                    if (session[kOriginSet].includes(normalizedOrigin)) {\n                        const sessionCurrentStreamsCount = session[kCurrentStreamsCount];\n                        if (sessionCurrentStreamsCount >= sessionMaxConcurrentStreams || session[kGracefullyClosing] || // Unfortunately the `close` event isn't called immediately,\n                        // so `session.destroyed` is `true`, but `session.closed` is `false`.\n                        session.destroyed) {\n                            continue;\n                        }\n                        // We only need set this once.\n                        if (!optimalSession) {\n                            maxConcurrentStreams = sessionMaxConcurrentStreams;\n                        }\n                        // We're looking for the session which has biggest current pending stream count,\n                        // in order to minimalize the amount of active sessions.\n                        if (sessionCurrentStreamsCount > currentStreamsCount) {\n                            optimalSession = session;\n                            currentStreamsCount = sessionCurrentStreamsCount;\n                        }\n                    }\n                }\n                if (optimalSession) {\n                    /* istanbul ignore next: safety check */ if (listeners.length !== 1) {\n                        for (const { reject } of listeners){\n                            const error = new Error(`Expected the length of listeners to be 1, got ${listeners.length}.\\n` + \"Please report this to https://github.com/szmarczak/http2-wrapper/\");\n                            reject(error);\n                        }\n                        return;\n                    }\n                    listeners[0].resolve(optimalSession);\n                    return;\n                }\n            }\n            if (normalizedOptions in this.queue) {\n                if (normalizedOrigin in this.queue[normalizedOptions]) {\n                    // There's already an item in the queue, just attach ourselves to it.\n                    this.queue[normalizedOptions][normalizedOrigin].listeners.push(...listeners);\n                    // This shouldn't be executed here.\n                    // See the comment inside _tryToCreateNewSession.\n                    this._tryToCreateNewSession(normalizedOptions, normalizedOrigin);\n                    return;\n                }\n            } else {\n                this.queue[normalizedOptions] = {};\n            }\n            // The entry must be removed from the queue IMMEDIATELY when:\n            // 1. the session connects successfully,\n            // 2. an error occurs.\n            const removeFromQueue = ()=>{\n                // Our entry can be replaced. We cannot remove the new one.\n                if (normalizedOptions in this.queue && this.queue[normalizedOptions][normalizedOrigin] === entry) {\n                    delete this.queue[normalizedOptions][normalizedOrigin];\n                    if (Object.keys(this.queue[normalizedOptions]).length === 0) {\n                        delete this.queue[normalizedOptions];\n                    }\n                }\n            };\n            // The main logic is here\n            const entry = ()=>{\n                const name = `${normalizedOrigin}:${normalizedOptions}`;\n                let receivedSettings = false;\n                try {\n                    const session = http2.connect(origin, {\n                        createConnection: this.createConnection,\n                        settings: this.settings,\n                        session: this.tlsSessionCache.get(name),\n                        ...options\n                    });\n                    session[kCurrentStreamsCount] = 0;\n                    session[kGracefullyClosing] = false;\n                    const isFree = ()=>session[kCurrentStreamsCount] < session.remoteSettings.maxConcurrentStreams;\n                    let wasFree = true;\n                    session.socket.once(\"session\", (tlsSession)=>{\n                        this.tlsSessionCache.set(name, tlsSession);\n                    });\n                    session.once(\"error\", (error)=>{\n                        // Listeners are empty when the session successfully connected.\n                        for (const { reject } of listeners){\n                            reject(error);\n                        }\n                        // The connection got broken, purge the cache.\n                        this.tlsSessionCache.delete(name);\n                    });\n                    session.setTimeout(this.timeout, ()=>{\n                        // Terminates all streams owned by this session.\n                        // TODO: Maybe the streams should have a \"Session timed out\" error?\n                        session.destroy();\n                    });\n                    session.once(\"close\", ()=>{\n                        if (receivedSettings) {\n                            // 1. If it wasn't free then no need to decrease because\n                            //    it has been decreased already in session.request().\n                            // 2. `stream.once('close')` won't increment the count\n                            //    because the session is already closed.\n                            if (wasFree) {\n                                this._freeSessionsCount--;\n                            }\n                            this._sessionsCount--;\n                            // This cannot be moved to the stream logic,\n                            // because there may be a session that hadn't made a single request.\n                            const where = this.sessions[normalizedOptions];\n                            where.splice(where.indexOf(session), 1);\n                            if (where.length === 0) {\n                                delete this.sessions[normalizedOptions];\n                            }\n                        } else {\n                            // Broken connection\n                            const error = new Error(\"Session closed without receiving a SETTINGS frame\");\n                            error.code = \"HTTP2WRAPPER_NOSETTINGS\";\n                            for (const { reject } of listeners){\n                                reject(error);\n                            }\n                            removeFromQueue();\n                        }\n                        // There may be another session awaiting.\n                        this._tryToCreateNewSession(normalizedOptions, normalizedOrigin);\n                    });\n                    // Iterates over the queue and processes listeners.\n                    const processListeners = ()=>{\n                        if (!(normalizedOptions in this.queue) || !isFree()) {\n                            return;\n                        }\n                        for (const origin of session[kOriginSet]){\n                            if (origin in this.queue[normalizedOptions]) {\n                                const { listeners } = this.queue[normalizedOptions][origin];\n                                // Prevents session overloading.\n                                while(listeners.length !== 0 && isFree()){\n                                    // We assume `resolve(...)` calls `request(...)` *directly*,\n                                    // otherwise the session will get overloaded.\n                                    listeners.shift().resolve(session);\n                                }\n                                const where = this.queue[normalizedOptions];\n                                if (where[origin].listeners.length === 0) {\n                                    delete where[origin];\n                                    if (Object.keys(where).length === 0) {\n                                        delete this.queue[normalizedOptions];\n                                        break;\n                                    }\n                                }\n                                // We're no longer free, no point in continuing.\n                                if (!isFree()) {\n                                    break;\n                                }\n                            }\n                        }\n                    };\n                    // The Origin Set cannot shrink. No need to check if it suddenly became covered by another one.\n                    session.on(\"origin\", ()=>{\n                        session[kOriginSet] = session.originSet;\n                        if (!isFree()) {\n                            // The session is full.\n                            return;\n                        }\n                        processListeners();\n                        // Close covered sessions (if possible).\n                        closeCoveredSessions(this.sessions[normalizedOptions], session);\n                    });\n                    session.once(\"remoteSettings\", ()=>{\n                        // Fix Node.js bug preventing the process from exiting\n                        session.ref();\n                        session.unref();\n                        this._sessionsCount++;\n                        // The Agent could have been destroyed already.\n                        if (entry.destroyed) {\n                            const error = new Error(\"Agent has been destroyed\");\n                            for (const listener of listeners){\n                                listener.reject(error);\n                            }\n                            session.destroy();\n                            return;\n                        }\n                        session[kOriginSet] = session.originSet;\n                        {\n                            const where = this.sessions;\n                            if (normalizedOptions in where) {\n                                const sessions = where[normalizedOptions];\n                                sessions.splice(getSortedIndex(sessions, session, compareSessions), 0, session);\n                            } else {\n                                where[normalizedOptions] = [\n                                    session\n                                ];\n                            }\n                        }\n                        this._freeSessionsCount += 1;\n                        receivedSettings = true;\n                        this.emit(\"session\", session);\n                        processListeners();\n                        removeFromQueue();\n                        // TODO: Close last recently used (or least used?) session\n                        if (session[kCurrentStreamsCount] === 0 && this._freeSessionsCount > this.maxFreeSessions) {\n                            session.close();\n                        }\n                        // Check if we haven't managed to execute all listeners.\n                        if (listeners.length !== 0) {\n                            // Request for a new session with predefined listeners.\n                            this.getSession(normalizedOrigin, options, listeners);\n                            listeners.length = 0;\n                        }\n                        // `session.remoteSettings.maxConcurrentStreams` might get increased\n                        session.on(\"remoteSettings\", ()=>{\n                            processListeners();\n                            // In case the Origin Set changes\n                            closeCoveredSessions(this.sessions[normalizedOptions], session);\n                        });\n                    });\n                    // Shim `session.request()` in order to catch all streams\n                    session[kRequest] = session.request;\n                    session.request = (headers, streamOptions)=>{\n                        if (session[kGracefullyClosing]) {\n                            throw new Error(\"The session is gracefully closing. No new streams are allowed.\");\n                        }\n                        const stream = session[kRequest](headers, streamOptions);\n                        // The process won't exit until the session is closed or all requests are gone.\n                        session.ref();\n                        ++session[kCurrentStreamsCount];\n                        if (session[kCurrentStreamsCount] === session.remoteSettings.maxConcurrentStreams) {\n                            this._freeSessionsCount--;\n                        }\n                        stream.once(\"close\", ()=>{\n                            wasFree = isFree();\n                            --session[kCurrentStreamsCount];\n                            if (!session.destroyed && !session.closed) {\n                                closeSessionIfCovered(this.sessions[normalizedOptions], session);\n                                if (isFree() && !session.closed) {\n                                    if (!wasFree) {\n                                        this._freeSessionsCount++;\n                                        wasFree = true;\n                                    }\n                                    const isEmpty = session[kCurrentStreamsCount] === 0;\n                                    if (isEmpty) {\n                                        session.unref();\n                                    }\n                                    if (isEmpty && (this._freeSessionsCount > this.maxFreeSessions || session[kGracefullyClosing])) {\n                                        session.close();\n                                    } else {\n                                        closeCoveredSessions(this.sessions[normalizedOptions], session);\n                                        processListeners();\n                                    }\n                                }\n                            }\n                        });\n                        return stream;\n                    };\n                } catch (error) {\n                    for (const listener of listeners){\n                        listener.reject(error);\n                    }\n                    removeFromQueue();\n                }\n            };\n            entry.listeners = listeners;\n            entry.completed = false;\n            entry.destroyed = false;\n            this.queue[normalizedOptions][normalizedOrigin] = entry;\n            this._tryToCreateNewSession(normalizedOptions, normalizedOrigin);\n        });\n    }\n    request(origin, options, headers, streamOptions) {\n        return new Promise((resolve, reject)=>{\n            this.getSession(origin, options, [\n                {\n                    reject,\n                    resolve: (session)=>{\n                        try {\n                            resolve(session.request(headers, streamOptions));\n                        } catch (error) {\n                            reject(error);\n                        }\n                    }\n                }\n            ]);\n        });\n    }\n    createConnection(origin, options) {\n        return Agent.connect(origin, options);\n    }\n    static connect(origin, options) {\n        options.ALPNProtocols = [\n            \"h2\"\n        ];\n        const port = origin.port || 443;\n        const host = origin.hostname || origin.host;\n        if (typeof options.servername === \"undefined\") {\n            options.servername = host;\n        }\n        return tls.connect(port, host, options);\n    }\n    closeFreeSessions() {\n        for (const sessions of Object.values(this.sessions)){\n            for (const session of sessions){\n                if (session[kCurrentStreamsCount] === 0) {\n                    session.close();\n                }\n            }\n        }\n    }\n    destroy(reason) {\n        for (const sessions of Object.values(this.sessions)){\n            for (const session of sessions){\n                session.destroy(reason);\n            }\n        }\n        for (const entriesOfAuthority of Object.values(this.queue)){\n            for (const entry of Object.values(entriesOfAuthority)){\n                entry.destroyed = true;\n            }\n        }\n        // New requests should NOT attach to destroyed sessions\n        this.queue = {};\n    }\n    get freeSessions() {\n        return getSessions({\n            agent: this,\n            isFree: true\n        });\n    }\n    get busySessions() {\n        return getSessions({\n            agent: this,\n            isFree: false\n        });\n    }\n}\nAgent.kCurrentStreamsCount = kCurrentStreamsCount;\nAgent.kGracefullyClosing = kGracefullyClosing;\nmodule.exports = {\n    Agent,\n    globalAgent: new Agent()\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/agent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/auto.js":
/*!******************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/http2-wrapper/source/auto.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst resolveALPN = __webpack_require__(/*! resolve-alpn */ \"(rsc)/./node_modules/resolve-alpn/index.js\");\nconst QuickLRU = __webpack_require__(/*! quick-lru */ \"(rsc)/./node_modules/quick-lru/index.js\");\nconst Http2ClientRequest = __webpack_require__(/*! ./client-request */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/client-request.js\");\nconst calculateServerName = __webpack_require__(/*! ./utils/calculate-server-name */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/calculate-server-name.js\");\nconst urlToOptions = __webpack_require__(/*! ./utils/url-to-options */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/url-to-options.js\");\nconst cache = new QuickLRU({\n    maxSize: 100\n});\nconst queue = new Map();\nconst installSocket = (agent, socket, options)=>{\n    socket._httpMessage = {\n        shouldKeepAlive: true\n    };\n    const onFree = ()=>{\n        agent.emit(\"free\", socket, options);\n    };\n    socket.on(\"free\", onFree);\n    const onClose = ()=>{\n        agent.removeSocket(socket, options);\n    };\n    socket.on(\"close\", onClose);\n    const onRemove = ()=>{\n        agent.removeSocket(socket, options);\n        socket.off(\"close\", onClose);\n        socket.off(\"free\", onFree);\n        socket.off(\"agentRemove\", onRemove);\n    };\n    socket.on(\"agentRemove\", onRemove);\n    agent.emit(\"free\", socket, options);\n};\nconst resolveProtocol = async (options)=>{\n    const name = `${options.host}:${options.port}:${options.ALPNProtocols.sort()}`;\n    if (!cache.has(name)) {\n        if (queue.has(name)) {\n            const result = await queue.get(name);\n            return result.alpnProtocol;\n        }\n        const { path, agent } = options;\n        options.path = options.socketPath;\n        const resultPromise = resolveALPN(options);\n        queue.set(name, resultPromise);\n        try {\n            const { socket, alpnProtocol } = await resultPromise;\n            cache.set(name, alpnProtocol);\n            options.path = path;\n            if (alpnProtocol === \"h2\") {\n                // https://github.com/nodejs/node/issues/33343\n                socket.destroy();\n            } else {\n                const { globalAgent } = https;\n                const defaultCreateConnection = https.Agent.prototype.createConnection;\n                if (agent) {\n                    if (agent.createConnection === defaultCreateConnection) {\n                        installSocket(agent, socket, options);\n                    } else {\n                        socket.destroy();\n                    }\n                } else if (globalAgent.createConnection === defaultCreateConnection) {\n                    installSocket(globalAgent, socket, options);\n                } else {\n                    socket.destroy();\n                }\n            }\n            queue.delete(name);\n            return alpnProtocol;\n        } catch (error) {\n            queue.delete(name);\n            throw error;\n        }\n    }\n    return cache.get(name);\n};\nmodule.exports = async (input, options, callback)=>{\n    if (typeof input === \"string\" || input instanceof URL) {\n        input = urlToOptions(new URL(input));\n    }\n    if (typeof options === \"function\") {\n        callback = options;\n        options = undefined;\n    }\n    options = {\n        ALPNProtocols: [\n            \"h2\",\n            \"http/1.1\"\n        ],\n        ...input,\n        ...options,\n        resolveSocket: true\n    };\n    if (!Array.isArray(options.ALPNProtocols) || options.ALPNProtocols.length === 0) {\n        throw new Error(\"The `ALPNProtocols` option must be an Array with at least one entry\");\n    }\n    options.protocol = options.protocol || \"https:\";\n    const isHttps = options.protocol === \"https:\";\n    options.host = options.hostname || options.host || \"localhost\";\n    options.session = options.tlsSession;\n    options.servername = options.servername || calculateServerName(options);\n    options.port = options.port || (isHttps ? 443 : 80);\n    options._defaultAgent = isHttps ? https.globalAgent : http.globalAgent;\n    const agents = options.agent;\n    if (agents) {\n        if (agents.addRequest) {\n            throw new Error(\"The `options.agent` object can contain only `http`, `https` or `http2` properties\");\n        }\n        options.agent = agents[isHttps ? \"https\" : \"http\"];\n    }\n    if (isHttps) {\n        const protocol = await resolveProtocol(options);\n        if (protocol === \"h2\") {\n            if (agents) {\n                options.agent = agents.http2;\n            }\n            return new Http2ClientRequest(options, callback);\n        }\n    }\n    return http.request(options, callback);\n};\nmodule.exports.protocolCache = cache;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/auto.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/client-request.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/http2-wrapper/source/client-request.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst { Writable } = __webpack_require__(/*! stream */ \"stream\");\nconst { Agent, globalAgent } = __webpack_require__(/*! ./agent */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/agent.js\");\nconst IncomingMessage = __webpack_require__(/*! ./incoming-message */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/incoming-message.js\");\nconst urlToOptions = __webpack_require__(/*! ./utils/url-to-options */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/url-to-options.js\");\nconst proxyEvents = __webpack_require__(/*! ./utils/proxy-events */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/proxy-events.js\");\nconst isRequestPseudoHeader = __webpack_require__(/*! ./utils/is-request-pseudo-header */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/is-request-pseudo-header.js\");\nconst { ERR_INVALID_ARG_TYPE, ERR_INVALID_PROTOCOL, ERR_HTTP_HEADERS_SENT, ERR_INVALID_HTTP_TOKEN, ERR_HTTP_INVALID_HEADER_VALUE, ERR_INVALID_CHAR } = __webpack_require__(/*! ./utils/errors */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/errors.js\");\nconst { HTTP2_HEADER_STATUS, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_METHOD_CONNECT } = http2.constants;\nconst kHeaders = Symbol(\"headers\");\nconst kOrigin = Symbol(\"origin\");\nconst kSession = Symbol(\"session\");\nconst kOptions = Symbol(\"options\");\nconst kFlushedHeaders = Symbol(\"flushedHeaders\");\nconst kJobs = Symbol(\"jobs\");\nconst isValidHttpToken = /^[\\^`\\-\\w!#$%&*+.|~]+$/;\nconst isInvalidHeaderValue = /[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/;\nclass ClientRequest extends Writable {\n    constructor(input, options, callback){\n        super({\n            autoDestroy: false\n        });\n        const hasInput = typeof input === \"string\" || input instanceof URL;\n        if (hasInput) {\n            input = urlToOptions(input instanceof URL ? input : new URL(input));\n        }\n        if (typeof options === \"function\" || options === undefined) {\n            // (options, callback)\n            callback = options;\n            options = hasInput ? input : {\n                ...input\n            };\n        } else {\n            // (input, options, callback)\n            options = {\n                ...input,\n                ...options\n            };\n        }\n        if (options.h2session) {\n            this[kSession] = options.h2session;\n        } else if (options.agent === false) {\n            this.agent = new Agent({\n                maxFreeSessions: 0\n            });\n        } else if (typeof options.agent === \"undefined\" || options.agent === null) {\n            if (typeof options.createConnection === \"function\") {\n                // This is a workaround - we don't have to create the session on our own.\n                this.agent = new Agent({\n                    maxFreeSessions: 0\n                });\n                this.agent.createConnection = options.createConnection;\n            } else {\n                this.agent = globalAgent;\n            }\n        } else if (typeof options.agent.request === \"function\") {\n            this.agent = options.agent;\n        } else {\n            throw new ERR_INVALID_ARG_TYPE(\"options.agent\", [\n                \"Agent-like Object\",\n                \"undefined\",\n                \"false\"\n            ], options.agent);\n        }\n        if (options.protocol && options.protocol !== \"https:\") {\n            throw new ERR_INVALID_PROTOCOL(options.protocol, \"https:\");\n        }\n        const port = options.port || options.defaultPort || this.agent && this.agent.defaultPort || 443;\n        const host = options.hostname || options.host || \"localhost\";\n        // Don't enforce the origin via options. It may be changed in an Agent.\n        delete options.hostname;\n        delete options.host;\n        delete options.port;\n        const { timeout } = options;\n        options.timeout = undefined;\n        this[kHeaders] = Object.create(null);\n        this[kJobs] = [];\n        this.socket = null;\n        this.connection = null;\n        this.method = options.method || \"GET\";\n        this.path = options.path;\n        this.res = null;\n        this.aborted = false;\n        this.reusedSocket = false;\n        if (options.headers) {\n            for (const [header, value] of Object.entries(options.headers)){\n                this.setHeader(header, value);\n            }\n        }\n        if (options.auth && !(\"authorization\" in this[kHeaders])) {\n            this[kHeaders].authorization = \"Basic \" + Buffer.from(options.auth).toString(\"base64\");\n        }\n        options.session = options.tlsSession;\n        options.path = options.socketPath;\n        this[kOptions] = options;\n        // Clients that generate HTTP/2 requests directly SHOULD use the :authority pseudo-header field instead of the Host header field.\n        if (port === 443) {\n            this[kOrigin] = `https://${host}`;\n            if (!(\":authority\" in this[kHeaders])) {\n                this[kHeaders][\":authority\"] = host;\n            }\n        } else {\n            this[kOrigin] = `https://${host}:${port}`;\n            if (!(\":authority\" in this[kHeaders])) {\n                this[kHeaders][\":authority\"] = `${host}:${port}`;\n            }\n        }\n        if (timeout) {\n            this.setTimeout(timeout);\n        }\n        if (callback) {\n            this.once(\"response\", callback);\n        }\n        this[kFlushedHeaders] = false;\n    }\n    get method() {\n        return this[kHeaders][HTTP2_HEADER_METHOD];\n    }\n    set method(value) {\n        if (value) {\n            this[kHeaders][HTTP2_HEADER_METHOD] = value.toUpperCase();\n        }\n    }\n    get path() {\n        return this[kHeaders][HTTP2_HEADER_PATH];\n    }\n    set path(value) {\n        if (value) {\n            this[kHeaders][HTTP2_HEADER_PATH] = value;\n        }\n    }\n    get _mustNotHaveABody() {\n        return this.method === \"GET\" || this.method === \"HEAD\" || this.method === \"DELETE\";\n    }\n    _write(chunk, encoding, callback) {\n        // https://github.com/nodejs/node/blob/654df09ae0c5e17d1b52a900a545f0664d8c7627/lib/internal/http2/util.js#L148-L156\n        if (this._mustNotHaveABody) {\n            callback(new Error(\"The GET, HEAD and DELETE methods must NOT have a body\"));\n            /* istanbul ignore next: Node.js 12 throws directly */ return;\n        }\n        this.flushHeaders();\n        const callWrite = ()=>this._request.write(chunk, encoding, callback);\n        if (this._request) {\n            callWrite();\n        } else {\n            this[kJobs].push(callWrite);\n        }\n    }\n    _final(callback) {\n        if (this.destroyed) {\n            return;\n        }\n        this.flushHeaders();\n        const callEnd = ()=>{\n            // For GET, HEAD and DELETE\n            if (this._mustNotHaveABody) {\n                callback();\n                return;\n            }\n            this._request.end(callback);\n        };\n        if (this._request) {\n            callEnd();\n        } else {\n            this[kJobs].push(callEnd);\n        }\n    }\n    abort() {\n        if (this.res && this.res.complete) {\n            return;\n        }\n        if (!this.aborted) {\n            process.nextTick(()=>this.emit(\"abort\"));\n        }\n        this.aborted = true;\n        this.destroy();\n    }\n    _destroy(error, callback) {\n        if (this.res) {\n            this.res._dump();\n        }\n        if (this._request) {\n            this._request.destroy();\n        }\n        callback(error);\n    }\n    async flushHeaders() {\n        if (this[kFlushedHeaders] || this.destroyed) {\n            return;\n        }\n        this[kFlushedHeaders] = true;\n        const isConnectMethod = this.method === HTTP2_METHOD_CONNECT;\n        // The real magic is here\n        const onStream = (stream)=>{\n            this._request = stream;\n            if (this.destroyed) {\n                stream.destroy();\n                return;\n            }\n            // Forwards `timeout`, `continue`, `close` and `error` events to this instance.\n            if (!isConnectMethod) {\n                proxyEvents(stream, this, [\n                    \"timeout\",\n                    \"continue\",\n                    \"close\",\n                    \"error\"\n                ]);\n            }\n            // Wait for the `finish` event. We don't want to emit the `response` event\n            // before `request.end()` is called.\n            const waitForEnd = (fn)=>{\n                return (...args)=>{\n                    if (!this.writable && !this.destroyed) {\n                        fn(...args);\n                    } else {\n                        this.once(\"finish\", ()=>{\n                            fn(...args);\n                        });\n                    }\n                };\n            };\n            // This event tells we are ready to listen for the data.\n            stream.once(\"response\", waitForEnd((headers, flags, rawHeaders)=>{\n                // If we were to emit raw request stream, it would be as fast as the native approach.\n                // Note that wrapping the raw stream in a Proxy instance won't improve the performance (already tested it).\n                const response = new IncomingMessage(this.socket, stream.readableHighWaterMark);\n                this.res = response;\n                response.req = this;\n                response.statusCode = headers[HTTP2_HEADER_STATUS];\n                response.headers = headers;\n                response.rawHeaders = rawHeaders;\n                response.once(\"end\", ()=>{\n                    if (this.aborted) {\n                        response.aborted = true;\n                        response.emit(\"aborted\");\n                    } else {\n                        response.complete = true;\n                        // Has no effect, just be consistent with the Node.js behavior\n                        response.socket = null;\n                        response.connection = null;\n                    }\n                });\n                if (isConnectMethod) {\n                    response.upgrade = true;\n                    // The HTTP1 API says the socket is detached here,\n                    // but we can't do that so we pass the original HTTP2 request.\n                    if (this.emit(\"connect\", response, stream, Buffer.alloc(0))) {\n                        this.emit(\"close\");\n                    } else {\n                        // No listeners attached, destroy the original request.\n                        stream.destroy();\n                    }\n                } else {\n                    // Forwards data\n                    stream.on(\"data\", (chunk)=>{\n                        if (!response._dumped && !response.push(chunk)) {\n                            stream.pause();\n                        }\n                    });\n                    stream.once(\"end\", ()=>{\n                        response.push(null);\n                    });\n                    if (!this.emit(\"response\", response)) {\n                        // No listeners attached, dump the response.\n                        response._dump();\n                    }\n                }\n            }));\n            // Emits `information` event\n            stream.once(\"headers\", waitForEnd((headers)=>this.emit(\"information\", {\n                    statusCode: headers[HTTP2_HEADER_STATUS]\n                })));\n            stream.once(\"trailers\", waitForEnd((trailers, flags, rawTrailers)=>{\n                const { res } = this;\n                // Assigns trailers to the response object.\n                res.trailers = trailers;\n                res.rawTrailers = rawTrailers;\n            }));\n            const { socket } = stream.session;\n            this.socket = socket;\n            this.connection = socket;\n            for (const job of this[kJobs]){\n                job();\n            }\n            this.emit(\"socket\", this.socket);\n        };\n        // Makes a HTTP2 request\n        if (this[kSession]) {\n            try {\n                onStream(this[kSession].request(this[kHeaders]));\n            } catch (error) {\n                this.emit(\"error\", error);\n            }\n        } else {\n            this.reusedSocket = true;\n            try {\n                onStream(await this.agent.request(this[kOrigin], this[kOptions], this[kHeaders]));\n            } catch (error) {\n                this.emit(\"error\", error);\n            }\n        }\n    }\n    getHeader(name) {\n        if (typeof name !== \"string\") {\n            throw new ERR_INVALID_ARG_TYPE(\"name\", \"string\", name);\n        }\n        return this[kHeaders][name.toLowerCase()];\n    }\n    get headersSent() {\n        return this[kFlushedHeaders];\n    }\n    removeHeader(name) {\n        if (typeof name !== \"string\") {\n            throw new ERR_INVALID_ARG_TYPE(\"name\", \"string\", name);\n        }\n        if (this.headersSent) {\n            throw new ERR_HTTP_HEADERS_SENT(\"remove\");\n        }\n        delete this[kHeaders][name.toLowerCase()];\n    }\n    setHeader(name, value) {\n        if (this.headersSent) {\n            throw new ERR_HTTP_HEADERS_SENT(\"set\");\n        }\n        if (typeof name !== \"string\" || !isValidHttpToken.test(name) && !isRequestPseudoHeader(name)) {\n            throw new ERR_INVALID_HTTP_TOKEN(\"Header name\", name);\n        }\n        if (typeof value === \"undefined\") {\n            throw new ERR_HTTP_INVALID_HEADER_VALUE(value, name);\n        }\n        if (isInvalidHeaderValue.test(value)) {\n            throw new ERR_INVALID_CHAR(\"header content\", name);\n        }\n        this[kHeaders][name.toLowerCase()] = value;\n    }\n    setNoDelay() {\n    // HTTP2 sockets cannot be malformed, do nothing.\n    }\n    setSocketKeepAlive() {\n    // HTTP2 sockets cannot be malformed, do nothing.\n    }\n    setTimeout(ms, callback) {\n        const applyTimeout = ()=>this._request.setTimeout(ms, callback);\n        if (this._request) {\n            applyTimeout();\n        } else {\n            this[kJobs].push(applyTimeout);\n        }\n        return this;\n    }\n    get maxHeadersCount() {\n        if (!this.destroyed && this._request) {\n            return this._request.session.localSettings.maxHeaderListSize;\n        }\n        return undefined;\n    }\n    set maxHeadersCount(_value) {\n    // Updating HTTP2 settings would affect all requests, do nothing.\n    }\n}\nmodule.exports = ClientRequest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/client-request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/incoming-message.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/http2-wrapper/source/incoming-message.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { Readable } = __webpack_require__(/*! stream */ \"stream\");\nclass IncomingMessage extends Readable {\n    constructor(socket, highWaterMark){\n        super({\n            highWaterMark,\n            autoDestroy: false\n        });\n        this.statusCode = null;\n        this.statusMessage = \"\";\n        this.httpVersion = \"2.0\";\n        this.httpVersionMajor = 2;\n        this.httpVersionMinor = 0;\n        this.headers = {};\n        this.trailers = {};\n        this.req = null;\n        this.aborted = false;\n        this.complete = false;\n        this.upgrade = null;\n        this.rawHeaders = [];\n        this.rawTrailers = [];\n        this.socket = socket;\n        this.connection = socket;\n        this._dumped = false;\n    }\n    _destroy(error) {\n        this.req._request.destroy(error);\n    }\n    setTimeout(ms, callback) {\n        this.req.setTimeout(ms, callback);\n        return this;\n    }\n    _dump() {\n        if (!this._dumped) {\n            this._dumped = true;\n            this.removeAllListeners(\"data\");\n            this.resume();\n        }\n    }\n    _read() {\n        if (this.req) {\n            this.req._request.resume();\n        }\n    }\n}\nmodule.exports = IncomingMessage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvaW5jb21pbmctbWVzc2FnZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU0sRUFBQ0EsUUFBUSxFQUFDLEdBQUdDLG1CQUFPQSxDQUFDO0FBRTNCLE1BQU1DLHdCQUF3QkY7SUFDN0JHLFlBQVlDLE1BQU0sRUFBRUMsYUFBYSxDQUFFO1FBQ2xDLEtBQUssQ0FBQztZQUNMQTtZQUNBQyxhQUFhO1FBQ2Q7UUFFQSxJQUFJLENBQUNDLFVBQVUsR0FBRztRQUNsQixJQUFJLENBQUNDLGFBQWEsR0FBRztRQUNyQixJQUFJLENBQUNDLFdBQVcsR0FBRztRQUNuQixJQUFJLENBQUNDLGdCQUFnQixHQUFHO1FBQ3hCLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUc7UUFDeEIsSUFBSSxDQUFDQyxPQUFPLEdBQUcsQ0FBQztRQUNoQixJQUFJLENBQUNDLFFBQVEsR0FBRyxDQUFDO1FBQ2pCLElBQUksQ0FBQ0MsR0FBRyxHQUFHO1FBRVgsSUFBSSxDQUFDQyxPQUFPLEdBQUc7UUFDZixJQUFJLENBQUNDLFFBQVEsR0FBRztRQUNoQixJQUFJLENBQUNDLE9BQU8sR0FBRztRQUVmLElBQUksQ0FBQ0MsVUFBVSxHQUFHLEVBQUU7UUFDcEIsSUFBSSxDQUFDQyxXQUFXLEdBQUcsRUFBRTtRQUVyQixJQUFJLENBQUNmLE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNnQixVQUFVLEdBQUdoQjtRQUVsQixJQUFJLENBQUNpQixPQUFPLEdBQUc7SUFDaEI7SUFFQUMsU0FBU0MsS0FBSyxFQUFFO1FBQ2YsSUFBSSxDQUFDVCxHQUFHLENBQUNVLFFBQVEsQ0FBQ0MsT0FBTyxDQUFDRjtJQUMzQjtJQUVBRyxXQUFXQyxFQUFFLEVBQUVDLFFBQVEsRUFBRTtRQUN4QixJQUFJLENBQUNkLEdBQUcsQ0FBQ1ksVUFBVSxDQUFDQyxJQUFJQztRQUN4QixPQUFPLElBQUk7SUFDWjtJQUVBQyxRQUFRO1FBQ1AsSUFBSSxDQUFDLElBQUksQ0FBQ1IsT0FBTyxFQUFFO1lBQ2xCLElBQUksQ0FBQ0EsT0FBTyxHQUFHO1lBRWYsSUFBSSxDQUFDUyxrQkFBa0IsQ0FBQztZQUN4QixJQUFJLENBQUNDLE1BQU07UUFDWjtJQUNEO0lBRUFDLFFBQVE7UUFDUCxJQUFJLElBQUksQ0FBQ2xCLEdBQUcsRUFBRTtZQUNiLElBQUksQ0FBQ0EsR0FBRyxDQUFDVSxRQUFRLENBQUNPLE1BQU07UUFDekI7SUFDRDtBQUNEO0FBRUFFLE9BQU9DLE9BQU8sR0FBR2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZnVsbC8uL25vZGVfbW9kdWxlcy9ub3Rpb24tY2xpZW50L25vZGVfbW9kdWxlcy9odHRwMi13cmFwcGVyL3NvdXJjZS9pbmNvbWluZy1tZXNzYWdlLmpzP2U3Y2YiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3Qge1JlYWRhYmxlfSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuXG5jbGFzcyBJbmNvbWluZ01lc3NhZ2UgZXh0ZW5kcyBSZWFkYWJsZSB7XG5cdGNvbnN0cnVjdG9yKHNvY2tldCwgaGlnaFdhdGVyTWFyaykge1xuXHRcdHN1cGVyKHtcblx0XHRcdGhpZ2hXYXRlck1hcmssXG5cdFx0XHRhdXRvRGVzdHJveTogZmFsc2Vcblx0XHR9KTtcblxuXHRcdHRoaXMuc3RhdHVzQ29kZSA9IG51bGw7XG5cdFx0dGhpcy5zdGF0dXNNZXNzYWdlID0gJyc7XG5cdFx0dGhpcy5odHRwVmVyc2lvbiA9ICcyLjAnO1xuXHRcdHRoaXMuaHR0cFZlcnNpb25NYWpvciA9IDI7XG5cdFx0dGhpcy5odHRwVmVyc2lvbk1pbm9yID0gMDtcblx0XHR0aGlzLmhlYWRlcnMgPSB7fTtcblx0XHR0aGlzLnRyYWlsZXJzID0ge307XG5cdFx0dGhpcy5yZXEgPSBudWxsO1xuXG5cdFx0dGhpcy5hYm9ydGVkID0gZmFsc2U7XG5cdFx0dGhpcy5jb21wbGV0ZSA9IGZhbHNlO1xuXHRcdHRoaXMudXBncmFkZSA9IG51bGw7XG5cblx0XHR0aGlzLnJhd0hlYWRlcnMgPSBbXTtcblx0XHR0aGlzLnJhd1RyYWlsZXJzID0gW107XG5cblx0XHR0aGlzLnNvY2tldCA9IHNvY2tldDtcblx0XHR0aGlzLmNvbm5lY3Rpb24gPSBzb2NrZXQ7XG5cblx0XHR0aGlzLl9kdW1wZWQgPSBmYWxzZTtcblx0fVxuXG5cdF9kZXN0cm95KGVycm9yKSB7XG5cdFx0dGhpcy5yZXEuX3JlcXVlc3QuZGVzdHJveShlcnJvcik7XG5cdH1cblxuXHRzZXRUaW1lb3V0KG1zLCBjYWxsYmFjaykge1xuXHRcdHRoaXMucmVxLnNldFRpbWVvdXQobXMsIGNhbGxiYWNrKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdF9kdW1wKCkge1xuXHRcdGlmICghdGhpcy5fZHVtcGVkKSB7XG5cdFx0XHR0aGlzLl9kdW1wZWQgPSB0cnVlO1xuXG5cdFx0XHR0aGlzLnJlbW92ZUFsbExpc3RlbmVycygnZGF0YScpO1xuXHRcdFx0dGhpcy5yZXN1bWUoKTtcblx0XHR9XG5cdH1cblxuXHRfcmVhZCgpIHtcblx0XHRpZiAodGhpcy5yZXEpIHtcblx0XHRcdHRoaXMucmVxLl9yZXF1ZXN0LnJlc3VtZSgpO1xuXHRcdH1cblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEluY29taW5nTWVzc2FnZTtcbiJdLCJuYW1lcyI6WyJSZWFkYWJsZSIsInJlcXVpcmUiLCJJbmNvbWluZ01lc3NhZ2UiLCJjb25zdHJ1Y3RvciIsInNvY2tldCIsImhpZ2hXYXRlck1hcmsiLCJhdXRvRGVzdHJveSIsInN0YXR1c0NvZGUiLCJzdGF0dXNNZXNzYWdlIiwiaHR0cFZlcnNpb24iLCJodHRwVmVyc2lvbk1ham9yIiwiaHR0cFZlcnNpb25NaW5vciIsImhlYWRlcnMiLCJ0cmFpbGVycyIsInJlcSIsImFib3J0ZWQiLCJjb21wbGV0ZSIsInVwZ3JhZGUiLCJyYXdIZWFkZXJzIiwicmF3VHJhaWxlcnMiLCJjb25uZWN0aW9uIiwiX2R1bXBlZCIsIl9kZXN0cm95IiwiZXJyb3IiLCJfcmVxdWVzdCIsImRlc3Ryb3kiLCJzZXRUaW1lb3V0IiwibXMiLCJjYWxsYmFjayIsIl9kdW1wIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicmVzdW1lIiwiX3JlYWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/incoming-message.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/http2-wrapper/source/index.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst agent = __webpack_require__(/*! ./agent */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/agent.js\");\nconst ClientRequest = __webpack_require__(/*! ./client-request */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/client-request.js\");\nconst IncomingMessage = __webpack_require__(/*! ./incoming-message */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/incoming-message.js\");\nconst auto = __webpack_require__(/*! ./auto */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/auto.js\");\nconst request = (url, options, callback)=>{\n    return new ClientRequest(url, options, callback);\n};\nconst get = (url, options, callback)=>{\n    // eslint-disable-next-line unicorn/prevent-abbreviations\n    const req = new ClientRequest(url, options, callback);\n    req.end();\n    return req;\n};\nmodule.exports = {\n    ...http2,\n    ClientRequest,\n    IncomingMessage,\n    ...agent,\n    request,\n    get,\n    auto\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxNQUFNQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUN0QixNQUFNQyxRQUFRRCxtQkFBT0EsQ0FBQztBQUN0QixNQUFNRSxnQkFBZ0JGLG1CQUFPQSxDQUFDO0FBQzlCLE1BQU1HLGtCQUFrQkgsbUJBQU9BLENBQUM7QUFDaEMsTUFBTUksT0FBT0osbUJBQU9BLENBQUM7QUFFckIsTUFBTUssVUFBVSxDQUFDQyxLQUFLQyxTQUFTQztJQUM5QixPQUFPLElBQUlOLGNBQWNJLEtBQUtDLFNBQVNDO0FBQ3hDO0FBRUEsTUFBTUMsTUFBTSxDQUFDSCxLQUFLQyxTQUFTQztJQUMxQix5REFBeUQ7SUFDekQsTUFBTUUsTUFBTSxJQUFJUixjQUFjSSxLQUFLQyxTQUFTQztJQUM1Q0UsSUFBSUMsR0FBRztJQUVQLE9BQU9EO0FBQ1I7QUFFQUUsT0FBT0MsT0FBTyxHQUFHO0lBQ2hCLEdBQUdkLEtBQUs7SUFDUkc7SUFDQUM7SUFDQSxHQUFHRixLQUFLO0lBQ1JJO0lBQ0FJO0lBQ0FMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1mdWxsLy4vbm9kZV9tb2R1bGVzL25vdGlvbi1jbGllbnQvbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL2luZGV4LmpzPzNmYjMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgaHR0cDIgPSByZXF1aXJlKCdodHRwMicpO1xuY29uc3QgYWdlbnQgPSByZXF1aXJlKCcuL2FnZW50Jyk7XG5jb25zdCBDbGllbnRSZXF1ZXN0ID0gcmVxdWlyZSgnLi9jbGllbnQtcmVxdWVzdCcpO1xuY29uc3QgSW5jb21pbmdNZXNzYWdlID0gcmVxdWlyZSgnLi9pbmNvbWluZy1tZXNzYWdlJyk7XG5jb25zdCBhdXRvID0gcmVxdWlyZSgnLi9hdXRvJyk7XG5cbmNvbnN0IHJlcXVlc3QgPSAodXJsLCBvcHRpb25zLCBjYWxsYmFjaykgPT4ge1xuXHRyZXR1cm4gbmV3IENsaWVudFJlcXVlc3QodXJsLCBvcHRpb25zLCBjYWxsYmFjayk7XG59O1xuXG5jb25zdCBnZXQgPSAodXJsLCBvcHRpb25zLCBjYWxsYmFjaykgPT4ge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9wcmV2ZW50LWFiYnJldmlhdGlvbnNcblx0Y29uc3QgcmVxID0gbmV3IENsaWVudFJlcXVlc3QodXJsLCBvcHRpb25zLCBjYWxsYmFjayk7XG5cdHJlcS5lbmQoKTtcblxuXHRyZXR1cm4gcmVxO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdC4uLmh0dHAyLFxuXHRDbGllbnRSZXF1ZXN0LFxuXHRJbmNvbWluZ01lc3NhZ2UsXG5cdC4uLmFnZW50LFxuXHRyZXF1ZXN0LFxuXHRnZXQsXG5cdGF1dG9cbn07XG4iXSwibmFtZXMiOlsiaHR0cDIiLCJyZXF1aXJlIiwiYWdlbnQiLCJDbGllbnRSZXF1ZXN0IiwiSW5jb21pbmdNZXNzYWdlIiwiYXV0byIsInJlcXVlc3QiLCJ1cmwiLCJvcHRpb25zIiwiY2FsbGJhY2siLCJnZXQiLCJyZXEiLCJlbmQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/calculate-server-name.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/http2-wrapper/source/utils/calculate-server-name.js ***!
  \*****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst net = __webpack_require__(/*! net */ \"net\");\n/* istanbul ignore file: https://github.com/nodejs/node/blob/v13.0.1/lib/_http_agent.js */ module.exports = (options)=>{\n    let servername = options.host;\n    const hostHeader = options.headers && options.headers.host;\n    if (hostHeader) {\n        if (hostHeader.startsWith(\"[\")) {\n            const index = hostHeader.indexOf(\"]\");\n            if (index === -1) {\n                servername = hostHeader;\n            } else {\n                servername = hostHeader.slice(1, -1);\n            }\n        } else {\n            servername = hostHeader.split(\":\", 1)[0];\n        }\n    }\n    if (net.isIP(servername)) {\n        return \"\";\n    }\n    return servername;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvY2FsY3VsYXRlLXNlcnZlci1uYW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsTUFBTUEsTUFBTUMsbUJBQU9BLENBQUM7QUFDcEIsd0ZBQXdGLEdBRXhGQyxPQUFPQyxPQUFPLEdBQUdDLENBQUFBO0lBQ2hCLElBQUlDLGFBQWFELFFBQVFFLElBQUk7SUFDN0IsTUFBTUMsYUFBYUgsUUFBUUksT0FBTyxJQUFJSixRQUFRSSxPQUFPLENBQUNGLElBQUk7SUFFMUQsSUFBSUMsWUFBWTtRQUNmLElBQUlBLFdBQVdFLFVBQVUsQ0FBQyxNQUFNO1lBQy9CLE1BQU1DLFFBQVFILFdBQVdJLE9BQU8sQ0FBQztZQUNqQyxJQUFJRCxVQUFVLENBQUMsR0FBRztnQkFDakJMLGFBQWFFO1lBQ2QsT0FBTztnQkFDTkYsYUFBYUUsV0FBV0ssS0FBSyxDQUFDLEdBQUcsQ0FBQztZQUNuQztRQUNELE9BQU87WUFDTlAsYUFBYUUsV0FBV00sS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUU7UUFDekM7SUFDRDtJQUVBLElBQUliLElBQUljLElBQUksQ0FBQ1QsYUFBYTtRQUN6QixPQUFPO0lBQ1I7SUFFQSxPQUFPQTtBQUNSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZnVsbC8uL25vZGVfbW9kdWxlcy9ub3Rpb24tY2xpZW50L25vZGVfbW9kdWxlcy9odHRwMi13cmFwcGVyL3NvdXJjZS91dGlscy9jYWxjdWxhdGUtc2VydmVyLW5hbWUuanM/N2ViOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBuZXQgPSByZXF1aXJlKCduZXQnKTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBmaWxlOiBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi92MTMuMC4xL2xpYi9faHR0cF9hZ2VudC5qcyAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IG9wdGlvbnMgPT4ge1xuXHRsZXQgc2VydmVybmFtZSA9IG9wdGlvbnMuaG9zdDtcblx0Y29uc3QgaG9zdEhlYWRlciA9IG9wdGlvbnMuaGVhZGVycyAmJiBvcHRpb25zLmhlYWRlcnMuaG9zdDtcblxuXHRpZiAoaG9zdEhlYWRlcikge1xuXHRcdGlmIChob3N0SGVhZGVyLnN0YXJ0c1dpdGgoJ1snKSkge1xuXHRcdFx0Y29uc3QgaW5kZXggPSBob3N0SGVhZGVyLmluZGV4T2YoJ10nKTtcblx0XHRcdGlmIChpbmRleCA9PT0gLTEpIHtcblx0XHRcdFx0c2VydmVybmFtZSA9IGhvc3RIZWFkZXI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZXJ2ZXJuYW1lID0gaG9zdEhlYWRlci5zbGljZSgxLCAtMSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNlcnZlcm5hbWUgPSBob3N0SGVhZGVyLnNwbGl0KCc6JywgMSlbMF07XG5cdFx0fVxuXHR9XG5cblx0aWYgKG5ldC5pc0lQKHNlcnZlcm5hbWUpKSB7XG5cdFx0cmV0dXJuICcnO1xuXHR9XG5cblx0cmV0dXJuIHNlcnZlcm5hbWU7XG59O1xuIl0sIm5hbWVzIjpbIm5ldCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwib3B0aW9ucyIsInNlcnZlcm5hbWUiLCJob3N0IiwiaG9zdEhlYWRlciIsImhlYWRlcnMiLCJzdGFydHNXaXRoIiwiaW5kZXgiLCJpbmRleE9mIiwic2xpY2UiLCJzcGxpdCIsImlzSVAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/calculate-server-name.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/errors.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/http2-wrapper/source/utils/errors.js ***!
  \**************************************************************************************/
/***/ ((module) => {

eval("\n/* istanbul ignore file: https://github.com/nodejs/node/blob/master/lib/internal/errors.js */ const makeError = (Base, key, getMessage)=>{\n    module.exports[key] = class NodeError extends Base {\n        constructor(...args){\n            super(typeof getMessage === \"string\" ? getMessage : getMessage(args));\n            this.name = `${super.name} [${key}]`;\n            this.code = key;\n        }\n    };\n};\nmakeError(TypeError, \"ERR_INVALID_ARG_TYPE\", (args)=>{\n    const type = args[0].includes(\".\") ? \"property\" : \"argument\";\n    let valid = args[1];\n    const isManyTypes = Array.isArray(valid);\n    if (isManyTypes) {\n        valid = `${valid.slice(0, -1).join(\", \")} or ${valid.slice(-1)}`;\n    }\n    return `The \"${args[0]}\" ${type} must be ${isManyTypes ? \"one of\" : \"of\"} type ${valid}. Received ${typeof args[2]}`;\n});\nmakeError(TypeError, \"ERR_INVALID_PROTOCOL\", (args)=>{\n    return `Protocol \"${args[0]}\" not supported. Expected \"${args[1]}\"`;\n});\nmakeError(Error, \"ERR_HTTP_HEADERS_SENT\", (args)=>{\n    return `Cannot ${args[0]} headers after they are sent to the client`;\n});\nmakeError(TypeError, \"ERR_INVALID_HTTP_TOKEN\", (args)=>{\n    return `${args[0]} must be a valid HTTP token [${args[1]}]`;\n});\nmakeError(TypeError, \"ERR_HTTP_INVALID_HEADER_VALUE\", (args)=>{\n    return `Invalid value \"${args[0]} for header \"${args[1]}\"`;\n});\nmakeError(TypeError, \"ERR_INVALID_CHAR\", (args)=>{\n    return `Invalid character in ${args[0]} [${args[1]}]`;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvZXJyb3JzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsMkZBQTJGLEdBRTNGLE1BQU1BLFlBQVksQ0FBQ0MsTUFBTUMsS0FBS0M7SUFDN0JDLE9BQU9DLE9BQU8sQ0FBQ0gsSUFBSSxHQUFHLE1BQU1JLGtCQUFrQkw7UUFDN0NNLFlBQVksR0FBR0MsSUFBSSxDQUFFO1lBQ3BCLEtBQUssQ0FBQyxPQUFPTCxlQUFlLFdBQVdBLGFBQWFBLFdBQVdLO1lBQy9ELElBQUksQ0FBQ0MsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUNBLEtBQUssRUFBRSxFQUFFUCxJQUFJLENBQUMsQ0FBQztZQUNwQyxJQUFJLENBQUNRLElBQUksR0FBR1I7UUFDYjtJQUNEO0FBQ0Q7QUFFQUYsVUFBVVcsV0FBVyx3QkFBd0JILENBQUFBO0lBQzVDLE1BQU1JLE9BQU9KLElBQUksQ0FBQyxFQUFFLENBQUNLLFFBQVEsQ0FBQyxPQUFPLGFBQWE7SUFFbEQsSUFBSUMsUUFBUU4sSUFBSSxDQUFDLEVBQUU7SUFDbkIsTUFBTU8sY0FBY0MsTUFBTUMsT0FBTyxDQUFDSDtJQUVsQyxJQUFJQyxhQUFhO1FBQ2hCRCxRQUFRLENBQUMsRUFBRUEsTUFBTUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHQyxJQUFJLENBQUMsTUFBTSxJQUFJLEVBQUVMLE1BQU1JLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUNqRTtJQUVBLE9BQU8sQ0FBQyxLQUFLLEVBQUVWLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFSSxLQUFLLFNBQVMsRUFBRUcsY0FBYyxXQUFXLEtBQUssTUFBTSxFQUFFRCxNQUFNLFdBQVcsRUFBRSxPQUFPTixJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDckg7QUFFQVIsVUFBVVcsV0FBVyx3QkFBd0JILENBQUFBO0lBQzVDLE9BQU8sQ0FBQyxVQUFVLEVBQUVBLElBQUksQ0FBQyxFQUFFLENBQUMsMkJBQTJCLEVBQUVBLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3BFO0FBRUFSLFVBQVVvQixPQUFPLHlCQUF5QlosQ0FBQUE7SUFDekMsT0FBTyxDQUFDLE9BQU8sRUFBRUEsSUFBSSxDQUFDLEVBQUUsQ0FBQywwQ0FBMEMsQ0FBQztBQUNyRTtBQUVBUixVQUFVVyxXQUFXLDBCQUEwQkgsQ0FBQUE7SUFDOUMsT0FBTyxDQUFDLEVBQUVBLElBQUksQ0FBQyxFQUFFLENBQUMsNkJBQTZCLEVBQUVBLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzVEO0FBRUFSLFVBQVVXLFdBQVcsaUNBQWlDSCxDQUFBQTtJQUNyRCxPQUFPLENBQUMsZUFBZSxFQUFFQSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDM0Q7QUFFQVIsVUFBVVcsV0FBVyxvQkFBb0JILENBQUFBO0lBQ3hDLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUVBLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3REIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZnVsbC8uL25vZGVfbW9kdWxlcy9ub3Rpb24tY2xpZW50L25vZGVfbW9kdWxlcy9odHRwMi13cmFwcGVyL3NvdXJjZS91dGlscy9lcnJvcnMuanM/YmIxZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgZmlsZTogaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvbWFzdGVyL2xpYi9pbnRlcm5hbC9lcnJvcnMuanMgKi9cblxuY29uc3QgbWFrZUVycm9yID0gKEJhc2UsIGtleSwgZ2V0TWVzc2FnZSkgPT4ge1xuXHRtb2R1bGUuZXhwb3J0c1trZXldID0gY2xhc3MgTm9kZUVycm9yIGV4dGVuZHMgQmFzZSB7XG5cdFx0Y29uc3RydWN0b3IoLi4uYXJncykge1xuXHRcdFx0c3VwZXIodHlwZW9mIGdldE1lc3NhZ2UgPT09ICdzdHJpbmcnID8gZ2V0TWVzc2FnZSA6IGdldE1lc3NhZ2UoYXJncykpO1xuXHRcdFx0dGhpcy5uYW1lID0gYCR7c3VwZXIubmFtZX0gWyR7a2V5fV1gO1xuXHRcdFx0dGhpcy5jb2RlID0ga2V5O1xuXHRcdH1cblx0fTtcbn07XG5cbm1ha2VFcnJvcihUeXBlRXJyb3IsICdFUlJfSU5WQUxJRF9BUkdfVFlQRScsIGFyZ3MgPT4ge1xuXHRjb25zdCB0eXBlID0gYXJnc1swXS5pbmNsdWRlcygnLicpID8gJ3Byb3BlcnR5JyA6ICdhcmd1bWVudCc7XG5cblx0bGV0IHZhbGlkID0gYXJnc1sxXTtcblx0Y29uc3QgaXNNYW55VHlwZXMgPSBBcnJheS5pc0FycmF5KHZhbGlkKTtcblxuXHRpZiAoaXNNYW55VHlwZXMpIHtcblx0XHR2YWxpZCA9IGAke3ZhbGlkLnNsaWNlKDAsIC0xKS5qb2luKCcsICcpfSBvciAke3ZhbGlkLnNsaWNlKC0xKX1gO1xuXHR9XG5cblx0cmV0dXJuIGBUaGUgXCIke2FyZ3NbMF19XCIgJHt0eXBlfSBtdXN0IGJlICR7aXNNYW55VHlwZXMgPyAnb25lIG9mJyA6ICdvZid9IHR5cGUgJHt2YWxpZH0uIFJlY2VpdmVkICR7dHlwZW9mIGFyZ3NbMl19YDtcbn0pO1xuXG5tYWtlRXJyb3IoVHlwZUVycm9yLCAnRVJSX0lOVkFMSURfUFJPVE9DT0wnLCBhcmdzID0+IHtcblx0cmV0dXJuIGBQcm90b2NvbCBcIiR7YXJnc1swXX1cIiBub3Qgc3VwcG9ydGVkLiBFeHBlY3RlZCBcIiR7YXJnc1sxXX1cImA7XG59KTtcblxubWFrZUVycm9yKEVycm9yLCAnRVJSX0hUVFBfSEVBREVSU19TRU5UJywgYXJncyA9PiB7XG5cdHJldHVybiBgQ2Fubm90ICR7YXJnc1swXX0gaGVhZGVycyBhZnRlciB0aGV5IGFyZSBzZW50IHRvIHRoZSBjbGllbnRgO1xufSk7XG5cbm1ha2VFcnJvcihUeXBlRXJyb3IsICdFUlJfSU5WQUxJRF9IVFRQX1RPS0VOJywgYXJncyA9PiB7XG5cdHJldHVybiBgJHthcmdzWzBdfSBtdXN0IGJlIGEgdmFsaWQgSFRUUCB0b2tlbiBbJHthcmdzWzFdfV1gO1xufSk7XG5cbm1ha2VFcnJvcihUeXBlRXJyb3IsICdFUlJfSFRUUF9JTlZBTElEX0hFQURFUl9WQUxVRScsIGFyZ3MgPT4ge1xuXHRyZXR1cm4gYEludmFsaWQgdmFsdWUgXCIke2FyZ3NbMF19IGZvciBoZWFkZXIgXCIke2FyZ3NbMV19XCJgO1xufSk7XG5cbm1ha2VFcnJvcihUeXBlRXJyb3IsICdFUlJfSU5WQUxJRF9DSEFSJywgYXJncyA9PiB7XG5cdHJldHVybiBgSW52YWxpZCBjaGFyYWN0ZXIgaW4gJHthcmdzWzBdfSBbJHthcmdzWzFdfV1gO1xufSk7XG4iXSwibmFtZXMiOlsibWFrZUVycm9yIiwiQmFzZSIsImtleSIsImdldE1lc3NhZ2UiLCJtb2R1bGUiLCJleHBvcnRzIiwiTm9kZUVycm9yIiwiY29uc3RydWN0b3IiLCJhcmdzIiwibmFtZSIsImNvZGUiLCJUeXBlRXJyb3IiLCJ0eXBlIiwiaW5jbHVkZXMiLCJ2YWxpZCIsImlzTWFueVR5cGVzIiwiQXJyYXkiLCJpc0FycmF5Iiwic2xpY2UiLCJqb2luIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/is-request-pseudo-header.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/http2-wrapper/source/utils/is-request-pseudo-header.js ***!
  \********************************************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = (header)=>{\n    switch(header){\n        case \":method\":\n        case \":scheme\":\n        case \":authority\":\n        case \":path\":\n            return true;\n        default:\n            return false;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvaXMtcmVxdWVzdC1wc2V1ZG8taGVhZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBR0MsQ0FBQUE7SUFDaEIsT0FBUUE7UUFDUCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1lBQ0osT0FBTztRQUNSO1lBQ0MsT0FBTztJQUNUO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1mdWxsLy4vbm9kZV9tb2R1bGVzL25vdGlvbi1jbGllbnQvbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL3V0aWxzL2lzLXJlcXVlc3QtcHNldWRvLWhlYWRlci5qcz84ZWJhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBoZWFkZXIgPT4ge1xuXHRzd2l0Y2ggKGhlYWRlcikge1xuXHRcdGNhc2UgJzptZXRob2QnOlxuXHRcdGNhc2UgJzpzY2hlbWUnOlxuXHRcdGNhc2UgJzphdXRob3JpdHknOlxuXHRcdGNhc2UgJzpwYXRoJzpcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImhlYWRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/is-request-pseudo-header.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/proxy-events.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/http2-wrapper/source/utils/proxy-events.js ***!
  \********************************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = (from, to, events)=>{\n    for (const event of events){\n        from.on(event, (...args)=>to.emit(event, ...args));\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvcHJveHktZXZlbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBRyxDQUFDQyxNQUFNQyxJQUFJQztJQUMzQixLQUFLLE1BQU1DLFNBQVNELE9BQVE7UUFDM0JGLEtBQUtJLEVBQUUsQ0FBQ0QsT0FBTyxDQUFDLEdBQUdFLE9BQVNKLEdBQUdLLElBQUksQ0FBQ0gsVUFBVUU7SUFDL0M7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25vdGlvbi14LWZ1bGwvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvcHJveHktZXZlbnRzLmpzPzY1ZWMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChmcm9tLCB0bywgZXZlbnRzKSA9PiB7XG5cdGZvciAoY29uc3QgZXZlbnQgb2YgZXZlbnRzKSB7XG5cdFx0ZnJvbS5vbihldmVudCwgKC4uLmFyZ3MpID0+IHRvLmVtaXQoZXZlbnQsIC4uLmFyZ3MpKTtcblx0fVxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZnJvbSIsInRvIiwiZXZlbnRzIiwiZXZlbnQiLCJvbiIsImFyZ3MiLCJlbWl0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/proxy-events.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/url-to-options.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/http2-wrapper/source/utils/url-to-options.js ***!
  \**********************************************************************************************/
/***/ ((module) => {

eval("\n/* istanbul ignore file: https://github.com/nodejs/node/blob/a91293d4d9ab403046ab5eb022332e4e3d249bd3/lib/internal/url.js#L1257 */ module.exports = (url)=>{\n    const options = {\n        protocol: url.protocol,\n        hostname: typeof url.hostname === \"string\" && url.hostname.startsWith(\"[\") ? url.hostname.slice(1, -1) : url.hostname,\n        host: url.host,\n        hash: url.hash,\n        search: url.search,\n        pathname: url.pathname,\n        href: url.href,\n        path: `${url.pathname || \"\"}${url.search || \"\"}`\n    };\n    if (typeof url.port === \"string\" && url.port.length !== 0) {\n        options.port = Number(url.port);\n    }\n    if (url.username || url.password) {\n        options.auth = `${url.username || \"\"}:${url.password || \"\"}`;\n    }\n    return options;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvdXJsLXRvLW9wdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxnSUFBZ0ksR0FFaElBLE9BQU9DLE9BQU8sR0FBR0MsQ0FBQUE7SUFDaEIsTUFBTUMsVUFBVTtRQUNmQyxVQUFVRixJQUFJRSxRQUFRO1FBQ3RCQyxVQUFVLE9BQU9ILElBQUlHLFFBQVEsS0FBSyxZQUFZSCxJQUFJRyxRQUFRLENBQUNDLFVBQVUsQ0FBQyxPQUFPSixJQUFJRyxRQUFRLENBQUNFLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBS0wsSUFBSUcsUUFBUTtRQUNySEcsTUFBTU4sSUFBSU0sSUFBSTtRQUNkQyxNQUFNUCxJQUFJTyxJQUFJO1FBQ2RDLFFBQVFSLElBQUlRLE1BQU07UUFDbEJDLFVBQVVULElBQUlTLFFBQVE7UUFDdEJDLE1BQU1WLElBQUlVLElBQUk7UUFDZEMsTUFBTSxDQUFDLEVBQUVYLElBQUlTLFFBQVEsSUFBSSxHQUFHLEVBQUVULElBQUlRLE1BQU0sSUFBSSxHQUFHLENBQUM7SUFDakQ7SUFFQSxJQUFJLE9BQU9SLElBQUlZLElBQUksS0FBSyxZQUFZWixJQUFJWSxJQUFJLENBQUNDLE1BQU0sS0FBSyxHQUFHO1FBQzFEWixRQUFRVyxJQUFJLEdBQUdFLE9BQU9kLElBQUlZLElBQUk7SUFDL0I7SUFFQSxJQUFJWixJQUFJZSxRQUFRLElBQUlmLElBQUlnQixRQUFRLEVBQUU7UUFDakNmLFFBQVFnQixJQUFJLEdBQUcsQ0FBQyxFQUFFakIsSUFBSWUsUUFBUSxJQUFJLEdBQUcsQ0FBQyxFQUFFZixJQUFJZ0IsUUFBUSxJQUFJLEdBQUcsQ0FBQztJQUM3RDtJQUVBLE9BQU9mO0FBQ1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1mdWxsLy4vbm9kZV9tb2R1bGVzL25vdGlvbi1jbGllbnQvbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL3V0aWxzL3VybC10by1vcHRpb25zLmpzPzhhYjkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLyogaXN0YW5idWwgaWdub3JlIGZpbGU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iL2E5MTI5M2Q0ZDlhYjQwMzA0NmFiNWViMDIyMzMyZTRlM2QyNDliZDMvbGliL2ludGVybmFsL3VybC5qcyNMMTI1NyAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVybCA9PiB7XG5cdGNvbnN0IG9wdGlvbnMgPSB7XG5cdFx0cHJvdG9jb2w6IHVybC5wcm90b2NvbCxcblx0XHRob3N0bmFtZTogdHlwZW9mIHVybC5ob3N0bmFtZSA9PT0gJ3N0cmluZycgJiYgdXJsLmhvc3RuYW1lLnN0YXJ0c1dpdGgoJ1snKSA/IHVybC5ob3N0bmFtZS5zbGljZSgxLCAtMSkgOiB1cmwuaG9zdG5hbWUsXG5cdFx0aG9zdDogdXJsLmhvc3QsXG5cdFx0aGFzaDogdXJsLmhhc2gsXG5cdFx0c2VhcmNoOiB1cmwuc2VhcmNoLFxuXHRcdHBhdGhuYW1lOiB1cmwucGF0aG5hbWUsXG5cdFx0aHJlZjogdXJsLmhyZWYsXG5cdFx0cGF0aDogYCR7dXJsLnBhdGhuYW1lIHx8ICcnfSR7dXJsLnNlYXJjaCB8fCAnJ31gXG5cdH07XG5cblx0aWYgKHR5cGVvZiB1cmwucG9ydCA9PT0gJ3N0cmluZycgJiYgdXJsLnBvcnQubGVuZ3RoICE9PSAwKSB7XG5cdFx0b3B0aW9ucy5wb3J0ID0gTnVtYmVyKHVybC5wb3J0KTtcblx0fVxuXG5cdGlmICh1cmwudXNlcm5hbWUgfHwgdXJsLnBhc3N3b3JkKSB7XG5cdFx0b3B0aW9ucy5hdXRoID0gYCR7dXJsLnVzZXJuYW1lIHx8ICcnfToke3VybC5wYXNzd29yZCB8fCAnJ31gO1xuXHR9XG5cblx0cmV0dXJuIG9wdGlvbnM7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ1cmwiLCJvcHRpb25zIiwicHJvdG9jb2wiLCJob3N0bmFtZSIsInN0YXJ0c1dpdGgiLCJzbGljZSIsImhvc3QiLCJoYXNoIiwic2VhcmNoIiwicGF0aG5hbWUiLCJocmVmIiwicGF0aCIsInBvcnQiLCJsZW5ndGgiLCJOdW1iZXIiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiYXV0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/url-to-options.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/lowercase-keys/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/lowercase-keys/index.js ***!
  \*************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = (object)=>{\n    const result = {};\n    for (const [key, value] of Object.entries(object)){\n        result[key.toLowerCase()] = value;\n    }\n    return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvbG93ZXJjYXNlLWtleXMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQUEsT0FBT0MsT0FBTyxHQUFHQyxDQUFBQTtJQUNoQixNQUFNQyxTQUFTLENBQUM7SUFFaEIsS0FBSyxNQUFNLENBQUNDLEtBQUtDLE1BQU0sSUFBSUMsT0FBT0MsT0FBTyxDQUFDTCxRQUFTO1FBQ2xEQyxNQUFNLENBQUNDLElBQUlJLFdBQVcsR0FBRyxHQUFHSDtJQUM3QjtJQUVBLE9BQU9GO0FBQ1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1mdWxsLy4vbm9kZV9tb2R1bGVzL25vdGlvbi1jbGllbnQvbm9kZV9tb2R1bGVzL2xvd2VyY2FzZS1rZXlzL2luZGV4LmpzPzMwZGQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBvYmplY3QgPT4ge1xuXHRjb25zdCByZXN1bHQgPSB7fTtcblxuXHRmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhvYmplY3QpKSB7XG5cdFx0cmVzdWx0W2tleS50b0xvd2VyQ2FzZSgpXSA9IHZhbHVlO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIm9iamVjdCIsInJlc3VsdCIsImtleSIsInZhbHVlIiwiT2JqZWN0IiwiZW50cmllcyIsInRvTG93ZXJDYXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/lowercase-keys/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/p-cancelable/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/p-cancelable/index.js ***!
  \***********************************************************************/
/***/ ((module) => {

eval("\nclass CancelError extends Error {\n    constructor(reason){\n        super(reason || \"Promise was canceled\");\n        this.name = \"CancelError\";\n    }\n    get isCanceled() {\n        return true;\n    }\n}\nclass PCancelable {\n    static fn(userFn) {\n        return (...arguments_)=>{\n            return new PCancelable((resolve, reject, onCancel)=>{\n                arguments_.push(onCancel);\n                // eslint-disable-next-line promise/prefer-await-to-then\n                userFn(...arguments_).then(resolve, reject);\n            });\n        };\n    }\n    constructor(executor){\n        this._cancelHandlers = [];\n        this._isPending = true;\n        this._isCanceled = false;\n        this._rejectOnCancel = true;\n        this._promise = new Promise((resolve, reject)=>{\n            this._reject = reject;\n            const onResolve = (value)=>{\n                this._isPending = false;\n                resolve(value);\n            };\n            const onReject = (error)=>{\n                this._isPending = false;\n                reject(error);\n            };\n            const onCancel = (handler)=>{\n                if (!this._isPending) {\n                    throw new Error(\"The `onCancel` handler was attached after the promise settled.\");\n                }\n                this._cancelHandlers.push(handler);\n            };\n            Object.defineProperties(onCancel, {\n                shouldReject: {\n                    get: ()=>this._rejectOnCancel,\n                    set: (boolean)=>{\n                        this._rejectOnCancel = boolean;\n                    }\n                }\n            });\n            return executor(onResolve, onReject, onCancel);\n        });\n    }\n    then(onFulfilled, onRejected) {\n        // eslint-disable-next-line promise/prefer-await-to-then\n        return this._promise.then(onFulfilled, onRejected);\n    }\n    catch(onRejected) {\n        return this._promise.catch(onRejected);\n    }\n    finally(onFinally) {\n        return this._promise.finally(onFinally);\n    }\n    cancel(reason) {\n        if (!this._isPending || this._isCanceled) {\n            return;\n        }\n        if (this._cancelHandlers.length > 0) {\n            try {\n                for (const handler of this._cancelHandlers){\n                    handler();\n                }\n            } catch (error) {\n                this._reject(error);\n            }\n        }\n        this._isCanceled = true;\n        if (this._rejectOnCancel) {\n            this._reject(new CancelError(reason));\n        }\n    }\n    get isCanceled() {\n        return this._isCanceled;\n    }\n}\nObject.setPrototypeOf(PCancelable.prototype, Promise.prototype);\nmodule.exports = PCancelable;\nmodule.exports.CancelError = CancelError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvcC1jYW5jZWxhYmxlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsb0JBQW9CQztJQUN6QkMsWUFBWUMsTUFBTSxDQUFFO1FBQ25CLEtBQUssQ0FBQ0EsVUFBVTtRQUNoQixJQUFJLENBQUNDLElBQUksR0FBRztJQUNiO0lBRUEsSUFBSUMsYUFBYTtRQUNoQixPQUFPO0lBQ1I7QUFDRDtBQUVBLE1BQU1DO0lBQ0wsT0FBT0MsR0FBR0MsTUFBTSxFQUFFO1FBQ2pCLE9BQU8sQ0FBQyxHQUFHQztZQUNWLE9BQU8sSUFBSUgsWUFBWSxDQUFDSSxTQUFTQyxRQUFRQztnQkFDeENILFdBQVdJLElBQUksQ0FBQ0Q7Z0JBQ2hCLHdEQUF3RDtnQkFDeERKLFVBQVVDLFlBQVlLLElBQUksQ0FBQ0osU0FBU0M7WUFDckM7UUFDRDtJQUNEO0lBRUFULFlBQVlhLFFBQVEsQ0FBRTtRQUNyQixJQUFJLENBQUNDLGVBQWUsR0FBRyxFQUFFO1FBQ3pCLElBQUksQ0FBQ0MsVUFBVSxHQUFHO1FBQ2xCLElBQUksQ0FBQ0MsV0FBVyxHQUFHO1FBQ25CLElBQUksQ0FBQ0MsZUFBZSxHQUFHO1FBRXZCLElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUlDLFFBQVEsQ0FBQ1gsU0FBU0M7WUFDckMsSUFBSSxDQUFDVyxPQUFPLEdBQUdYO1lBRWYsTUFBTVksWUFBWUMsQ0FBQUE7Z0JBQ2pCLElBQUksQ0FBQ1AsVUFBVSxHQUFHO2dCQUNsQlAsUUFBUWM7WUFDVDtZQUVBLE1BQU1DLFdBQVdDLENBQUFBO2dCQUNoQixJQUFJLENBQUNULFVBQVUsR0FBRztnQkFDbEJOLE9BQU9lO1lBQ1I7WUFFQSxNQUFNZCxXQUFXZSxDQUFBQTtnQkFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQ1YsVUFBVSxFQUFFO29CQUNyQixNQUFNLElBQUloQixNQUFNO2dCQUNqQjtnQkFFQSxJQUFJLENBQUNlLGVBQWUsQ0FBQ0gsSUFBSSxDQUFDYztZQUMzQjtZQUVBQyxPQUFPQyxnQkFBZ0IsQ0FBQ2pCLFVBQVU7Z0JBQ2pDa0IsY0FBYztvQkFDYkMsS0FBSyxJQUFNLElBQUksQ0FBQ1osZUFBZTtvQkFDL0JhLEtBQUtDLENBQUFBO3dCQUNKLElBQUksQ0FBQ2QsZUFBZSxHQUFHYztvQkFDeEI7Z0JBQ0Q7WUFDRDtZQUVBLE9BQU9sQixTQUFTUSxXQUFXRSxVQUFVYjtRQUN0QztJQUNEO0lBRUFFLEtBQUtvQixXQUFXLEVBQUVDLFVBQVUsRUFBRTtRQUM3Qix3REFBd0Q7UUFDeEQsT0FBTyxJQUFJLENBQUNmLFFBQVEsQ0FBQ04sSUFBSSxDQUFDb0IsYUFBYUM7SUFDeEM7SUFFQUMsTUFBTUQsVUFBVSxFQUFFO1FBQ2pCLE9BQU8sSUFBSSxDQUFDZixRQUFRLENBQUNnQixLQUFLLENBQUNEO0lBQzVCO0lBRUFFLFFBQVFDLFNBQVMsRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ2xCLFFBQVEsQ0FBQ2lCLE9BQU8sQ0FBQ0M7SUFDOUI7SUFFQUMsT0FBT3BDLE1BQU0sRUFBRTtRQUNkLElBQUksQ0FBQyxJQUFJLENBQUNjLFVBQVUsSUFBSSxJQUFJLENBQUNDLFdBQVcsRUFBRTtZQUN6QztRQUNEO1FBRUEsSUFBSSxJQUFJLENBQUNGLGVBQWUsQ0FBQ3dCLE1BQU0sR0FBRyxHQUFHO1lBQ3BDLElBQUk7Z0JBQ0gsS0FBSyxNQUFNYixXQUFXLElBQUksQ0FBQ1gsZUFBZSxDQUFFO29CQUMzQ1c7Z0JBQ0Q7WUFDRCxFQUFFLE9BQU9ELE9BQU87Z0JBQ2YsSUFBSSxDQUFDSixPQUFPLENBQUNJO1lBQ2Q7UUFDRDtRQUVBLElBQUksQ0FBQ1IsV0FBVyxHQUFHO1FBQ25CLElBQUksSUFBSSxDQUFDQyxlQUFlLEVBQUU7WUFDekIsSUFBSSxDQUFDRyxPQUFPLENBQUMsSUFBSXRCLFlBQVlHO1FBQzlCO0lBQ0Q7SUFFQSxJQUFJRSxhQUFhO1FBQ2hCLE9BQU8sSUFBSSxDQUFDYSxXQUFXO0lBQ3hCO0FBQ0Q7QUFFQVUsT0FBT2EsY0FBYyxDQUFDbkMsWUFBWW9DLFNBQVMsRUFBRXJCLFFBQVFxQixTQUFTO0FBRTlEQyxPQUFPQyxPQUFPLEdBQUd0QztBQUNqQnFDLDBCQUEwQixHQUFHM0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1mdWxsLy4vbm9kZV9tb2R1bGVzL25vdGlvbi1jbGllbnQvbm9kZV9tb2R1bGVzL3AtY2FuY2VsYWJsZS9pbmRleC5qcz8yM2I4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY2xhc3MgQ2FuY2VsRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG5cdGNvbnN0cnVjdG9yKHJlYXNvbikge1xuXHRcdHN1cGVyKHJlYXNvbiB8fCAnUHJvbWlzZSB3YXMgY2FuY2VsZWQnKTtcblx0XHR0aGlzLm5hbWUgPSAnQ2FuY2VsRXJyb3InO1xuXHR9XG5cblx0Z2V0IGlzQ2FuY2VsZWQoKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cbn1cblxuY2xhc3MgUENhbmNlbGFibGUge1xuXHRzdGF0aWMgZm4odXNlckZuKSB7XG5cdFx0cmV0dXJuICguLi5hcmd1bWVudHNfKSA9PiB7XG5cdFx0XHRyZXR1cm4gbmV3IFBDYW5jZWxhYmxlKChyZXNvbHZlLCByZWplY3QsIG9uQ2FuY2VsKSA9PiB7XG5cdFx0XHRcdGFyZ3VtZW50c18ucHVzaChvbkNhbmNlbCk7XG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcm9taXNlL3ByZWZlci1hd2FpdC10by10aGVuXG5cdFx0XHRcdHVzZXJGbiguLi5hcmd1bWVudHNfKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG5cdFx0XHR9KTtcblx0XHR9O1xuXHR9XG5cblx0Y29uc3RydWN0b3IoZXhlY3V0b3IpIHtcblx0XHR0aGlzLl9jYW5jZWxIYW5kbGVycyA9IFtdO1xuXHRcdHRoaXMuX2lzUGVuZGluZyA9IHRydWU7XG5cdFx0dGhpcy5faXNDYW5jZWxlZCA9IGZhbHNlO1xuXHRcdHRoaXMuX3JlamVjdE9uQ2FuY2VsID0gdHJ1ZTtcblxuXHRcdHRoaXMuX3Byb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHR0aGlzLl9yZWplY3QgPSByZWplY3Q7XG5cblx0XHRcdGNvbnN0IG9uUmVzb2x2ZSA9IHZhbHVlID0+IHtcblx0XHRcdFx0dGhpcy5faXNQZW5kaW5nID0gZmFsc2U7XG5cdFx0XHRcdHJlc29sdmUodmFsdWUpO1xuXHRcdFx0fTtcblxuXHRcdFx0Y29uc3Qgb25SZWplY3QgPSBlcnJvciA9PiB7XG5cdFx0XHRcdHRoaXMuX2lzUGVuZGluZyA9IGZhbHNlO1xuXHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0fTtcblxuXHRcdFx0Y29uc3Qgb25DYW5jZWwgPSBoYW5kbGVyID0+IHtcblx0XHRcdFx0aWYgKCF0aGlzLl9pc1BlbmRpbmcpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1RoZSBgb25DYW5jZWxgIGhhbmRsZXIgd2FzIGF0dGFjaGVkIGFmdGVyIHRoZSBwcm9taXNlIHNldHRsZWQuJyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLl9jYW5jZWxIYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuXHRcdFx0fTtcblxuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXMob25DYW5jZWwsIHtcblx0XHRcdFx0c2hvdWxkUmVqZWN0OiB7XG5cdFx0XHRcdFx0Z2V0OiAoKSA9PiB0aGlzLl9yZWplY3RPbkNhbmNlbCxcblx0XHRcdFx0XHRzZXQ6IGJvb2xlYW4gPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5fcmVqZWN0T25DYW5jZWwgPSBib29sZWFuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHJldHVybiBleGVjdXRvcihvblJlc29sdmUsIG9uUmVqZWN0LCBvbkNhbmNlbCk7XG5cdFx0fSk7XG5cdH1cblxuXHR0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByb21pc2UvcHJlZmVyLWF3YWl0LXRvLXRoZW5cblx0XHRyZXR1cm4gdGhpcy5fcHJvbWlzZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKTtcblx0fVxuXG5cdGNhdGNoKG9uUmVqZWN0ZWQpIHtcblx0XHRyZXR1cm4gdGhpcy5fcHJvbWlzZS5jYXRjaChvblJlamVjdGVkKTtcblx0fVxuXG5cdGZpbmFsbHkob25GaW5hbGx5KSB7XG5cdFx0cmV0dXJuIHRoaXMuX3Byb21pc2UuZmluYWxseShvbkZpbmFsbHkpO1xuXHR9XG5cblx0Y2FuY2VsKHJlYXNvbikge1xuXHRcdGlmICghdGhpcy5faXNQZW5kaW5nIHx8IHRoaXMuX2lzQ2FuY2VsZWQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5fY2FuY2VsSGFuZGxlcnMubGVuZ3RoID4gMCkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Zm9yIChjb25zdCBoYW5kbGVyIG9mIHRoaXMuX2NhbmNlbEhhbmRsZXJzKSB7XG5cdFx0XHRcdFx0aGFuZGxlcigpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0XHR0aGlzLl9yZWplY3QoZXJyb3IpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuX2lzQ2FuY2VsZWQgPSB0cnVlO1xuXHRcdGlmICh0aGlzLl9yZWplY3RPbkNhbmNlbCkge1xuXHRcdFx0dGhpcy5fcmVqZWN0KG5ldyBDYW5jZWxFcnJvcihyZWFzb24pKTtcblx0XHR9XG5cdH1cblxuXHRnZXQgaXNDYW5jZWxlZCgpIHtcblx0XHRyZXR1cm4gdGhpcy5faXNDYW5jZWxlZDtcblx0fVxufVxuXG5PYmplY3Quc2V0UHJvdG90eXBlT2YoUENhbmNlbGFibGUucHJvdG90eXBlLCBQcm9taXNlLnByb3RvdHlwZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUENhbmNlbGFibGU7XG5tb2R1bGUuZXhwb3J0cy5DYW5jZWxFcnJvciA9IENhbmNlbEVycm9yO1xuIl0sIm5hbWVzIjpbIkNhbmNlbEVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsInJlYXNvbiIsIm5hbWUiLCJpc0NhbmNlbGVkIiwiUENhbmNlbGFibGUiLCJmbiIsInVzZXJGbiIsImFyZ3VtZW50c18iLCJyZXNvbHZlIiwicmVqZWN0Iiwib25DYW5jZWwiLCJwdXNoIiwidGhlbiIsImV4ZWN1dG9yIiwiX2NhbmNlbEhhbmRsZXJzIiwiX2lzUGVuZGluZyIsIl9pc0NhbmNlbGVkIiwiX3JlamVjdE9uQ2FuY2VsIiwiX3Byb21pc2UiLCJQcm9taXNlIiwiX3JlamVjdCIsIm9uUmVzb2x2ZSIsInZhbHVlIiwib25SZWplY3QiLCJlcnJvciIsImhhbmRsZXIiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0aWVzIiwic2hvdWxkUmVqZWN0IiwiZ2V0Iiwic2V0IiwiYm9vbGVhbiIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImNhdGNoIiwiZmluYWxseSIsIm9uRmluYWxseSIsImNhbmNlbCIsImxlbmd0aCIsInNldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/p-cancelable/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/build/index.js":
/*!***************************************************!*\
  !*** ./node_modules/notion-client/build/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NotionAPI: () => (/* binding */ E)\n/* harmony export */ });\n/* harmony import */ var got__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! got */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/index.js\");\n/* harmony import */ var notion_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! notion-utils */ \"(rsc)/./node_modules/notion-utils/build/index.js\");\n/* harmony import */ var p_map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-map */ \"(rsc)/./node_modules/p-map/index.js\");\n\n\n\nvar E = class {\n    constructor({ apiBaseUrl: r = \"https://www.notion.so/api/v3\", authToken: n, activeUser: e, userTimeZone: a = \"America/New_York\" } = {}){\n        this._apiBaseUrl = r, this._authToken = n, this._activeUser = e, this._userTimeZone = a;\n    }\n    async getPage(r, { concurrency: n = 3, fetchMissingBlocks: e = !0, fetchCollections: a = !0, signFileUrls: o = !0, chunkLimit: s = 100, chunkNumber: h = 0, gotOptions: p } = {}) {\n        let y = await this.getPageRaw(r, {\n            chunkLimit: s,\n            chunkNumber: h,\n            gotOptions: p\n        }), t = y == null ? void 0 : y.recordMap;\n        if (!(t != null && t.block)) throw new Error(`Notion page not found \"${(0,notion_utils__WEBPACK_IMPORTED_MODULE_1__.uuidToId)(r)}\"`);\n        if (t.collection = t.collection ?? {}, t.collection_view = t.collection_view ?? {}, t.notion_user = t.notion_user ?? {}, t.collection_query = {}, t.signed_urls = {}, e) for(;;){\n            let d = (0,notion_utils__WEBPACK_IMPORTED_MODULE_1__.getPageContentBlockIds)(t).filter((i)=>!t.block[i]);\n            if (!d.length) break;\n            let c = await this.getBlocks(d, p).then((i)=>i.recordMap.block);\n            t.block = {\n                ...t.block,\n                ...c\n            };\n        }\n        let _ = (0,notion_utils__WEBPACK_IMPORTED_MODULE_1__.getPageContentBlockIds)(t);\n        if (a) {\n            let d = _.flatMap((c)=>{\n                var m;\n                let i = t.block[c].value, g = i && (i.type === \"collection_view\" || i.type === \"collection_view_page\") && (0,notion_utils__WEBPACK_IMPORTED_MODULE_1__.getBlockCollectionId)(i, t);\n                return g ? (m = i.view_ids) == null ? void 0 : m.map((b)=>({\n                        collectionId: g,\n                        collectionViewId: b\n                    })) : [];\n            });\n            await (0,p_map__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(d, async (c)=>{\n                var b, k;\n                let { collectionId: i, collectionViewId: g } = c, m = (b = t.collection_view[g]) == null ? void 0 : b.value;\n                try {\n                    let l = await this.getCollectionData(i, g, m, {\n                        gotOptions: p\n                    });\n                    t.block = {\n                        ...t.block,\n                        ...l.recordMap.block\n                    }, t.collection = {\n                        ...t.collection,\n                        ...l.recordMap.collection\n                    }, t.collection_view = {\n                        ...t.collection_view,\n                        ...l.recordMap.collection_view\n                    }, t.notion_user = {\n                        ...t.notion_user,\n                        ...l.recordMap.notion_user\n                    }, t.collection_query[i] = {\n                        ...t.collection_query[i],\n                        [g]: (k = l.result) == null ? void 0 : k.reducerResults\n                    };\n                } catch (l) {\n                    console.warn(\"NotionAPI collectionQuery error\", r, l.message), console.error(l);\n                }\n            }, {\n                concurrency: n\n            });\n        }\n        return o && await this.addSignedUrls({\n            recordMap: t,\n            contentBlockIds: _,\n            gotOptions: p\n        }), t;\n    }\n    async addSignedUrls({ recordMap: r, contentBlockIds: n, gotOptions: e = {} }) {\n        r.signed_urls = {}, n || (n = (0,notion_utils__WEBPACK_IMPORTED_MODULE_1__.getPageContentBlockIds)(r));\n        let a = n.flatMap((o)=>{\n            var h, p, y, t, _, d;\n            let s = (h = r.block[o]) == null ? void 0 : h.value;\n            if (s && (s.type === \"pdf\" || s.type === \"audio\" || s.type === \"image\" && ((p = s.file_ids) == null ? void 0 : p.length) || s.type === \"video\" || s.type === \"file\" || s.type === \"page\")) {\n                let c = s.type === \"page\" ? (y = s.format) == null ? void 0 : y.page_cover : (d = (_ = (t = s.properties) == null ? void 0 : t.source) == null ? void 0 : _[0]) == null ? void 0 : d[0];\n                if (c) return c.includes(\"secure.notion-static.com\") ? {\n                    permissionRecord: {\n                        table: \"block\",\n                        id: s.id\n                    },\n                    url: c\n                } : [];\n            }\n            return [];\n        });\n        if (a.length > 0) try {\n            let { signedUrls: o } = await this.getSignedFileUrls(a, e);\n            if (o.length === a.length) for(let s = 0; s < a.length; ++s){\n                let h = a[s], p = o[s];\n                r.signed_urls[h.permissionRecord.id] = p;\n            }\n        } catch (o) {\n            console.warn(\"NotionAPI getSignedfileUrls error\", o);\n        }\n    }\n    async getPageRaw(r, { gotOptions: n, chunkLimit: e = 100, chunkNumber: a = 0 } = {}) {\n        let o = (0,notion_utils__WEBPACK_IMPORTED_MODULE_1__.parsePageId)(r);\n        if (!o) throw new Error(`invalid notion pageId \"${r}\"`);\n        let s = {\n            pageId: o,\n            limit: e,\n            chunkNumber: a,\n            cursor: {\n                stack: []\n            },\n            verticalColumns: !1\n        };\n        return this.fetch({\n            endpoint: \"loadPageChunk\",\n            body: s,\n            gotOptions: n\n        });\n    }\n    async getCollectionData(r, n, e, { limit: a = 9999, searchQuery: o = \"\", userTimeZone: s = this._userTimeZone, loadContentCover: h = !0, gotOptions: p } = {}) {\n        var i, g, m, b, k, l, q, T, I, N, C, P;\n        let y = e == null ? void 0 : e.type, t = y === \"board\", _ = t ? (i = e == null ? void 0 : e.format) == null ? void 0 : i.board_columns_by : (g = e == null ? void 0 : e.format) == null ? void 0 : g.collection_group_by, d = [];\n        (m = e == null ? void 0 : e.format) != null && m.property_filters && (d = (b = e.format) == null ? void 0 : b.property_filters.map((f)=>{\n            var B, R;\n            return {\n                filter: (B = f == null ? void 0 : f.filter) == null ? void 0 : B.filter,\n                property: (R = f == null ? void 0 : f.filter) == null ? void 0 : R.property\n            };\n        })), (l = (k = e == null ? void 0 : e.query2) == null ? void 0 : k.filter) != null && l.filters && d.push(...e.query2.filter.filters);\n        let c = {\n            type: \"reducer\",\n            reducers: {\n                collection_group_results: {\n                    type: \"results\",\n                    limit: a,\n                    loadContentCover: h\n                }\n            },\n            sort: [],\n            ...e == null ? void 0 : e.query2,\n            filter: {\n                filters: d,\n                operator: \"and\"\n            },\n            searchQuery: o,\n            userTimeZone: s\n        };\n        if (_) {\n            let f = ((q = e == null ? void 0 : e.format) == null ? void 0 : q.board_columns) || ((T = e == null ? void 0 : e.format) == null ? void 0 : T.collection_groups) || [], B = [\n                t ? \"board\" : \"group_aggregation\",\n                \"results\"\n            ], R = {\n                checkbox: \"checkbox_is\",\n                url: \"string_starts_with\",\n                text: \"string_starts_with\",\n                select: \"enum_is\",\n                multi_select: \"enum_contains\",\n                created_time: \"date_is_within\",\n                undefined: \"is_empty\"\n            }, x = {};\n            for (let v of f){\n                let { property: D, value: { value: u, type: J } } = v;\n                for (let S of B){\n                    let F = S === \"results\" ? {\n                        type: S,\n                        limit: a\n                    } : {\n                        type: \"aggregation\",\n                        aggregation: {\n                            aggregator: \"count\"\n                        }\n                    }, U = typeof u > \"u\", M = u == null ? void 0 : u.range, A = U ? \"uncategorized\" : M ? ((I = u.range) == null ? void 0 : I.start_date) || ((N = u.range) == null ? void 0 : N.end_date) : (u == null ? void 0 : u.value) || u, Z = !U && (M || (u == null ? void 0 : u.value) || u);\n                    x[`${S}:${J}:${A}`] = {\n                        ...F,\n                        filter: {\n                            operator: \"and\",\n                            filters: [\n                                {\n                                    property: D,\n                                    filter: {\n                                        operator: U ? \"is_empty\" : R[J],\n                                        ...!U && {\n                                            value: {\n                                                type: \"exact\",\n                                                value: Z\n                                            }\n                                        }\n                                    }\n                                }\n                            ]\n                        }\n                    };\n                }\n            }\n            let L = t ? \"board_columns\" : `${y}_groups`;\n            c = {\n                type: \"reducer\",\n                reducers: {\n                    [L]: {\n                        type: \"groups\",\n                        groupBy: _,\n                        ...((C = e == null ? void 0 : e.query2) == null ? void 0 : C.filter) && {\n                            filter: (P = e == null ? void 0 : e.query2) == null ? void 0 : P.filter\n                        },\n                        groupSortPreference: f.map((v)=>v == null ? void 0 : v.value),\n                        limit: a\n                    },\n                    ...x\n                },\n                ...e == null ? void 0 : e.query2,\n                searchQuery: o,\n                userTimeZone: s,\n                filter: {\n                    filters: d,\n                    operator: \"and\"\n                }\n            };\n        }\n        return this.fetch({\n            endpoint: \"queryCollection\",\n            body: {\n                collection: {\n                    id: r\n                },\n                collectionView: {\n                    id: n\n                },\n                loader: c\n            },\n            gotOptions: p\n        });\n    }\n    async getUsers(r, n) {\n        return this.fetch({\n            endpoint: \"getRecordValues\",\n            body: {\n                requests: r.map((e)=>({\n                        id: e,\n                        table: \"notion_user\"\n                    }))\n            },\n            gotOptions: n\n        });\n    }\n    async getBlocks(r, n) {\n        return this.fetch({\n            endpoint: \"syncRecordValues\",\n            body: {\n                requests: r.map((e)=>({\n                        table: \"block\",\n                        id: e,\n                        version: -1\n                    }))\n            },\n            gotOptions: n\n        });\n    }\n    async getSignedFileUrls(r, n) {\n        return this.fetch({\n            endpoint: \"getSignedFileUrls\",\n            body: {\n                urls: r\n            },\n            gotOptions: n\n        });\n    }\n    async search(r, n) {\n        let e = {\n            type: \"BlocksInAncestor\",\n            source: \"quick_find_public\",\n            ancestorId: (0,notion_utils__WEBPACK_IMPORTED_MODULE_1__.parsePageId)(r.ancestorId),\n            sort: \"Relevance\",\n            limit: r.limit || 20,\n            query: r.query,\n            filters: {\n                isDeletedOnly: !1,\n                isNavigableOnly: !1,\n                excludeTemplates: !0,\n                requireEditPermissions: !1,\n                ancestors: [],\n                createdBy: [],\n                editedBy: [],\n                lastEditedTime: {},\n                createdTime: {},\n                ...r.filters\n            }\n        };\n        return this.fetch({\n            endpoint: \"search\",\n            body: e,\n            gotOptions: n\n        });\n    }\n    async fetch({ endpoint: r, body: n, gotOptions: e, headers: a }) {\n        let o = {\n            ...a,\n            ...e == null ? void 0 : e.headers,\n            \"Content-Type\": \"application/json\"\n        };\n        this._authToken && (o.cookie = `token_v2=${this._authToken}`), this._activeUser && (o[\"x-notion-active-user-header\"] = this._activeUser);\n        let s = `${this._apiBaseUrl}/${r}`;\n        return got__WEBPACK_IMPORTED_MODULE_2__.post(s, {\n            ...e,\n            json: n,\n            headers: o\n        }).json();\n    }\n};\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/build/index.js\n");

/***/ })

};
;