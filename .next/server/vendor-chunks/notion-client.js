"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/notion-client";
exports.ids = ["vendor-chunks/notion-client"];
exports.modules = {

/***/ "(rsc)/./node_modules/notion-client/node_modules/@szmarczak/http-timer/dist/source/index.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/@szmarczak/http-timer/dist/source/index.js ***!
  \********************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst defer_to_connect_1 = __webpack_require__(/*! defer-to-connect */ \"(rsc)/./node_modules/defer-to-connect/dist/source/index.js\");\nconst nodejsMajorVersion = Number(process.versions.node.split(\".\")[0]);\nconst timer = (request)=>{\n    const timings = {\n        start: Date.now(),\n        socket: undefined,\n        lookup: undefined,\n        connect: undefined,\n        secureConnect: undefined,\n        upload: undefined,\n        response: undefined,\n        end: undefined,\n        error: undefined,\n        abort: undefined,\n        phases: {\n            wait: undefined,\n            dns: undefined,\n            tcp: undefined,\n            tls: undefined,\n            request: undefined,\n            firstByte: undefined,\n            download: undefined,\n            total: undefined\n        }\n    };\n    request.timings = timings;\n    const handleError = (origin)=>{\n        const emit = origin.emit.bind(origin);\n        origin.emit = (event, ...args)=>{\n            // Catches the `error` event\n            if (event === \"error\") {\n                timings.error = Date.now();\n                timings.phases.total = timings.error - timings.start;\n                origin.emit = emit;\n            }\n            // Saves the original behavior\n            return emit(event, ...args);\n        };\n    };\n    handleError(request);\n    request.prependOnceListener(\"abort\", ()=>{\n        timings.abort = Date.now();\n        // Let the `end` response event be responsible for setting the total phase,\n        // unless the Node.js major version is >= 13.\n        if (!timings.response || nodejsMajorVersion >= 13) {\n            timings.phases.total = Date.now() - timings.start;\n        }\n    });\n    const onSocket = (socket)=>{\n        timings.socket = Date.now();\n        timings.phases.wait = timings.socket - timings.start;\n        const lookupListener = ()=>{\n            timings.lookup = Date.now();\n            timings.phases.dns = timings.lookup - timings.socket;\n        };\n        socket.prependOnceListener(\"lookup\", lookupListener);\n        defer_to_connect_1.default(socket, {\n            connect: ()=>{\n                timings.connect = Date.now();\n                if (timings.lookup === undefined) {\n                    socket.removeListener(\"lookup\", lookupListener);\n                    timings.lookup = timings.connect;\n                    timings.phases.dns = timings.lookup - timings.socket;\n                }\n                timings.phases.tcp = timings.connect - timings.lookup;\n            // This callback is called before flushing any data,\n            // so we don't need to set `timings.phases.request` here.\n            },\n            secureConnect: ()=>{\n                timings.secureConnect = Date.now();\n                timings.phases.tls = timings.secureConnect - timings.connect;\n            }\n        });\n    };\n    if (request.socket) {\n        onSocket(request.socket);\n    } else {\n        request.prependOnceListener(\"socket\", onSocket);\n    }\n    const onUpload = ()=>{\n        var _a;\n        timings.upload = Date.now();\n        timings.phases.request = timings.upload - (_a = timings.secureConnect, _a !== null && _a !== void 0 ? _a : timings.connect);\n    };\n    const writableFinished = ()=>{\n        if (typeof request.writableFinished === \"boolean\") {\n            return request.writableFinished;\n        }\n        // Node.js doesn't have `request.writableFinished` property\n        return request.finished && request.outputSize === 0 && (!request.socket || request.socket.writableLength === 0);\n    };\n    if (writableFinished()) {\n        onUpload();\n    } else {\n        request.prependOnceListener(\"finish\", onUpload);\n    }\n    request.prependOnceListener(\"response\", (response)=>{\n        timings.response = Date.now();\n        timings.phases.firstByte = timings.response - timings.upload;\n        response.timings = timings;\n        handleError(response);\n        response.prependOnceListener(\"end\", ()=>{\n            timings.end = Date.now();\n            timings.phases.download = timings.end - timings.response;\n            timings.phases.total = timings.end - timings.start;\n        });\n    });\n    return timings;\n};\nexports[\"default\"] = timer;\n// For CommonJS default export support\nmodule.exports = timer;\nmodule.exports[\"default\"] = timer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/@szmarczak/http-timer/dist/source/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/cacheable-lookup/source/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/cacheable-lookup/source/index.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { V4MAPPED, ADDRCONFIG, ALL, promises: { Resolver: AsyncResolver }, lookup: dnsLookup } = __webpack_require__(/*! dns */ \"dns\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst kCacheableLookupCreateConnection = Symbol(\"cacheableLookupCreateConnection\");\nconst kCacheableLookupInstance = Symbol(\"cacheableLookupInstance\");\nconst kExpires = Symbol(\"expires\");\nconst supportsALL = typeof ALL === \"number\";\nconst verifyAgent = (agent)=>{\n    if (!(agent && typeof agent.createConnection === \"function\")) {\n        throw new Error(\"Expected an Agent instance as the first argument\");\n    }\n};\nconst map4to6 = (entries)=>{\n    for (const entry of entries){\n        if (entry.family === 6) {\n            continue;\n        }\n        entry.address = `::ffff:${entry.address}`;\n        entry.family = 6;\n    }\n};\nconst getIfaceInfo = ()=>{\n    let has4 = false;\n    let has6 = false;\n    for (const device of Object.values(os.networkInterfaces())){\n        for (const iface of device){\n            if (iface.internal) {\n                continue;\n            }\n            if (iface.family === \"IPv6\") {\n                has6 = true;\n            } else {\n                has4 = true;\n            }\n            if (has4 && has6) {\n                return {\n                    has4,\n                    has6\n                };\n            }\n        }\n    }\n    return {\n        has4,\n        has6\n    };\n};\nconst isIterable = (map)=>{\n    return Symbol.iterator in map;\n};\nconst ttl = {\n    ttl: true\n};\nconst all = {\n    all: true\n};\nclass CacheableLookup {\n    constructor({ cache = new Map(), maxTtl = Infinity, fallbackDuration = 3600, errorTtl = 0.15, resolver = new AsyncResolver(), lookup = dnsLookup } = {}){\n        this.maxTtl = maxTtl;\n        this.errorTtl = errorTtl;\n        this._cache = cache;\n        this._resolver = resolver;\n        this._dnsLookup = promisify(lookup);\n        if (this._resolver instanceof AsyncResolver) {\n            this._resolve4 = this._resolver.resolve4.bind(this._resolver);\n            this._resolve6 = this._resolver.resolve6.bind(this._resolver);\n        } else {\n            this._resolve4 = promisify(this._resolver.resolve4.bind(this._resolver));\n            this._resolve6 = promisify(this._resolver.resolve6.bind(this._resolver));\n        }\n        this._iface = getIfaceInfo();\n        this._pending = {};\n        this._nextRemovalTime = false;\n        this._hostnamesToFallback = new Set();\n        if (fallbackDuration < 1) {\n            this._fallback = false;\n        } else {\n            this._fallback = true;\n            const interval = setInterval(()=>{\n                this._hostnamesToFallback.clear();\n            }, fallbackDuration * 1000);\n            /* istanbul ignore next: There is no `interval.unref()` when running inside an Electron renderer */ if (interval.unref) {\n                interval.unref();\n            }\n        }\n        this.lookup = this.lookup.bind(this);\n        this.lookupAsync = this.lookupAsync.bind(this);\n    }\n    set servers(servers) {\n        this.clear();\n        this._resolver.setServers(servers);\n    }\n    get servers() {\n        return this._resolver.getServers();\n    }\n    lookup(hostname, options, callback) {\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        } else if (typeof options === \"number\") {\n            options = {\n                family: options\n            };\n        }\n        if (!callback) {\n            throw new Error(\"Callback must be a function.\");\n        }\n        // eslint-disable-next-line promise/prefer-await-to-then\n        this.lookupAsync(hostname, options).then((result)=>{\n            if (options.all) {\n                callback(null, result);\n            } else {\n                callback(null, result.address, result.family, result.expires, result.ttl);\n            }\n        }, callback);\n    }\n    async lookupAsync(hostname, options = {}) {\n        if (typeof options === \"number\") {\n            options = {\n                family: options\n            };\n        }\n        let cached = await this.query(hostname);\n        if (options.family === 6) {\n            const filtered = cached.filter((entry)=>entry.family === 6);\n            if (options.hints & V4MAPPED) {\n                if (supportsALL && options.hints & ALL || filtered.length === 0) {\n                    map4to6(cached);\n                } else {\n                    cached = filtered;\n                }\n            } else {\n                cached = filtered;\n            }\n        } else if (options.family === 4) {\n            cached = cached.filter((entry)=>entry.family === 4);\n        }\n        if (options.hints & ADDRCONFIG) {\n            const { _iface } = this;\n            cached = cached.filter((entry)=>entry.family === 6 ? _iface.has6 : _iface.has4);\n        }\n        if (cached.length === 0) {\n            const error = new Error(`cacheableLookup ENOTFOUND ${hostname}`);\n            error.code = \"ENOTFOUND\";\n            error.hostname = hostname;\n            throw error;\n        }\n        if (options.all) {\n            return cached;\n        }\n        return cached[0];\n    }\n    async query(hostname) {\n        let cached = await this._cache.get(hostname);\n        if (!cached) {\n            const pending = this._pending[hostname];\n            if (pending) {\n                cached = await pending;\n            } else {\n                const newPromise = this.queryAndCache(hostname);\n                this._pending[hostname] = newPromise;\n                try {\n                    cached = await newPromise;\n                } finally{\n                    delete this._pending[hostname];\n                }\n            }\n        }\n        cached = cached.map((entry)=>{\n            return {\n                ...entry\n            };\n        });\n        return cached;\n    }\n    async _resolve(hostname) {\n        const wrap = async (promise)=>{\n            try {\n                return await promise;\n            } catch (error) {\n                if (error.code === \"ENODATA\" || error.code === \"ENOTFOUND\") {\n                    return [];\n                }\n                throw error;\n            }\n        };\n        // ANY is unsafe as it doesn't trigger new queries in the underlying server.\n        const [A, AAAA] = await Promise.all([\n            this._resolve4(hostname, ttl),\n            this._resolve6(hostname, ttl)\n        ].map((promise)=>wrap(promise)));\n        let aTtl = 0;\n        let aaaaTtl = 0;\n        let cacheTtl = 0;\n        const now = Date.now();\n        for (const entry of A){\n            entry.family = 4;\n            entry.expires = now + entry.ttl * 1000;\n            aTtl = Math.max(aTtl, entry.ttl);\n        }\n        for (const entry of AAAA){\n            entry.family = 6;\n            entry.expires = now + entry.ttl * 1000;\n            aaaaTtl = Math.max(aaaaTtl, entry.ttl);\n        }\n        if (A.length > 0) {\n            if (AAAA.length > 0) {\n                cacheTtl = Math.min(aTtl, aaaaTtl);\n            } else {\n                cacheTtl = aTtl;\n            }\n        } else {\n            cacheTtl = aaaaTtl;\n        }\n        return {\n            entries: [\n                ...A,\n                ...AAAA\n            ],\n            cacheTtl\n        };\n    }\n    async _lookup(hostname) {\n        try {\n            const entries = await this._dnsLookup(hostname, {\n                all: true\n            });\n            return {\n                entries,\n                cacheTtl: 0\n            };\n        } catch (_) {\n            return {\n                entries: [],\n                cacheTtl: 0\n            };\n        }\n    }\n    async _set(hostname, data, cacheTtl) {\n        if (this.maxTtl > 0 && cacheTtl > 0) {\n            cacheTtl = Math.min(cacheTtl, this.maxTtl) * 1000;\n            data[kExpires] = Date.now() + cacheTtl;\n            try {\n                await this._cache.set(hostname, data, cacheTtl);\n            } catch (error) {\n                this.lookupAsync = async ()=>{\n                    const cacheError = new Error(\"Cache Error. Please recreate the CacheableLookup instance.\");\n                    cacheError.cause = error;\n                    throw cacheError;\n                };\n            }\n            if (isIterable(this._cache)) {\n                this._tick(cacheTtl);\n            }\n        }\n    }\n    async queryAndCache(hostname) {\n        if (this._hostnamesToFallback.has(hostname)) {\n            return this._dnsLookup(hostname, all);\n        }\n        let query = await this._resolve(hostname);\n        if (query.entries.length === 0 && this._fallback) {\n            query = await this._lookup(hostname);\n            if (query.entries.length !== 0) {\n                // Use `dns.lookup(...)` for that particular hostname\n                this._hostnamesToFallback.add(hostname);\n            }\n        }\n        const cacheTtl = query.entries.length === 0 ? this.errorTtl : query.cacheTtl;\n        await this._set(hostname, query.entries, cacheTtl);\n        return query.entries;\n    }\n    _tick(ms) {\n        const nextRemovalTime = this._nextRemovalTime;\n        if (!nextRemovalTime || ms < nextRemovalTime) {\n            clearTimeout(this._removalTimeout);\n            this._nextRemovalTime = ms;\n            this._removalTimeout = setTimeout(()=>{\n                this._nextRemovalTime = false;\n                let nextExpiry = Infinity;\n                const now = Date.now();\n                for (const [hostname, entries] of this._cache){\n                    const expires = entries[kExpires];\n                    if (now >= expires) {\n                        this._cache.delete(hostname);\n                    } else if (expires < nextExpiry) {\n                        nextExpiry = expires;\n                    }\n                }\n                if (nextExpiry !== Infinity) {\n                    this._tick(nextExpiry - now);\n                }\n            }, ms);\n            /* istanbul ignore next: There is no `timeout.unref()` when running inside an Electron renderer */ if (this._removalTimeout.unref) {\n                this._removalTimeout.unref();\n            }\n        }\n    }\n    install(agent) {\n        verifyAgent(agent);\n        if (kCacheableLookupCreateConnection in agent) {\n            throw new Error(\"CacheableLookup has been already installed\");\n        }\n        agent[kCacheableLookupCreateConnection] = agent.createConnection;\n        agent[kCacheableLookupInstance] = this;\n        agent.createConnection = (options, callback)=>{\n            if (!(\"lookup\" in options)) {\n                options.lookup = this.lookup;\n            }\n            return agent[kCacheableLookupCreateConnection](options, callback);\n        };\n    }\n    uninstall(agent) {\n        verifyAgent(agent);\n        if (agent[kCacheableLookupCreateConnection]) {\n            if (agent[kCacheableLookupInstance] !== this) {\n                throw new Error(\"The agent is not owned by this CacheableLookup instance\");\n            }\n            agent.createConnection = agent[kCacheableLookupCreateConnection];\n            delete agent[kCacheableLookupCreateConnection];\n            delete agent[kCacheableLookupInstance];\n        }\n    }\n    updateInterfaceInfo() {\n        const { _iface } = this;\n        this._iface = getIfaceInfo();\n        if (_iface.has4 && !this._iface.has4 || _iface.has6 && !this._iface.has6) {\n            this._cache.clear();\n        }\n    }\n    clear(hostname) {\n        if (hostname) {\n            this._cache.delete(hostname);\n            return;\n        }\n        this._cache.clear();\n    }\n}\nmodule.exports = CacheableLookup;\nmodule.exports[\"default\"] = CacheableLookup;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/cacheable-lookup/source/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/create-rejection.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/as-promise/create-rejection.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/types.js\");\nfunction createRejection(error, ...beforeErrorGroups) {\n    const promise = (async ()=>{\n        if (error instanceof types_1.RequestError) {\n            try {\n                for (const hooks of beforeErrorGroups){\n                    if (hooks) {\n                        for (const hook of hooks){\n                            // eslint-disable-next-line no-await-in-loop\n                            error = await hook(error);\n                        }\n                    }\n                }\n            } catch (error_) {\n                error = error_;\n            }\n        }\n        throw error;\n    })();\n    const returnPromise = ()=>promise;\n    promise.json = returnPromise;\n    promise.text = returnPromise;\n    promise.buffer = returnPromise;\n    promise.on = returnPromise;\n    return promise;\n}\nexports[\"default\"] = createRejection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2FzLXByb21pc2UvY3JlYXRlLXJlamVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxVQUFVQyxtQkFBT0EsQ0FBQyxvR0FBUztBQUNqQyxTQUFTQyxnQkFBZ0JDLEtBQUssRUFBRSxHQUFHQyxpQkFBaUI7SUFDaEQsTUFBTUMsVUFBVSxDQUFDO1FBQ2IsSUFBSUYsaUJBQWlCSCxRQUFRTSxZQUFZLEVBQUU7WUFDdkMsSUFBSTtnQkFDQSxLQUFLLE1BQU1DLFNBQVNILGtCQUFtQjtvQkFDbkMsSUFBSUcsT0FBTzt3QkFDUCxLQUFLLE1BQU1DLFFBQVFELE1BQU87NEJBQ3RCLDRDQUE0Qzs0QkFDNUNKLFFBQVEsTUFBTUssS0FBS0w7d0JBQ3ZCO29CQUNKO2dCQUNKO1lBQ0osRUFDQSxPQUFPTSxRQUFRO2dCQUNYTixRQUFRTTtZQUNaO1FBQ0o7UUFDQSxNQUFNTjtJQUNWO0lBQ0EsTUFBTU8sZ0JBQWdCLElBQU1MO0lBQzVCQSxRQUFRTSxJQUFJLEdBQUdEO0lBQ2ZMLFFBQVFPLElBQUksR0FBR0Y7SUFDZkwsUUFBUVEsTUFBTSxHQUFHSDtJQUNqQkwsUUFBUVMsRUFBRSxHQUFHSjtJQUNiLE9BQU9MO0FBQ1g7QUFDQVAsa0JBQWUsR0FBR0kiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1leGFtcGxlLWZ1bGwvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2FzLXByb21pc2UvY3JlYXRlLXJlamVjdGlvbi5qcz83MjUyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuZnVuY3Rpb24gY3JlYXRlUmVqZWN0aW9uKGVycm9yLCAuLi5iZWZvcmVFcnJvckdyb3Vwcykge1xuICAgIGNvbnN0IHByb21pc2UgPSAoYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiB0eXBlc18xLlJlcXVlc3RFcnJvcikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGhvb2tzIG9mIGJlZm9yZUVycm9yR3JvdXBzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChob29rcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBob29rIG9mIGhvb2tzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWF3YWl0LWluLWxvb3BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IGF3YWl0IGhvb2soZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yXykge1xuICAgICAgICAgICAgICAgIGVycm9yID0gZXJyb3JfO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH0pKCk7XG4gICAgY29uc3QgcmV0dXJuUHJvbWlzZSA9ICgpID0+IHByb21pc2U7XG4gICAgcHJvbWlzZS5qc29uID0gcmV0dXJuUHJvbWlzZTtcbiAgICBwcm9taXNlLnRleHQgPSByZXR1cm5Qcm9taXNlO1xuICAgIHByb21pc2UuYnVmZmVyID0gcmV0dXJuUHJvbWlzZTtcbiAgICBwcm9taXNlLm9uID0gcmV0dXJuUHJvbWlzZTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVJlamVjdGlvbjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInR5cGVzXzEiLCJyZXF1aXJlIiwiY3JlYXRlUmVqZWN0aW9uIiwiZXJyb3IiLCJiZWZvcmVFcnJvckdyb3VwcyIsInByb21pc2UiLCJSZXF1ZXN0RXJyb3IiLCJob29rcyIsImhvb2siLCJlcnJvcl8iLCJyZXR1cm5Qcm9taXNlIiwianNvbiIsInRleHQiLCJidWZmZXIiLCJvbiIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/create-rejection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/as-promise/index.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\nconst PCancelable = __webpack_require__(/*! p-cancelable */ \"(rsc)/./node_modules/notion-client/node_modules/p-cancelable/index.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/types.js\");\nconst parse_body_1 = __webpack_require__(/*! ./parse-body */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/parse-body.js\");\nconst core_1 = __webpack_require__(/*! ../core */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/index.js\");\nconst proxy_events_1 = __webpack_require__(/*! ../core/utils/proxy-events */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/proxy-events.js\");\nconst get_buffer_1 = __webpack_require__(/*! ../core/utils/get-buffer */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/get-buffer.js\");\nconst is_response_ok_1 = __webpack_require__(/*! ../core/utils/is-response-ok */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/is-response-ok.js\");\nconst proxiedRequestEvents = [\n    \"request\",\n    \"response\",\n    \"redirect\",\n    \"uploadProgress\",\n    \"downloadProgress\"\n];\nfunction asPromise(normalizedOptions) {\n    let globalRequest;\n    let globalResponse;\n    const emitter = new events_1.EventEmitter();\n    const promise = new PCancelable((resolve, reject, onCancel)=>{\n        const makeRequest = (retryCount)=>{\n            const request = new core_1.default(undefined, normalizedOptions);\n            request.retryCount = retryCount;\n            request._noPipe = true;\n            onCancel(()=>request.destroy());\n            onCancel.shouldReject = false;\n            onCancel(()=>reject(new types_1.CancelError(request)));\n            globalRequest = request;\n            request.once(\"response\", async (response)=>{\n                var _a;\n                response.retryCount = retryCount;\n                if (response.request.aborted) {\n                    // Canceled while downloading - will throw a `CancelError` or `TimeoutError` error\n                    return;\n                }\n                // Download body\n                let rawBody;\n                try {\n                    rawBody = await get_buffer_1.default(request);\n                    response.rawBody = rawBody;\n                } catch (_b) {\n                    // The same error is caught below.\n                    // See request.once('error')\n                    return;\n                }\n                if (request._isAboutToError) {\n                    return;\n                }\n                // Parse body\n                const contentEncoding = ((_a = response.headers[\"content-encoding\"]) !== null && _a !== void 0 ? _a : \"\").toLowerCase();\n                const isCompressed = [\n                    \"gzip\",\n                    \"deflate\",\n                    \"br\"\n                ].includes(contentEncoding);\n                const { options } = request;\n                if (isCompressed && !options.decompress) {\n                    response.body = rawBody;\n                } else {\n                    try {\n                        response.body = parse_body_1.default(response, options.responseType, options.parseJson, options.encoding);\n                    } catch (error) {\n                        // Fallback to `utf8`\n                        response.body = rawBody.toString();\n                        if (is_response_ok_1.isResponseOk(response)) {\n                            request._beforeError(error);\n                            return;\n                        }\n                    }\n                }\n                try {\n                    for (const [index, hook] of options.hooks.afterResponse.entries()){\n                        // @ts-expect-error TS doesn't notice that CancelableRequest is a Promise\n                        // eslint-disable-next-line no-await-in-loop\n                        response = await hook(response, async (updatedOptions)=>{\n                            const typedOptions = core_1.default.normalizeArguments(undefined, {\n                                ...updatedOptions,\n                                retry: {\n                                    calculateDelay: ()=>0\n                                },\n                                throwHttpErrors: false,\n                                resolveBodyOnly: false\n                            }, options);\n                            // Remove any further hooks for that request, because we'll call them anyway.\n                            // The loop continues. We don't want duplicates (asPromise recursion).\n                            typedOptions.hooks.afterResponse = typedOptions.hooks.afterResponse.slice(0, index);\n                            for (const hook of typedOptions.hooks.beforeRetry){\n                                // eslint-disable-next-line no-await-in-loop\n                                await hook(typedOptions);\n                            }\n                            const promise = asPromise(typedOptions);\n                            onCancel(()=>{\n                                promise.catch(()=>{});\n                                promise.cancel();\n                            });\n                            return promise;\n                        });\n                    }\n                } catch (error) {\n                    request._beforeError(new types_1.RequestError(error.message, error, request));\n                    return;\n                }\n                if (!is_response_ok_1.isResponseOk(response)) {\n                    request._beforeError(new types_1.HTTPError(response));\n                    return;\n                }\n                globalResponse = response;\n                resolve(request.options.resolveBodyOnly ? response.body : response);\n            });\n            const onError = (error)=>{\n                if (promise.isCanceled) {\n                    return;\n                }\n                const { options } = request;\n                if (error instanceof types_1.HTTPError && !options.throwHttpErrors) {\n                    const { response } = error;\n                    resolve(request.options.resolveBodyOnly ? response.body : response);\n                    return;\n                }\n                reject(error);\n            };\n            request.once(\"error\", onError);\n            const previousBody = request.options.body;\n            request.once(\"retry\", (newRetryCount, error)=>{\n                var _a, _b;\n                if (previousBody === ((_a = error.request) === null || _a === void 0 ? void 0 : _a.options.body) && is_1.default.nodeStream((_b = error.request) === null || _b === void 0 ? void 0 : _b.options.body)) {\n                    onError(error);\n                    return;\n                }\n                makeRequest(newRetryCount);\n            });\n            proxy_events_1.default(request, emitter, proxiedRequestEvents);\n        };\n        makeRequest(0);\n    });\n    promise.on = (event, fn)=>{\n        emitter.on(event, fn);\n        return promise;\n    };\n    const shortcut = (responseType)=>{\n        const newPromise = (async ()=>{\n            // Wait until downloading has ended\n            await promise;\n            const { options } = globalResponse.request;\n            return parse_body_1.default(globalResponse, responseType, options.parseJson, options.encoding);\n        })();\n        Object.defineProperties(newPromise, Object.getOwnPropertyDescriptors(promise));\n        return newPromise;\n    };\n    promise.json = ()=>{\n        const { headers } = globalRequest.options;\n        if (!globalRequest.writableFinished && headers.accept === undefined) {\n            headers.accept = \"application/json\";\n        }\n        return shortcut(\"json\");\n    };\n    promise.buffer = ()=>shortcut(\"buffer\");\n    promise.text = ()=>shortcut(\"text\");\n    return promise;\n}\nexports[\"default\"] = asPromise;\n__exportStar(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/types.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/normalize-arguments.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/as-promise/normalize-arguments.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\nconst normalizeArguments = (options, defaults)=>{\n    if (is_1.default.null_(options.encoding)) {\n        throw new TypeError(\"To get a Buffer, set `options.responseType` to `buffer` instead\");\n    }\n    is_1.assert.any([\n        is_1.default.string,\n        is_1.default.undefined\n    ], options.encoding);\n    is_1.assert.any([\n        is_1.default.boolean,\n        is_1.default.undefined\n    ], options.resolveBodyOnly);\n    is_1.assert.any([\n        is_1.default.boolean,\n        is_1.default.undefined\n    ], options.methodRewriting);\n    is_1.assert.any([\n        is_1.default.boolean,\n        is_1.default.undefined\n    ], options.isStream);\n    is_1.assert.any([\n        is_1.default.string,\n        is_1.default.undefined\n    ], options.responseType);\n    // `options.responseType`\n    if (options.responseType === undefined) {\n        options.responseType = \"text\";\n    }\n    // `options.retry`\n    const { retry } = options;\n    if (defaults) {\n        options.retry = {\n            ...defaults.retry\n        };\n    } else {\n        options.retry = {\n            calculateDelay: (retryObject)=>retryObject.computedValue,\n            limit: 0,\n            methods: [],\n            statusCodes: [],\n            errorCodes: [],\n            maxRetryAfter: undefined\n        };\n    }\n    if (is_1.default.object(retry)) {\n        options.retry = {\n            ...options.retry,\n            ...retry\n        };\n        options.retry.methods = [\n            ...new Set(options.retry.methods.map((method)=>method.toUpperCase()))\n        ];\n        options.retry.statusCodes = [\n            ...new Set(options.retry.statusCodes)\n        ];\n        options.retry.errorCodes = [\n            ...new Set(options.retry.errorCodes)\n        ];\n    } else if (is_1.default.number(retry)) {\n        options.retry.limit = retry;\n    }\n    if (is_1.default.undefined(options.retry.maxRetryAfter)) {\n        options.retry.maxRetryAfter = Math.min(// TypeScript is not smart enough to handle `.filter(x => is.number(x))`.\n        // eslint-disable-next-line unicorn/no-fn-reference-in-iterator\n        ...[\n            options.timeout.request,\n            options.timeout.connect\n        ].filter(is_1.default.number));\n    }\n    // `options.pagination`\n    if (is_1.default.object(options.pagination)) {\n        if (defaults) {\n            options.pagination = {\n                ...defaults.pagination,\n                ...options.pagination\n            };\n        }\n        const { pagination } = options;\n        if (!is_1.default.function_(pagination.transform)) {\n            throw new Error(\"`options.pagination.transform` must be implemented\");\n        }\n        if (!is_1.default.function_(pagination.shouldContinue)) {\n            throw new Error(\"`options.pagination.shouldContinue` must be implemented\");\n        }\n        if (!is_1.default.function_(pagination.filter)) {\n            throw new TypeError(\"`options.pagination.filter` must be implemented\");\n        }\n        if (!is_1.default.function_(pagination.paginate)) {\n            throw new Error(\"`options.pagination.paginate` must be implemented\");\n        }\n    }\n    // JSON mode\n    if (options.responseType === \"json\" && options.headers.accept === undefined) {\n        options.headers.accept = \"application/json\";\n    }\n    return options;\n};\nexports[\"default\"] = normalizeArguments;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/normalize-arguments.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/parse-body.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/as-promise/parse-body.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/types.js\");\nconst parseBody = (response, responseType, parseJson, encoding)=>{\n    const { rawBody } = response;\n    try {\n        if (responseType === \"text\") {\n            return rawBody.toString(encoding);\n        }\n        if (responseType === \"json\") {\n            return rawBody.length === 0 ? \"\" : parseJson(rawBody.toString());\n        }\n        if (responseType === \"buffer\") {\n            return rawBody;\n        }\n        throw new types_1.ParseError({\n            message: `Unknown body type '${responseType}'`,\n            name: \"Error\"\n        }, response);\n    } catch (error) {\n        throw new types_1.ParseError(error, response);\n    }\n};\nexports[\"default\"] = parseBody;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2FzLXByb21pc2UvcGFyc2UtYm9keS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxVQUFVQyxtQkFBT0EsQ0FBQyxvR0FBUztBQUNqQyxNQUFNQyxZQUFZLENBQUNDLFVBQVVDLGNBQWNDLFdBQVdDO0lBQ2xELE1BQU0sRUFBRUMsT0FBTyxFQUFFLEdBQUdKO0lBQ3BCLElBQUk7UUFDQSxJQUFJQyxpQkFBaUIsUUFBUTtZQUN6QixPQUFPRyxRQUFRQyxRQUFRLENBQUNGO1FBQzVCO1FBQ0EsSUFBSUYsaUJBQWlCLFFBQVE7WUFDekIsT0FBT0csUUFBUUUsTUFBTSxLQUFLLElBQUksS0FBS0osVUFBVUUsUUFBUUMsUUFBUTtRQUNqRTtRQUNBLElBQUlKLGlCQUFpQixVQUFVO1lBQzNCLE9BQU9HO1FBQ1g7UUFDQSxNQUFNLElBQUlQLFFBQVFVLFVBQVUsQ0FBQztZQUN6QkMsU0FBUyxDQUFDLG1CQUFtQixFQUFFUCxhQUFhLENBQUMsQ0FBQztZQUM5Q1EsTUFBTTtRQUNWLEdBQUdUO0lBQ1AsRUFDQSxPQUFPVSxPQUFPO1FBQ1YsTUFBTSxJQUFJYixRQUFRVSxVQUFVLENBQUNHLE9BQU9WO0lBQ3hDO0FBQ0o7QUFDQUwsa0JBQWUsR0FBR0kiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1leGFtcGxlLWZ1bGwvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2FzLXByb21pc2UvcGFyc2UtYm9keS5qcz84YzhhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuY29uc3QgcGFyc2VCb2R5ID0gKHJlc3BvbnNlLCByZXNwb25zZVR5cGUsIHBhcnNlSnNvbiwgZW5jb2RpbmcpID0+IHtcbiAgICBjb25zdCB7IHJhd0JvZHkgfSA9IHJlc3BvbnNlO1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChyZXNwb25zZVR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHJhd0JvZHkudG9TdHJpbmcoZW5jb2RpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNwb25zZVR5cGUgPT09ICdqc29uJykge1xuICAgICAgICAgICAgcmV0dXJuIHJhd0JvZHkubGVuZ3RoID09PSAwID8gJycgOiBwYXJzZUpzb24ocmF3Qm9keS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzcG9uc2VUeXBlID09PSAnYnVmZmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIHJhd0JvZHk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IHR5cGVzXzEuUGFyc2VFcnJvcih7XG4gICAgICAgICAgICBtZXNzYWdlOiBgVW5rbm93biBib2R5IHR5cGUgJyR7cmVzcG9uc2VUeXBlfSdgLFxuICAgICAgICAgICAgbmFtZTogJ0Vycm9yJ1xuICAgICAgICB9LCByZXNwb25zZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgdHlwZXNfMS5QYXJzZUVycm9yKGVycm9yLCByZXNwb25zZSk7XG4gICAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IHBhcnNlQm9keTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInR5cGVzXzEiLCJyZXF1aXJlIiwicGFyc2VCb2R5IiwicmVzcG9uc2UiLCJyZXNwb25zZVR5cGUiLCJwYXJzZUpzb24iLCJlbmNvZGluZyIsInJhd0JvZHkiLCJ0b1N0cmluZyIsImxlbmd0aCIsIlBhcnNlRXJyb3IiLCJtZXNzYWdlIiwibmFtZSIsImVycm9yIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/parse-body.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/types.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/as-promise/types.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CancelError = exports.ParseError = void 0;\nconst core_1 = __webpack_require__(/*! ../core */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/index.js\");\n/**\nAn error to be thrown when server response code is 2xx, and parsing body fails.\nIncludes a `response` property.\n*/ class ParseError extends core_1.RequestError {\n    constructor(error, response){\n        const { options } = response.request;\n        super(`${error.message} in \"${options.url.toString()}\"`, error, response.request);\n        this.name = \"ParseError\";\n    }\n}\nexports.ParseError = ParseError;\n/**\nAn error to be thrown when the request is aborted with `.cancel()`.\n*/ class CancelError extends core_1.RequestError {\n    constructor(request){\n        super(\"Promise was canceled\", {}, request);\n        this.name = \"CancelError\";\n    }\n    get isCanceled() {\n        return true;\n    }\n}\nexports.CancelError = CancelError;\n__exportStar(__webpack_require__(/*! ../core */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/index.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2FzLXByb21pc2UvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQU1DLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQzFGLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCSixPQUFPTyxjQUFjLENBQUNMLEdBQUdHLElBQUk7UUFBRUcsWUFBWTtRQUFNQyxLQUFLO1lBQWEsT0FBT04sQ0FBQyxDQUFDQyxFQUFFO1FBQUU7SUFBRTtBQUN0RixJQUFNLFNBQVNGLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDdEIsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0JGLENBQUMsQ0FBQ0csR0FBRyxHQUFHRixDQUFDLENBQUNDLEVBQUU7QUFDaEIsQ0FBQztBQUNELElBQUlNLGVBQWUsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxZQUFZLElBQUssU0FBU1AsQ0FBQyxFQUFFUSxRQUFPO0lBQ2pFLElBQUssSUFBSUMsS0FBS1QsRUFBRyxJQUFJUyxNQUFNLGFBQWEsQ0FBQ1osT0FBT2EsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0osVUFBU0MsSUFBSWIsZ0JBQWdCWSxVQUFTUixHQUFHUztBQUMzSDtBQUNBWiw4Q0FBNkM7SUFBRWdCLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RMLG1CQUFtQixHQUFHQSxrQkFBa0IsR0FBRyxLQUFLO0FBQ2hELE1BQU1RLFNBQVNDLG1CQUFPQSxDQUFDLDhGQUFTO0FBQ2hDOzs7QUFHQSxHQUNBLE1BQU1GLG1CQUFtQkMsT0FBT0UsWUFBWTtJQUN4Q0MsWUFBWUMsS0FBSyxFQUFFQyxRQUFRLENBQUU7UUFDekIsTUFBTSxFQUFFQyxPQUFPLEVBQUUsR0FBR0QsU0FBU0UsT0FBTztRQUNwQyxLQUFLLENBQUMsQ0FBQyxFQUFFSCxNQUFNSSxPQUFPLENBQUMsS0FBSyxFQUFFRixRQUFRRyxHQUFHLENBQUNDLFFBQVEsR0FBRyxDQUFDLENBQUMsRUFBRU4sT0FBT0MsU0FBU0UsT0FBTztRQUNoRixJQUFJLENBQUNJLElBQUksR0FBRztJQUNoQjtBQUNKO0FBQ0FuQixrQkFBa0IsR0FBR087QUFDckI7O0FBRUEsR0FDQSxNQUFNRCxvQkFBb0JFLE9BQU9FLFlBQVk7SUFDekNDLFlBQVlJLE9BQU8sQ0FBRTtRQUNqQixLQUFLLENBQUMsd0JBQXdCLENBQUMsR0FBR0E7UUFDbEMsSUFBSSxDQUFDSSxJQUFJLEdBQUc7SUFDaEI7SUFDQSxJQUFJQyxhQUFhO1FBQ2IsT0FBTztJQUNYO0FBQ0o7QUFDQXBCLG1CQUFtQixHQUFHTTtBQUN0QlAsYUFBYVUsbUJBQU9BLENBQUMsOEZBQVMsR0FBR1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1leGFtcGxlLWZ1bGwvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2FzLXByb21pc2UvdHlwZXMuanM/YWIxMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DYW5jZWxFcnJvciA9IGV4cG9ydHMuUGFyc2VFcnJvciA9IHZvaWQgMDtcbmNvbnN0IGNvcmVfMSA9IHJlcXVpcmUoXCIuLi9jb3JlXCIpO1xuLyoqXG5BbiBlcnJvciB0byBiZSB0aHJvd24gd2hlbiBzZXJ2ZXIgcmVzcG9uc2UgY29kZSBpcyAyeHgsIGFuZCBwYXJzaW5nIGJvZHkgZmFpbHMuXG5JbmNsdWRlcyBhIGByZXNwb25zZWAgcHJvcGVydHkuXG4qL1xuY2xhc3MgUGFyc2VFcnJvciBleHRlbmRzIGNvcmVfMS5SZXF1ZXN0RXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGVycm9yLCByZXNwb25zZSkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMgfSA9IHJlc3BvbnNlLnJlcXVlc3Q7XG4gICAgICAgIHN1cGVyKGAke2Vycm9yLm1lc3NhZ2V9IGluIFwiJHtvcHRpb25zLnVybC50b1N0cmluZygpfVwiYCwgZXJyb3IsIHJlc3BvbnNlLnJlcXVlc3QpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnUGFyc2VFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5QYXJzZUVycm9yID0gUGFyc2VFcnJvcjtcbi8qKlxuQW4gZXJyb3IgdG8gYmUgdGhyb3duIHdoZW4gdGhlIHJlcXVlc3QgaXMgYWJvcnRlZCB3aXRoIGAuY2FuY2VsKClgLlxuKi9cbmNsYXNzIENhbmNlbEVycm9yIGV4dGVuZHMgY29yZV8xLlJlcXVlc3RFcnJvciB7XG4gICAgY29uc3RydWN0b3IocmVxdWVzdCkge1xuICAgICAgICBzdXBlcignUHJvbWlzZSB3YXMgY2FuY2VsZWQnLCB7fSwgcmVxdWVzdCk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdDYW5jZWxFcnJvcic7XG4gICAgfVxuICAgIGdldCBpc0NhbmNlbGVkKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5leHBvcnRzLkNhbmNlbEVycm9yID0gQ2FuY2VsRXJyb3I7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4uL2NvcmVcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbIl9fY3JlYXRlQmluZGluZyIsIk9iamVjdCIsImNyZWF0ZSIsIm8iLCJtIiwiayIsImsyIiwidW5kZWZpbmVkIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX19leHBvcnRTdGFyIiwiZXhwb3J0cyIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJ2YWx1ZSIsIkNhbmNlbEVycm9yIiwiUGFyc2VFcnJvciIsImNvcmVfMSIsInJlcXVpcmUiLCJSZXF1ZXN0RXJyb3IiLCJjb25zdHJ1Y3RvciIsImVycm9yIiwicmVzcG9uc2UiLCJvcHRpb25zIiwicmVxdWVzdCIsIm1lc3NhZ2UiLCJ1cmwiLCJ0b1N0cmluZyIsIm5hbWUiLCJpc0NhbmNlbGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/calculate-retry-delay.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/core/calculate-retry-delay.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.retryAfterStatusCodes = void 0;\nexports.retryAfterStatusCodes = new Set([\n    413,\n    429,\n    503\n]);\nconst calculateRetryDelay = ({ attemptCount, retryOptions, error, retryAfter })=>{\n    if (attemptCount > retryOptions.limit) {\n        return 0;\n    }\n    const hasMethod = retryOptions.methods.includes(error.options.method);\n    const hasErrorCode = retryOptions.errorCodes.includes(error.code);\n    const hasStatusCode = error.response && retryOptions.statusCodes.includes(error.response.statusCode);\n    if (!hasMethod || !hasErrorCode && !hasStatusCode) {\n        return 0;\n    }\n    if (error.response) {\n        if (retryAfter) {\n            if (retryOptions.maxRetryAfter === undefined || retryAfter > retryOptions.maxRetryAfter) {\n                return 0;\n            }\n            return retryAfter;\n        }\n        if (error.response.statusCode === 413) {\n            return 0;\n        }\n    }\n    const noise = Math.random() * 100;\n    return 2 ** (attemptCount - 1) * 1000 + noise;\n};\nexports[\"default\"] = calculateRetryDelay;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvY2FsY3VsYXRlLXJldHJ5LWRlbGF5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw2QkFBNkIsR0FBRyxLQUFLO0FBQ3JDQSw2QkFBNkIsR0FBRyxJQUFJRyxJQUFJO0lBQUM7SUFBSztJQUFLO0NBQUk7QUFDdkQsTUFBTUMsc0JBQXNCLENBQUMsRUFBRUMsWUFBWSxFQUFFQyxZQUFZLEVBQUVDLEtBQUssRUFBRUMsVUFBVSxFQUFFO0lBQzFFLElBQUlILGVBQWVDLGFBQWFHLEtBQUssRUFBRTtRQUNuQyxPQUFPO0lBQ1g7SUFDQSxNQUFNQyxZQUFZSixhQUFhSyxPQUFPLENBQUNDLFFBQVEsQ0FBQ0wsTUFBTU0sT0FBTyxDQUFDQyxNQUFNO0lBQ3BFLE1BQU1DLGVBQWVULGFBQWFVLFVBQVUsQ0FBQ0osUUFBUSxDQUFDTCxNQUFNVSxJQUFJO0lBQ2hFLE1BQU1DLGdCQUFnQlgsTUFBTVksUUFBUSxJQUFJYixhQUFhYyxXQUFXLENBQUNSLFFBQVEsQ0FBQ0wsTUFBTVksUUFBUSxDQUFDRSxVQUFVO0lBQ25HLElBQUksQ0FBQ1gsYUFBYyxDQUFDSyxnQkFBZ0IsQ0FBQ0csZUFBZ0I7UUFDakQsT0FBTztJQUNYO0lBQ0EsSUFBSVgsTUFBTVksUUFBUSxFQUFFO1FBQ2hCLElBQUlYLFlBQVk7WUFDWixJQUFJRixhQUFhZ0IsYUFBYSxLQUFLQyxhQUFhZixhQUFhRixhQUFhZ0IsYUFBYSxFQUFFO2dCQUNyRixPQUFPO1lBQ1g7WUFDQSxPQUFPZDtRQUNYO1FBQ0EsSUFBSUQsTUFBTVksUUFBUSxDQUFDRSxVQUFVLEtBQUssS0FBSztZQUNuQyxPQUFPO1FBQ1g7SUFDSjtJQUNBLE1BQU1HLFFBQVFDLEtBQUtDLE1BQU0sS0FBSztJQUM5QixPQUFPLEtBQVFyQixDQUFBQSxlQUFlLEtBQU0sT0FBUW1CO0FBQ2hEO0FBQ0F4QixrQkFBZSxHQUFHSSIsInNvdXJjZXMiOlsid2VicGFjazovL25vdGlvbi14LWV4YW1wbGUtZnVsbC8uL25vZGVfbW9kdWxlcy9ub3Rpb24tY2xpZW50L25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS9jYWxjdWxhdGUtcmV0cnktZGVsYXkuanM/ZDUxMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmV0cnlBZnRlclN0YXR1c0NvZGVzID0gdm9pZCAwO1xuZXhwb3J0cy5yZXRyeUFmdGVyU3RhdHVzQ29kZXMgPSBuZXcgU2V0KFs0MTMsIDQyOSwgNTAzXSk7XG5jb25zdCBjYWxjdWxhdGVSZXRyeURlbGF5ID0gKHsgYXR0ZW1wdENvdW50LCByZXRyeU9wdGlvbnMsIGVycm9yLCByZXRyeUFmdGVyIH0pID0+IHtcbiAgICBpZiAoYXR0ZW1wdENvdW50ID4gcmV0cnlPcHRpb25zLmxpbWl0KSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBjb25zdCBoYXNNZXRob2QgPSByZXRyeU9wdGlvbnMubWV0aG9kcy5pbmNsdWRlcyhlcnJvci5vcHRpb25zLm1ldGhvZCk7XG4gICAgY29uc3QgaGFzRXJyb3JDb2RlID0gcmV0cnlPcHRpb25zLmVycm9yQ29kZXMuaW5jbHVkZXMoZXJyb3IuY29kZSk7XG4gICAgY29uc3QgaGFzU3RhdHVzQ29kZSA9IGVycm9yLnJlc3BvbnNlICYmIHJldHJ5T3B0aW9ucy5zdGF0dXNDb2Rlcy5pbmNsdWRlcyhlcnJvci5yZXNwb25zZS5zdGF0dXNDb2RlKTtcbiAgICBpZiAoIWhhc01ldGhvZCB8fCAoIWhhc0Vycm9yQ29kZSAmJiAhaGFzU3RhdHVzQ29kZSkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmIChlcnJvci5yZXNwb25zZSkge1xuICAgICAgICBpZiAocmV0cnlBZnRlcikge1xuICAgICAgICAgICAgaWYgKHJldHJ5T3B0aW9ucy5tYXhSZXRyeUFmdGVyID09PSB1bmRlZmluZWQgfHwgcmV0cnlBZnRlciA+IHJldHJ5T3B0aW9ucy5tYXhSZXRyeUFmdGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0cnlBZnRlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IucmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gNDEzKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBub2lzZSA9IE1hdGgucmFuZG9tKCkgKiAxMDA7XG4gICAgcmV0dXJuICgoMiAqKiAoYXR0ZW1wdENvdW50IC0gMSkpICogMTAwMCkgKyBub2lzZTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBjYWxjdWxhdGVSZXRyeURlbGF5O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicmV0cnlBZnRlclN0YXR1c0NvZGVzIiwiU2V0IiwiY2FsY3VsYXRlUmV0cnlEZWxheSIsImF0dGVtcHRDb3VudCIsInJldHJ5T3B0aW9ucyIsImVycm9yIiwicmV0cnlBZnRlciIsImxpbWl0IiwiaGFzTWV0aG9kIiwibWV0aG9kcyIsImluY2x1ZGVzIiwib3B0aW9ucyIsIm1ldGhvZCIsImhhc0Vycm9yQ29kZSIsImVycm9yQ29kZXMiLCJjb2RlIiwiaGFzU3RhdHVzQ29kZSIsInJlc3BvbnNlIiwic3RhdHVzQ29kZXMiLCJzdGF0dXNDb2RlIiwibWF4UmV0cnlBZnRlciIsInVuZGVmaW5lZCIsIm5vaXNlIiwiTWF0aCIsInJhbmRvbSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/calculate-retry-delay.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/core/index.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UnsupportedProtocolError = exports.ReadError = exports.TimeoutError = exports.UploadError = exports.CacheError = exports.HTTPError = exports.MaxRedirectsError = exports.RequestError = exports.setNonEnumerableProperties = exports.knownHookEvents = exports.withoutBody = exports.kIsNormalizedAlready = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst http_1 = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst http_timer_1 = __webpack_require__(/*! @szmarczak/http-timer */ \"(rsc)/./node_modules/notion-client/node_modules/@szmarczak/http-timer/dist/source/index.js\");\nconst cacheable_lookup_1 = __webpack_require__(/*! cacheable-lookup */ \"(rsc)/./node_modules/notion-client/node_modules/cacheable-lookup/source/index.js\");\nconst CacheableRequest = __webpack_require__(/*! cacheable-request */ \"(rsc)/./node_modules/cacheable-request/src/index.js\");\nconst decompressResponse = __webpack_require__(/*! decompress-response */ \"(rsc)/./node_modules/decompress-response/index.js\");\n// @ts-expect-error Missing types\nconst http2wrapper = __webpack_require__(/*! http2-wrapper */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/index.js\");\nconst lowercaseKeys = __webpack_require__(/*! lowercase-keys */ \"(rsc)/./node_modules/notion-client/node_modules/lowercase-keys/index.js\");\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\nconst get_body_size_1 = __webpack_require__(/*! ./utils/get-body-size */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/get-body-size.js\");\nconst is_form_data_1 = __webpack_require__(/*! ./utils/is-form-data */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/is-form-data.js\");\nconst proxy_events_1 = __webpack_require__(/*! ./utils/proxy-events */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/proxy-events.js\");\nconst timed_out_1 = __webpack_require__(/*! ./utils/timed-out */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/timed-out.js\");\nconst url_to_options_1 = __webpack_require__(/*! ./utils/url-to-options */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/url-to-options.js\");\nconst options_to_url_1 = __webpack_require__(/*! ./utils/options-to-url */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/options-to-url.js\");\nconst weakable_map_1 = __webpack_require__(/*! ./utils/weakable-map */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/weakable-map.js\");\nconst get_buffer_1 = __webpack_require__(/*! ./utils/get-buffer */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/get-buffer.js\");\nconst dns_ip_version_1 = __webpack_require__(/*! ./utils/dns-ip-version */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/dns-ip-version.js\");\nconst is_response_ok_1 = __webpack_require__(/*! ./utils/is-response-ok */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/is-response-ok.js\");\nconst deprecation_warning_1 = __webpack_require__(/*! ../utils/deprecation-warning */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/utils/deprecation-warning.js\");\nconst normalize_arguments_1 = __webpack_require__(/*! ../as-promise/normalize-arguments */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/normalize-arguments.js\");\nconst calculate_retry_delay_1 = __webpack_require__(/*! ./calculate-retry-delay */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/calculate-retry-delay.js\");\nlet globalDnsCache;\nconst kRequest = Symbol(\"request\");\nconst kResponse = Symbol(\"response\");\nconst kResponseSize = Symbol(\"responseSize\");\nconst kDownloadedSize = Symbol(\"downloadedSize\");\nconst kBodySize = Symbol(\"bodySize\");\nconst kUploadedSize = Symbol(\"uploadedSize\");\nconst kServerResponsesPiped = Symbol(\"serverResponsesPiped\");\nconst kUnproxyEvents = Symbol(\"unproxyEvents\");\nconst kIsFromCache = Symbol(\"isFromCache\");\nconst kCancelTimeouts = Symbol(\"cancelTimeouts\");\nconst kStartedReading = Symbol(\"startedReading\");\nconst kStopReading = Symbol(\"stopReading\");\nconst kTriggerRead = Symbol(\"triggerRead\");\nconst kBody = Symbol(\"body\");\nconst kJobs = Symbol(\"jobs\");\nconst kOriginalResponse = Symbol(\"originalResponse\");\nconst kRetryTimeout = Symbol(\"retryTimeout\");\nexports.kIsNormalizedAlready = Symbol(\"isNormalizedAlready\");\nconst supportsBrotli = is_1.default.string(process.versions.brotli);\nexports.withoutBody = new Set([\n    \"GET\",\n    \"HEAD\"\n]);\nexports.knownHookEvents = [\n    \"init\",\n    \"beforeRequest\",\n    \"beforeRedirect\",\n    \"beforeError\",\n    \"beforeRetry\",\n    // Promise-Only\n    \"afterResponse\"\n];\nfunction validateSearchParameters(searchParameters) {\n    // eslint-disable-next-line guard-for-in\n    for(const key in searchParameters){\n        const value = searchParameters[key];\n        if (!is_1.default.string(value) && !is_1.default.number(value) && !is_1.default.boolean(value) && !is_1.default.null_(value) && !is_1.default.undefined(value)) {\n            throw new TypeError(`The \\`searchParams\\` value '${String(value)}' must be a string, number, boolean or null`);\n        }\n    }\n}\nfunction isClientRequest(clientRequest) {\n    return is_1.default.object(clientRequest) && !(\"statusCode\" in clientRequest);\n}\nconst cacheableStore = new weakable_map_1.default();\nconst waitForOpenFile = async (file)=>new Promise((resolve, reject)=>{\n        const onError = (error)=>{\n            reject(error);\n        };\n        // Node.js 12 has incomplete types\n        if (!file.pending) {\n            resolve();\n        }\n        file.once(\"error\", onError);\n        file.once(\"ready\", ()=>{\n            file.off(\"error\", onError);\n            resolve();\n        });\n    });\nconst redirectCodes = new Set([\n    300,\n    301,\n    302,\n    303,\n    304,\n    307,\n    308\n]);\nconst nonEnumerableProperties = [\n    \"context\",\n    \"body\",\n    \"json\",\n    \"form\"\n];\nexports.setNonEnumerableProperties = (sources, to)=>{\n    // Non enumerable properties shall not be merged\n    const properties = {};\n    for (const source of sources){\n        if (!source) {\n            continue;\n        }\n        for (const name of nonEnumerableProperties){\n            if (!(name in source)) {\n                continue;\n            }\n            properties[name] = {\n                writable: true,\n                configurable: true,\n                enumerable: false,\n                // @ts-expect-error TS doesn't see the check above\n                value: source[name]\n            };\n        }\n    }\n    Object.defineProperties(to, properties);\n};\n/**\nAn error to be thrown when a request fails.\nContains a `code` property with error class code, like `ECONNREFUSED`.\n*/ class RequestError extends Error {\n    constructor(message, error, self){\n        var _a;\n        super(message);\n        Error.captureStackTrace(this, this.constructor);\n        this.name = \"RequestError\";\n        this.code = error.code;\n        if (self instanceof Request) {\n            Object.defineProperty(this, \"request\", {\n                enumerable: false,\n                value: self\n            });\n            Object.defineProperty(this, \"response\", {\n                enumerable: false,\n                value: self[kResponse]\n            });\n            Object.defineProperty(this, \"options\", {\n                // This fails because of TS 3.7.2 useDefineForClassFields\n                // Ref: https://github.com/microsoft/TypeScript/issues/34972\n                enumerable: false,\n                value: self.options\n            });\n        } else {\n            Object.defineProperty(this, \"options\", {\n                // This fails because of TS 3.7.2 useDefineForClassFields\n                // Ref: https://github.com/microsoft/TypeScript/issues/34972\n                enumerable: false,\n                value: self\n            });\n        }\n        this.timings = (_a = this.request) === null || _a === void 0 ? void 0 : _a.timings;\n        // Recover the original stacktrace\n        if (is_1.default.string(error.stack) && is_1.default.string(this.stack)) {\n            const indexOfMessage = this.stack.indexOf(this.message) + this.message.length;\n            const thisStackTrace = this.stack.slice(indexOfMessage).split(\"\\n\").reverse();\n            const errorStackTrace = error.stack.slice(error.stack.indexOf(error.message) + error.message.length).split(\"\\n\").reverse();\n            // Remove duplicated traces\n            while(errorStackTrace.length !== 0 && errorStackTrace[0] === thisStackTrace[0]){\n                thisStackTrace.shift();\n            }\n            this.stack = `${this.stack.slice(0, indexOfMessage)}${thisStackTrace.reverse().join(\"\\n\")}${errorStackTrace.reverse().join(\"\\n\")}`;\n        }\n    }\n}\nexports.RequestError = RequestError;\n/**\nAn error to be thrown when the server redirects you more than ten times.\nIncludes a `response` property.\n*/ class MaxRedirectsError extends RequestError {\n    constructor(request){\n        super(`Redirected ${request.options.maxRedirects} times. Aborting.`, {}, request);\n        this.name = \"MaxRedirectsError\";\n    }\n}\nexports.MaxRedirectsError = MaxRedirectsError;\n/**\nAn error to be thrown when the server response code is not 2xx nor 3xx if `options.followRedirect` is `true`, but always except for 304.\nIncludes a `response` property.\n*/ class HTTPError extends RequestError {\n    constructor(response){\n        super(`Response code ${response.statusCode} (${response.statusMessage})`, {}, response.request);\n        this.name = \"HTTPError\";\n    }\n}\nexports.HTTPError = HTTPError;\n/**\nAn error to be thrown when a cache method fails.\nFor example, if the database goes down or there's a filesystem error.\n*/ class CacheError extends RequestError {\n    constructor(error, request){\n        super(error.message, error, request);\n        this.name = \"CacheError\";\n    }\n}\nexports.CacheError = CacheError;\n/**\nAn error to be thrown when the request body is a stream and an error occurs while reading from that stream.\n*/ class UploadError extends RequestError {\n    constructor(error, request){\n        super(error.message, error, request);\n        this.name = \"UploadError\";\n    }\n}\nexports.UploadError = UploadError;\n/**\nAn error to be thrown when the request is aborted due to a timeout.\nIncludes an `event` and `timings` property.\n*/ class TimeoutError extends RequestError {\n    constructor(error, timings, request){\n        super(error.message, error, request);\n        this.name = \"TimeoutError\";\n        this.event = error.event;\n        this.timings = timings;\n    }\n}\nexports.TimeoutError = TimeoutError;\n/**\nAn error to be thrown when reading from response stream fails.\n*/ class ReadError extends RequestError {\n    constructor(error, request){\n        super(error.message, error, request);\n        this.name = \"ReadError\";\n    }\n}\nexports.ReadError = ReadError;\n/**\nAn error to be thrown when given an unsupported protocol.\n*/ class UnsupportedProtocolError extends RequestError {\n    constructor(options){\n        super(`Unsupported protocol \"${options.url.protocol}\"`, {}, options);\n        this.name = \"UnsupportedProtocolError\";\n    }\n}\nexports.UnsupportedProtocolError = UnsupportedProtocolError;\nconst proxiedRequestEvents = [\n    \"socket\",\n    \"connect\",\n    \"continue\",\n    \"information\",\n    \"upgrade\",\n    \"timeout\"\n];\nclass Request extends stream_1.Duplex {\n    constructor(url, options = {}, defaults){\n        super({\n            // This must be false, to enable throwing after destroy\n            // It is used for retry logic in Promise API\n            autoDestroy: false,\n            // It needs to be zero because we're just proxying the data to another stream\n            highWaterMark: 0\n        });\n        this[kDownloadedSize] = 0;\n        this[kUploadedSize] = 0;\n        this.requestInitialized = false;\n        this[kServerResponsesPiped] = new Set();\n        this.redirects = [];\n        this[kStopReading] = false;\n        this[kTriggerRead] = false;\n        this[kJobs] = [];\n        this.retryCount = 0;\n        // TODO: Remove this when targeting Node.js >= 12\n        this._progressCallbacks = [];\n        const unlockWrite = ()=>this._unlockWrite();\n        const lockWrite = ()=>this._lockWrite();\n        this.on(\"pipe\", (source)=>{\n            source.prependListener(\"data\", unlockWrite);\n            source.on(\"data\", lockWrite);\n            source.prependListener(\"end\", unlockWrite);\n            source.on(\"end\", lockWrite);\n        });\n        this.on(\"unpipe\", (source)=>{\n            source.off(\"data\", unlockWrite);\n            source.off(\"data\", lockWrite);\n            source.off(\"end\", unlockWrite);\n            source.off(\"end\", lockWrite);\n        });\n        this.on(\"pipe\", (source)=>{\n            if (source instanceof http_1.IncomingMessage) {\n                this.options.headers = {\n                    ...source.headers,\n                    ...this.options.headers\n                };\n            }\n        });\n        const { json, body, form } = options;\n        if (json || body || form) {\n            this._lockWrite();\n        }\n        if (exports.kIsNormalizedAlready in options) {\n            this.options = options;\n        } else {\n            try {\n                // @ts-expect-error Common TypeScript bug saying that `this.constructor` is not accessible\n                this.options = this.constructor.normalizeArguments(url, options, defaults);\n            } catch (error) {\n                // TODO: Move this to `_destroy()`\n                if (is_1.default.nodeStream(options.body)) {\n                    options.body.destroy();\n                }\n                this.destroy(error);\n                return;\n            }\n        }\n        (async ()=>{\n            var _a;\n            try {\n                if (this.options.body instanceof fs_1.ReadStream) {\n                    await waitForOpenFile(this.options.body);\n                }\n                const { url: normalizedURL } = this.options;\n                if (!normalizedURL) {\n                    throw new TypeError(\"Missing `url` property\");\n                }\n                this.requestUrl = normalizedURL.toString();\n                decodeURI(this.requestUrl);\n                await this._finalizeBody();\n                await this._makeRequest();\n                if (this.destroyed) {\n                    (_a = this[kRequest]) === null || _a === void 0 ? void 0 : _a.destroy();\n                    return;\n                }\n                // Queued writes etc.\n                for (const job of this[kJobs]){\n                    job();\n                }\n                // Prevent memory leak\n                this[kJobs].length = 0;\n                this.requestInitialized = true;\n            } catch (error) {\n                if (error instanceof RequestError) {\n                    this._beforeError(error);\n                    return;\n                }\n                // This is a workaround for https://github.com/nodejs/node/issues/33335\n                if (!this.destroyed) {\n                    this.destroy(error);\n                }\n            }\n        })();\n    }\n    static normalizeArguments(url, options, defaults) {\n        var _a, _b, _c, _d, _e;\n        const rawOptions = options;\n        if (is_1.default.object(url) && !is_1.default.urlInstance(url)) {\n            options = {\n                ...defaults,\n                ...url,\n                ...options\n            };\n        } else {\n            if (url && options && options.url !== undefined) {\n                throw new TypeError(\"The `url` option is mutually exclusive with the `input` argument\");\n            }\n            options = {\n                ...defaults,\n                ...options\n            };\n            if (url !== undefined) {\n                options.url = url;\n            }\n            if (is_1.default.urlInstance(options.url)) {\n                options.url = new url_1.URL(options.url.toString());\n            }\n        }\n        // TODO: Deprecate URL options in Got 12.\n        // Support extend-specific options\n        if (options.cache === false) {\n            options.cache = undefined;\n        }\n        if (options.dnsCache === false) {\n            options.dnsCache = undefined;\n        }\n        // Nice type assertions\n        is_1.assert.any([\n            is_1.default.string,\n            is_1.default.undefined\n        ], options.method);\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.undefined\n        ], options.headers);\n        is_1.assert.any([\n            is_1.default.string,\n            is_1.default.urlInstance,\n            is_1.default.undefined\n        ], options.prefixUrl);\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.undefined\n        ], options.cookieJar);\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.string,\n            is_1.default.undefined\n        ], options.searchParams);\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.string,\n            is_1.default.undefined\n        ], options.cache);\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.number,\n            is_1.default.undefined\n        ], options.timeout);\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.undefined\n        ], options.context);\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.undefined\n        ], options.hooks);\n        is_1.assert.any([\n            is_1.default.boolean,\n            is_1.default.undefined\n        ], options.decompress);\n        is_1.assert.any([\n            is_1.default.boolean,\n            is_1.default.undefined\n        ], options.ignoreInvalidCookies);\n        is_1.assert.any([\n            is_1.default.boolean,\n            is_1.default.undefined\n        ], options.followRedirect);\n        is_1.assert.any([\n            is_1.default.number,\n            is_1.default.undefined\n        ], options.maxRedirects);\n        is_1.assert.any([\n            is_1.default.boolean,\n            is_1.default.undefined\n        ], options.throwHttpErrors);\n        is_1.assert.any([\n            is_1.default.boolean,\n            is_1.default.undefined\n        ], options.http2);\n        is_1.assert.any([\n            is_1.default.boolean,\n            is_1.default.undefined\n        ], options.allowGetBody);\n        is_1.assert.any([\n            is_1.default.string,\n            is_1.default.undefined\n        ], options.localAddress);\n        is_1.assert.any([\n            dns_ip_version_1.isDnsLookupIpVersion,\n            is_1.default.undefined\n        ], options.dnsLookupIpVersion);\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.undefined\n        ], options.https);\n        is_1.assert.any([\n            is_1.default.boolean,\n            is_1.default.undefined\n        ], options.rejectUnauthorized);\n        if (options.https) {\n            is_1.assert.any([\n                is_1.default.boolean,\n                is_1.default.undefined\n            ], options.https.rejectUnauthorized);\n            is_1.assert.any([\n                is_1.default.function_,\n                is_1.default.undefined\n            ], options.https.checkServerIdentity);\n            is_1.assert.any([\n                is_1.default.string,\n                is_1.default.object,\n                is_1.default.array,\n                is_1.default.undefined\n            ], options.https.certificateAuthority);\n            is_1.assert.any([\n                is_1.default.string,\n                is_1.default.object,\n                is_1.default.array,\n                is_1.default.undefined\n            ], options.https.key);\n            is_1.assert.any([\n                is_1.default.string,\n                is_1.default.object,\n                is_1.default.array,\n                is_1.default.undefined\n            ], options.https.certificate);\n            is_1.assert.any([\n                is_1.default.string,\n                is_1.default.undefined\n            ], options.https.passphrase);\n            is_1.assert.any([\n                is_1.default.string,\n                is_1.default.buffer,\n                is_1.default.array,\n                is_1.default.undefined\n            ], options.https.pfx);\n        }\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.undefined\n        ], options.cacheOptions);\n        // `options.method`\n        if (is_1.default.string(options.method)) {\n            options.method = options.method.toUpperCase();\n        } else {\n            options.method = \"GET\";\n        }\n        // `options.headers`\n        if (options.headers === (defaults === null || defaults === void 0 ? void 0 : defaults.headers)) {\n            options.headers = {\n                ...options.headers\n            };\n        } else {\n            options.headers = lowercaseKeys({\n                ...defaults === null || defaults === void 0 ? void 0 : defaults.headers,\n                ...options.headers\n            });\n        }\n        // Disallow legacy `url.Url`\n        if (\"slashes\" in options) {\n            throw new TypeError(\"The legacy `url.Url` has been deprecated. Use `URL` instead.\");\n        }\n        // `options.auth`\n        if (\"auth\" in options) {\n            throw new TypeError(\"Parameter `auth` is deprecated. Use `username` / `password` instead.\");\n        }\n        // `options.searchParams`\n        if (\"searchParams\" in options) {\n            if (options.searchParams && options.searchParams !== (defaults === null || defaults === void 0 ? void 0 : defaults.searchParams)) {\n                let searchParameters;\n                if (is_1.default.string(options.searchParams) || options.searchParams instanceof url_1.URLSearchParams) {\n                    searchParameters = new url_1.URLSearchParams(options.searchParams);\n                } else {\n                    validateSearchParameters(options.searchParams);\n                    searchParameters = new url_1.URLSearchParams();\n                    // eslint-disable-next-line guard-for-in\n                    for(const key in options.searchParams){\n                        const value = options.searchParams[key];\n                        if (value === null) {\n                            searchParameters.append(key, \"\");\n                        } else if (value !== undefined) {\n                            searchParameters.append(key, value);\n                        }\n                    }\n                }\n                // `normalizeArguments()` is also used to merge options\n                (_a = defaults === null || defaults === void 0 ? void 0 : defaults.searchParams) === null || _a === void 0 ? void 0 : _a.forEach((value, key)=>{\n                    // Only use default if one isn't already defined\n                    if (!searchParameters.has(key)) {\n                        searchParameters.append(key, value);\n                    }\n                });\n                options.searchParams = searchParameters;\n            }\n        }\n        // `options.username` & `options.password`\n        options.username = (_b = options.username) !== null && _b !== void 0 ? _b : \"\";\n        options.password = (_c = options.password) !== null && _c !== void 0 ? _c : \"\";\n        // `options.prefixUrl` & `options.url`\n        if (is_1.default.undefined(options.prefixUrl)) {\n            options.prefixUrl = (_d = defaults === null || defaults === void 0 ? void 0 : defaults.prefixUrl) !== null && _d !== void 0 ? _d : \"\";\n        } else {\n            options.prefixUrl = options.prefixUrl.toString();\n            if (options.prefixUrl !== \"\" && !options.prefixUrl.endsWith(\"/\")) {\n                options.prefixUrl += \"/\";\n            }\n        }\n        if (is_1.default.string(options.url)) {\n            if (options.url.startsWith(\"/\")) {\n                throw new Error(\"`input` must not start with a slash when using `prefixUrl`\");\n            }\n            options.url = options_to_url_1.default(options.prefixUrl + options.url, options);\n        } else if (is_1.default.undefined(options.url) && options.prefixUrl !== \"\" || options.protocol) {\n            options.url = options_to_url_1.default(options.prefixUrl, options);\n        }\n        if (options.url) {\n            if (\"port\" in options) {\n                delete options.port;\n            }\n            // Make it possible to change `options.prefixUrl`\n            let { prefixUrl } = options;\n            Object.defineProperty(options, \"prefixUrl\", {\n                set: (value)=>{\n                    const url = options.url;\n                    if (!url.href.startsWith(value)) {\n                        throw new Error(`Cannot change \\`prefixUrl\\` from ${prefixUrl} to ${value}: ${url.href}`);\n                    }\n                    options.url = new url_1.URL(value + url.href.slice(prefixUrl.length));\n                    prefixUrl = value;\n                },\n                get: ()=>prefixUrl\n            });\n            // Support UNIX sockets\n            let { protocol } = options.url;\n            if (protocol === \"unix:\") {\n                protocol = \"http:\";\n                options.url = new url_1.URL(`http://unix${options.url.pathname}${options.url.search}`);\n            }\n            // Set search params\n            if (options.searchParams) {\n                // eslint-disable-next-line @typescript-eslint/no-base-to-string\n                options.url.search = options.searchParams.toString();\n            }\n            // Protocol check\n            if (protocol !== \"http:\" && protocol !== \"https:\") {\n                throw new UnsupportedProtocolError(options);\n            }\n            // Update `username`\n            if (options.username === \"\") {\n                options.username = options.url.username;\n            } else {\n                options.url.username = options.username;\n            }\n            // Update `password`\n            if (options.password === \"\") {\n                options.password = options.url.password;\n            } else {\n                options.url.password = options.password;\n            }\n        }\n        // `options.cookieJar`\n        const { cookieJar } = options;\n        if (cookieJar) {\n            let { setCookie, getCookieString } = cookieJar;\n            is_1.assert.function_(setCookie);\n            is_1.assert.function_(getCookieString);\n            /* istanbul ignore next: Horrible `tough-cookie` v3 check */ if (setCookie.length === 4 && getCookieString.length === 0) {\n                setCookie = util_1.promisify(setCookie.bind(options.cookieJar));\n                getCookieString = util_1.promisify(getCookieString.bind(options.cookieJar));\n                options.cookieJar = {\n                    setCookie,\n                    getCookieString: getCookieString\n                };\n            }\n        }\n        // `options.cache`\n        const { cache } = options;\n        if (cache) {\n            if (!cacheableStore.has(cache)) {\n                cacheableStore.set(cache, new CacheableRequest((requestOptions, handler)=>{\n                    const result = requestOptions[kRequest](requestOptions, handler);\n                    // TODO: remove this when `cacheable-request` supports async request functions.\n                    if (is_1.default.promise(result)) {\n                        // @ts-expect-error\n                        // We only need to implement the error handler in order to support HTTP2 caching.\n                        // The result will be a promise anyway.\n                        result.once = (event, handler)=>{\n                            if (event === \"error\") {\n                                result.catch(handler);\n                            } else if (event === \"abort\") {\n                                // The empty catch is needed here in case when\n                                // it rejects before it's `await`ed in `_makeRequest`.\n                                (async ()=>{\n                                    try {\n                                        const request = await result;\n                                        request.once(\"abort\", handler);\n                                    } catch (_a) {}\n                                })();\n                            } else {\n                                /* istanbul ignore next: safety check */ throw new Error(`Unknown HTTP2 promise event: ${event}`);\n                            }\n                            return result;\n                        };\n                    }\n                    return result;\n                }, cache));\n            }\n        }\n        // `options.cacheOptions`\n        options.cacheOptions = {\n            ...options.cacheOptions\n        };\n        // `options.dnsCache`\n        if (options.dnsCache === true) {\n            if (!globalDnsCache) {\n                globalDnsCache = new cacheable_lookup_1.default();\n            }\n            options.dnsCache = globalDnsCache;\n        } else if (!is_1.default.undefined(options.dnsCache) && !options.dnsCache.lookup) {\n            throw new TypeError(`Parameter \\`dnsCache\\` must be a CacheableLookup instance or a boolean, got ${is_1.default(options.dnsCache)}`);\n        }\n        // `options.timeout`\n        if (is_1.default.number(options.timeout)) {\n            options.timeout = {\n                request: options.timeout\n            };\n        } else if (defaults && options.timeout !== defaults.timeout) {\n            options.timeout = {\n                ...defaults.timeout,\n                ...options.timeout\n            };\n        } else {\n            options.timeout = {\n                ...options.timeout\n            };\n        }\n        // `options.context`\n        if (!options.context) {\n            options.context = {};\n        }\n        // `options.hooks`\n        const areHooksDefault = options.hooks === (defaults === null || defaults === void 0 ? void 0 : defaults.hooks);\n        options.hooks = {\n            ...options.hooks\n        };\n        for (const event of exports.knownHookEvents){\n            if (event in options.hooks) {\n                if (is_1.default.array(options.hooks[event])) {\n                    // See https://github.com/microsoft/TypeScript/issues/31445#issuecomment-576929044\n                    options.hooks[event] = [\n                        ...options.hooks[event]\n                    ];\n                } else {\n                    throw new TypeError(`Parameter \\`${event}\\` must be an Array, got ${is_1.default(options.hooks[event])}`);\n                }\n            } else {\n                options.hooks[event] = [];\n            }\n        }\n        if (defaults && !areHooksDefault) {\n            for (const event of exports.knownHookEvents){\n                const defaultHooks = defaults.hooks[event];\n                if (defaultHooks.length > 0) {\n                    // See https://github.com/microsoft/TypeScript/issues/31445#issuecomment-576929044\n                    options.hooks[event] = [\n                        ...defaults.hooks[event],\n                        ...options.hooks[event]\n                    ];\n                }\n            }\n        }\n        // DNS options\n        if (\"family\" in options) {\n            deprecation_warning_1.default('\"options.family\" was never documented, please use \"options.dnsLookupIpVersion\"');\n        }\n        // HTTPS options\n        if (defaults === null || defaults === void 0 ? void 0 : defaults.https) {\n            options.https = {\n                ...defaults.https,\n                ...options.https\n            };\n        }\n        if (\"rejectUnauthorized\" in options) {\n            deprecation_warning_1.default('\"options.rejectUnauthorized\" is now deprecated, please use \"options.https.rejectUnauthorized\"');\n        }\n        if (\"checkServerIdentity\" in options) {\n            deprecation_warning_1.default('\"options.checkServerIdentity\" was never documented, please use \"options.https.checkServerIdentity\"');\n        }\n        if (\"ca\" in options) {\n            deprecation_warning_1.default('\"options.ca\" was never documented, please use \"options.https.certificateAuthority\"');\n        }\n        if (\"key\" in options) {\n            deprecation_warning_1.default('\"options.key\" was never documented, please use \"options.https.key\"');\n        }\n        if (\"cert\" in options) {\n            deprecation_warning_1.default('\"options.cert\" was never documented, please use \"options.https.certificate\"');\n        }\n        if (\"passphrase\" in options) {\n            deprecation_warning_1.default('\"options.passphrase\" was never documented, please use \"options.https.passphrase\"');\n        }\n        if (\"pfx\" in options) {\n            deprecation_warning_1.default('\"options.pfx\" was never documented, please use \"options.https.pfx\"');\n        }\n        // Other options\n        if (\"followRedirects\" in options) {\n            throw new TypeError(\"The `followRedirects` option does not exist. Use `followRedirect` instead.\");\n        }\n        if (options.agent) {\n            for(const key in options.agent){\n                if (key !== \"http\" && key !== \"https\" && key !== \"http2\") {\n                    throw new TypeError(`Expected the \\`options.agent\\` properties to be \\`http\\`, \\`https\\` or \\`http2\\`, got \\`${key}\\``);\n                }\n            }\n        }\n        options.maxRedirects = (_e = options.maxRedirects) !== null && _e !== void 0 ? _e : 0;\n        // Set non-enumerable properties\n        exports.setNonEnumerableProperties([\n            defaults,\n            rawOptions\n        ], options);\n        return normalize_arguments_1.default(options, defaults);\n    }\n    _lockWrite() {\n        const onLockedWrite = ()=>{\n            throw new TypeError(\"The payload has been already provided\");\n        };\n        this.write = onLockedWrite;\n        this.end = onLockedWrite;\n    }\n    _unlockWrite() {\n        this.write = super.write;\n        this.end = super.end;\n    }\n    async _finalizeBody() {\n        const { options } = this;\n        const { headers } = options;\n        const isForm = !is_1.default.undefined(options.form);\n        const isJSON = !is_1.default.undefined(options.json);\n        const isBody = !is_1.default.undefined(options.body);\n        const hasPayload = isForm || isJSON || isBody;\n        const cannotHaveBody = exports.withoutBody.has(options.method) && !(options.method === \"GET\" && options.allowGetBody);\n        this._cannotHaveBody = cannotHaveBody;\n        if (hasPayload) {\n            if (cannotHaveBody) {\n                throw new TypeError(`The \\`${options.method}\\` method cannot be used with a body`);\n            }\n            if ([\n                isBody,\n                isForm,\n                isJSON\n            ].filter((isTrue)=>isTrue).length > 1) {\n                throw new TypeError(\"The `body`, `json` and `form` options are mutually exclusive\");\n            }\n            if (isBody && !(options.body instanceof stream_1.Readable) && !is_1.default.string(options.body) && !is_1.default.buffer(options.body) && !is_form_data_1.default(options.body)) {\n                throw new TypeError(\"The `body` option must be a stream.Readable, string or Buffer\");\n            }\n            if (isForm && !is_1.default.object(options.form)) {\n                throw new TypeError(\"The `form` option must be an Object\");\n            }\n            {\n                // Serialize body\n                const noContentType = !is_1.default.string(headers[\"content-type\"]);\n                if (isBody) {\n                    // Special case for https://github.com/form-data/form-data\n                    if (is_form_data_1.default(options.body) && noContentType) {\n                        headers[\"content-type\"] = `multipart/form-data; boundary=${options.body.getBoundary()}`;\n                    }\n                    this[kBody] = options.body;\n                } else if (isForm) {\n                    if (noContentType) {\n                        headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\n                    }\n                    this[kBody] = new url_1.URLSearchParams(options.form).toString();\n                } else {\n                    if (noContentType) {\n                        headers[\"content-type\"] = \"application/json\";\n                    }\n                    this[kBody] = options.stringifyJson(options.json);\n                }\n                const uploadBodySize = await get_body_size_1.default(this[kBody], options.headers);\n                // See https://tools.ietf.org/html/rfc7230#section-3.3.2\n                // A user agent SHOULD send a Content-Length in a request message when\n                // no Transfer-Encoding is sent and the request method defines a meaning\n                // for an enclosed payload body.  For example, a Content-Length header\n                // field is normally sent in a POST request even when the value is 0\n                // (indicating an empty payload body).  A user agent SHOULD NOT send a\n                // Content-Length header field when the request message does not contain\n                // a payload body and the method semantics do not anticipate such a\n                // body.\n                if (is_1.default.undefined(headers[\"content-length\"]) && is_1.default.undefined(headers[\"transfer-encoding\"])) {\n                    if (!cannotHaveBody && !is_1.default.undefined(uploadBodySize)) {\n                        headers[\"content-length\"] = String(uploadBodySize);\n                    }\n                }\n            }\n        } else if (cannotHaveBody) {\n            this._lockWrite();\n        } else {\n            this._unlockWrite();\n        }\n        this[kBodySize] = Number(headers[\"content-length\"]) || undefined;\n    }\n    async _onResponseBase(response) {\n        const { options } = this;\n        const { url } = options;\n        this[kOriginalResponse] = response;\n        if (options.decompress) {\n            response = decompressResponse(response);\n        }\n        const statusCode = response.statusCode;\n        const typedResponse = response;\n        typedResponse.statusMessage = typedResponse.statusMessage ? typedResponse.statusMessage : http.STATUS_CODES[statusCode];\n        typedResponse.url = options.url.toString();\n        typedResponse.requestUrl = this.requestUrl;\n        typedResponse.redirectUrls = this.redirects;\n        typedResponse.request = this;\n        typedResponse.isFromCache = response.fromCache || false;\n        typedResponse.ip = this.ip;\n        typedResponse.retryCount = this.retryCount;\n        this[kIsFromCache] = typedResponse.isFromCache;\n        this[kResponseSize] = Number(response.headers[\"content-length\"]) || undefined;\n        this[kResponse] = response;\n        response.once(\"end\", ()=>{\n            this[kResponseSize] = this[kDownloadedSize];\n            this.emit(\"downloadProgress\", this.downloadProgress);\n        });\n        response.once(\"error\", (error)=>{\n            // Force clean-up, because some packages don't do this.\n            // TODO: Fix decompress-response\n            response.destroy();\n            this._beforeError(new ReadError(error, this));\n        });\n        response.once(\"aborted\", ()=>{\n            this._beforeError(new ReadError({\n                name: \"Error\",\n                message: \"The server aborted pending request\",\n                code: \"ECONNRESET\"\n            }, this));\n        });\n        this.emit(\"downloadProgress\", this.downloadProgress);\n        const rawCookies = response.headers[\"set-cookie\"];\n        if (is_1.default.object(options.cookieJar) && rawCookies) {\n            let promises = rawCookies.map(async (rawCookie)=>options.cookieJar.setCookie(rawCookie, url.toString()));\n            if (options.ignoreInvalidCookies) {\n                promises = promises.map(async (p)=>p.catch(()=>{}));\n            }\n            try {\n                await Promise.all(promises);\n            } catch (error) {\n                this._beforeError(error);\n                return;\n            }\n        }\n        if (options.followRedirect && response.headers.location && redirectCodes.has(statusCode)) {\n            // We're being redirected, we don't care about the response.\n            // It'd be best to abort the request, but we can't because\n            // we would have to sacrifice the TCP connection. We don't want that.\n            response.resume();\n            if (this[kRequest]) {\n                this[kCancelTimeouts]();\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete this[kRequest];\n                this[kUnproxyEvents]();\n            }\n            const shouldBeGet = statusCode === 303 && options.method !== \"GET\" && options.method !== \"HEAD\";\n            if (shouldBeGet || !options.methodRewriting) {\n                // Server responded with \"see other\", indicating that the resource exists at another location,\n                // and the client should request it from that location via GET or HEAD.\n                options.method = \"GET\";\n                if (\"body\" in options) {\n                    delete options.body;\n                }\n                if (\"json\" in options) {\n                    delete options.json;\n                }\n                if (\"form\" in options) {\n                    delete options.form;\n                }\n                this[kBody] = undefined;\n                delete options.headers[\"content-length\"];\n            }\n            if (this.redirects.length >= options.maxRedirects) {\n                this._beforeError(new MaxRedirectsError(this));\n                return;\n            }\n            try {\n                // Do not remove. See https://github.com/sindresorhus/got/pull/214\n                const redirectBuffer = Buffer.from(response.headers.location, \"binary\").toString();\n                // Handles invalid URLs. See https://github.com/sindresorhus/got/issues/604\n                const redirectUrl = new url_1.URL(redirectBuffer, url);\n                const redirectString = redirectUrl.toString();\n                decodeURI(redirectString);\n                // Redirecting to a different site, clear sensitive data.\n                if (redirectUrl.hostname !== url.hostname || redirectUrl.port !== url.port) {\n                    if (\"host\" in options.headers) {\n                        delete options.headers.host;\n                    }\n                    if (\"cookie\" in options.headers) {\n                        delete options.headers.cookie;\n                    }\n                    if (\"authorization\" in options.headers) {\n                        delete options.headers.authorization;\n                    }\n                    if (options.username || options.password) {\n                        options.username = \"\";\n                        options.password = \"\";\n                    }\n                } else {\n                    redirectUrl.username = options.username;\n                    redirectUrl.password = options.password;\n                }\n                this.redirects.push(redirectString);\n                options.url = redirectUrl;\n                for (const hook of options.hooks.beforeRedirect){\n                    // eslint-disable-next-line no-await-in-loop\n                    await hook(options, typedResponse);\n                }\n                this.emit(\"redirect\", typedResponse, options);\n                await this._makeRequest();\n            } catch (error) {\n                this._beforeError(error);\n                return;\n            }\n            return;\n        }\n        if (options.isStream && options.throwHttpErrors && !is_response_ok_1.isResponseOk(typedResponse)) {\n            this._beforeError(new HTTPError(typedResponse));\n            return;\n        }\n        response.on(\"readable\", ()=>{\n            if (this[kTriggerRead]) {\n                this._read();\n            }\n        });\n        this.on(\"resume\", ()=>{\n            response.resume();\n        });\n        this.on(\"pause\", ()=>{\n            response.pause();\n        });\n        response.once(\"end\", ()=>{\n            this.push(null);\n        });\n        this.emit(\"response\", response);\n        for (const destination of this[kServerResponsesPiped]){\n            if (destination.headersSent) {\n                continue;\n            }\n            // eslint-disable-next-line guard-for-in\n            for(const key in response.headers){\n                const isAllowed = options.decompress ? key !== \"content-encoding\" : true;\n                const value = response.headers[key];\n                if (isAllowed) {\n                    destination.setHeader(key, value);\n                }\n            }\n            destination.statusCode = statusCode;\n        }\n    }\n    async _onResponse(response) {\n        try {\n            await this._onResponseBase(response);\n        } catch (error) {\n            /* istanbul ignore next: better safe than sorry */ this._beforeError(error);\n        }\n    }\n    _onRequest(request) {\n        const { options } = this;\n        const { timeout, url } = options;\n        http_timer_1.default(request);\n        this[kCancelTimeouts] = timed_out_1.default(request, timeout, url);\n        const responseEventName = options.cache ? \"cacheableResponse\" : \"response\";\n        request.once(responseEventName, (response)=>{\n            void this._onResponse(response);\n        });\n        request.once(\"error\", (error)=>{\n            var _a;\n            // Force clean-up, because some packages (e.g. nock) don't do this.\n            request.destroy();\n            // Node.js <= 12.18.2 mistakenly emits the response `end` first.\n            (_a = request.res) === null || _a === void 0 ? void 0 : _a.removeAllListeners(\"end\");\n            error = error instanceof timed_out_1.TimeoutError ? new TimeoutError(error, this.timings, this) : new RequestError(error.message, error, this);\n            this._beforeError(error);\n        });\n        this[kUnproxyEvents] = proxy_events_1.default(request, this, proxiedRequestEvents);\n        this[kRequest] = request;\n        this.emit(\"uploadProgress\", this.uploadProgress);\n        // Send body\n        const body = this[kBody];\n        const currentRequest = this.redirects.length === 0 ? this : request;\n        if (is_1.default.nodeStream(body)) {\n            body.pipe(currentRequest);\n            body.once(\"error\", (error)=>{\n                this._beforeError(new UploadError(error, this));\n            });\n        } else {\n            this._unlockWrite();\n            if (!is_1.default.undefined(body)) {\n                this._writeRequest(body, undefined, ()=>{});\n                currentRequest.end();\n                this._lockWrite();\n            } else if (this._cannotHaveBody || this._noPipe) {\n                currentRequest.end();\n                this._lockWrite();\n            }\n        }\n        this.emit(\"request\", request);\n    }\n    async _createCacheableRequest(url, options) {\n        return new Promise((resolve, reject)=>{\n            // TODO: Remove `utils/url-to-options.ts` when `cacheable-request` is fixed\n            Object.assign(options, url_to_options_1.default(url));\n            // `http-cache-semantics` checks this\n            // TODO: Fix this ignore.\n            // @ts-expect-error\n            delete options.url;\n            let request;\n            // This is ugly\n            const cacheRequest = cacheableStore.get(options.cache)(options, async (response)=>{\n                // TODO: Fix `cacheable-response`\n                response._readableState.autoDestroy = false;\n                if (request) {\n                    (await request).emit(\"cacheableResponse\", response);\n                }\n                resolve(response);\n            });\n            // Restore options\n            options.url = url;\n            cacheRequest.once(\"error\", reject);\n            cacheRequest.once(\"request\", async (requestOrPromise)=>{\n                request = requestOrPromise;\n                resolve(request);\n            });\n        });\n    }\n    async _makeRequest() {\n        var _a, _b, _c, _d, _e;\n        const { options } = this;\n        const { headers } = options;\n        for(const key in headers){\n            if (is_1.default.undefined(headers[key])) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete headers[key];\n            } else if (is_1.default.null_(headers[key])) {\n                throw new TypeError(`Use \\`undefined\\` instead of \\`null\\` to delete the \\`${key}\\` header`);\n            }\n        }\n        if (options.decompress && is_1.default.undefined(headers[\"accept-encoding\"])) {\n            headers[\"accept-encoding\"] = supportsBrotli ? \"gzip, deflate, br\" : \"gzip, deflate\";\n        }\n        // Set cookies\n        if (options.cookieJar) {\n            const cookieString = await options.cookieJar.getCookieString(options.url.toString());\n            if (is_1.default.nonEmptyString(cookieString)) {\n                options.headers.cookie = cookieString;\n            }\n        }\n        for (const hook of options.hooks.beforeRequest){\n            // eslint-disable-next-line no-await-in-loop\n            const result = await hook(options);\n            if (!is_1.default.undefined(result)) {\n                // @ts-expect-error Skip the type mismatch to support abstract responses\n                options.request = ()=>result;\n                break;\n            }\n        }\n        if (options.body && this[kBody] !== options.body) {\n            this[kBody] = options.body;\n        }\n        const { agent, request, timeout, url } = options;\n        if (options.dnsCache && !(\"lookup\" in options)) {\n            options.lookup = options.dnsCache.lookup;\n        }\n        // UNIX sockets\n        if (url.hostname === \"unix\") {\n            const matches = /(?<socketPath>.+?):(?<path>.+)/.exec(`${url.pathname}${url.search}`);\n            if (matches === null || matches === void 0 ? void 0 : matches.groups) {\n                const { socketPath, path } = matches.groups;\n                Object.assign(options, {\n                    socketPath,\n                    path,\n                    host: \"\"\n                });\n            }\n        }\n        const isHttps = url.protocol === \"https:\";\n        // Fallback function\n        let fallbackFn;\n        if (options.http2) {\n            fallbackFn = http2wrapper.auto;\n        } else {\n            fallbackFn = isHttps ? https.request : http.request;\n        }\n        const realFn = (_a = options.request) !== null && _a !== void 0 ? _a : fallbackFn;\n        // Cache support\n        const fn = options.cache ? this._createCacheableRequest : realFn;\n        // Pass an agent directly when HTTP2 is disabled\n        if (agent && !options.http2) {\n            options.agent = agent[isHttps ? \"https\" : \"http\"];\n        }\n        // Prepare plain HTTP request options\n        options[kRequest] = realFn;\n        delete options.request;\n        // TODO: Fix this ignore.\n        // @ts-expect-error\n        delete options.timeout;\n        const requestOptions = options;\n        requestOptions.shared = (_b = options.cacheOptions) === null || _b === void 0 ? void 0 : _b.shared;\n        requestOptions.cacheHeuristic = (_c = options.cacheOptions) === null || _c === void 0 ? void 0 : _c.cacheHeuristic;\n        requestOptions.immutableMinTimeToLive = (_d = options.cacheOptions) === null || _d === void 0 ? void 0 : _d.immutableMinTimeToLive;\n        requestOptions.ignoreCargoCult = (_e = options.cacheOptions) === null || _e === void 0 ? void 0 : _e.ignoreCargoCult;\n        // If `dnsLookupIpVersion` is not present do not override `family`\n        if (options.dnsLookupIpVersion !== undefined) {\n            try {\n                requestOptions.family = dns_ip_version_1.dnsLookupIpVersionToFamily(options.dnsLookupIpVersion);\n            } catch (_f) {\n                throw new Error(\"Invalid `dnsLookupIpVersion` option value\");\n            }\n        }\n        // HTTPS options remapping\n        if (options.https) {\n            if (\"rejectUnauthorized\" in options.https) {\n                requestOptions.rejectUnauthorized = options.https.rejectUnauthorized;\n            }\n            if (options.https.checkServerIdentity) {\n                requestOptions.checkServerIdentity = options.https.checkServerIdentity;\n            }\n            if (options.https.certificateAuthority) {\n                requestOptions.ca = options.https.certificateAuthority;\n            }\n            if (options.https.certificate) {\n                requestOptions.cert = options.https.certificate;\n            }\n            if (options.https.key) {\n                requestOptions.key = options.https.key;\n            }\n            if (options.https.passphrase) {\n                requestOptions.passphrase = options.https.passphrase;\n            }\n            if (options.https.pfx) {\n                requestOptions.pfx = options.https.pfx;\n            }\n        }\n        try {\n            let requestOrResponse = await fn(url, requestOptions);\n            if (is_1.default.undefined(requestOrResponse)) {\n                requestOrResponse = fallbackFn(url, requestOptions);\n            }\n            // Restore options\n            options.request = request;\n            options.timeout = timeout;\n            options.agent = agent;\n            // HTTPS options restore\n            if (options.https) {\n                if (\"rejectUnauthorized\" in options.https) {\n                    delete requestOptions.rejectUnauthorized;\n                }\n                if (options.https.checkServerIdentity) {\n                    // @ts-expect-error - This one will be removed when we remove the alias.\n                    delete requestOptions.checkServerIdentity;\n                }\n                if (options.https.certificateAuthority) {\n                    delete requestOptions.ca;\n                }\n                if (options.https.certificate) {\n                    delete requestOptions.cert;\n                }\n                if (options.https.key) {\n                    delete requestOptions.key;\n                }\n                if (options.https.passphrase) {\n                    delete requestOptions.passphrase;\n                }\n                if (options.https.pfx) {\n                    delete requestOptions.pfx;\n                }\n            }\n            if (isClientRequest(requestOrResponse)) {\n                this._onRequest(requestOrResponse);\n            // Emit the response after the stream has been ended\n            } else if (this.writable) {\n                this.once(\"finish\", ()=>{\n                    void this._onResponse(requestOrResponse);\n                });\n                this._unlockWrite();\n                this.end();\n                this._lockWrite();\n            } else {\n                void this._onResponse(requestOrResponse);\n            }\n        } catch (error) {\n            if (error instanceof CacheableRequest.CacheError) {\n                throw new CacheError(error, this);\n            }\n            throw new RequestError(error.message, error, this);\n        }\n    }\n    async _error(error) {\n        try {\n            for (const hook of this.options.hooks.beforeError){\n                // eslint-disable-next-line no-await-in-loop\n                error = await hook(error);\n            }\n        } catch (error_) {\n            error = new RequestError(error_.message, error_, this);\n        }\n        this.destroy(error);\n    }\n    _beforeError(error) {\n        if (this[kStopReading]) {\n            return;\n        }\n        const { options } = this;\n        const retryCount = this.retryCount + 1;\n        this[kStopReading] = true;\n        if (!(error instanceof RequestError)) {\n            error = new RequestError(error.message, error, this);\n        }\n        const typedError = error;\n        const { response } = typedError;\n        void (async ()=>{\n            if (response && !response.body) {\n                response.setEncoding(this._readableState.encoding);\n                try {\n                    response.rawBody = await get_buffer_1.default(response);\n                    response.body = response.rawBody.toString();\n                } catch (_a) {}\n            }\n            if (this.listenerCount(\"retry\") !== 0) {\n                let backoff;\n                try {\n                    let retryAfter;\n                    if (response && \"retry-after\" in response.headers) {\n                        retryAfter = Number(response.headers[\"retry-after\"]);\n                        if (Number.isNaN(retryAfter)) {\n                            retryAfter = Date.parse(response.headers[\"retry-after\"]) - Date.now();\n                            if (retryAfter <= 0) {\n                                retryAfter = 1;\n                            }\n                        } else {\n                            retryAfter *= 1000;\n                        }\n                    }\n                    backoff = await options.retry.calculateDelay({\n                        attemptCount: retryCount,\n                        retryOptions: options.retry,\n                        error: typedError,\n                        retryAfter,\n                        computedValue: calculate_retry_delay_1.default({\n                            attemptCount: retryCount,\n                            retryOptions: options.retry,\n                            error: typedError,\n                            retryAfter,\n                            computedValue: 0\n                        })\n                    });\n                } catch (error_) {\n                    void this._error(new RequestError(error_.message, error_, this));\n                    return;\n                }\n                if (backoff) {\n                    const retry = async ()=>{\n                        try {\n                            for (const hook of this.options.hooks.beforeRetry){\n                                // eslint-disable-next-line no-await-in-loop\n                                await hook(this.options, typedError, retryCount);\n                            }\n                        } catch (error_) {\n                            void this._error(new RequestError(error_.message, error, this));\n                            return;\n                        }\n                        // Something forced us to abort the retry\n                        if (this.destroyed) {\n                            return;\n                        }\n                        this.destroy();\n                        this.emit(\"retry\", retryCount, error);\n                    };\n                    this[kRetryTimeout] = setTimeout(retry, backoff);\n                    return;\n                }\n            }\n            void this._error(typedError);\n        })();\n    }\n    _read() {\n        this[kTriggerRead] = true;\n        const response = this[kResponse];\n        if (response && !this[kStopReading]) {\n            // We cannot put this in the `if` above\n            // because `.read()` also triggers the `end` event\n            if (response.readableLength) {\n                this[kTriggerRead] = false;\n            }\n            let data;\n            while((data = response.read()) !== null){\n                this[kDownloadedSize] += data.length;\n                this[kStartedReading] = true;\n                const progress = this.downloadProgress;\n                if (progress.percent < 1) {\n                    this.emit(\"downloadProgress\", progress);\n                }\n                this.push(data);\n            }\n        }\n    }\n    // Node.js 12 has incorrect types, so the encoding must be a string\n    _write(chunk, encoding, callback) {\n        const write = ()=>{\n            this._writeRequest(chunk, encoding, callback);\n        };\n        if (this.requestInitialized) {\n            write();\n        } else {\n            this[kJobs].push(write);\n        }\n    }\n    _writeRequest(chunk, encoding, callback) {\n        if (this[kRequest].destroyed) {\n            // Probably the `ClientRequest` instance will throw\n            return;\n        }\n        this._progressCallbacks.push(()=>{\n            this[kUploadedSize] += Buffer.byteLength(chunk, encoding);\n            const progress = this.uploadProgress;\n            if (progress.percent < 1) {\n                this.emit(\"uploadProgress\", progress);\n            }\n        });\n        // TODO: What happens if it's from cache? Then this[kRequest] won't be defined.\n        this[kRequest].write(chunk, encoding, (error)=>{\n            if (!error && this._progressCallbacks.length > 0) {\n                this._progressCallbacks.shift()();\n            }\n            callback(error);\n        });\n    }\n    _final(callback) {\n        const endRequest = ()=>{\n            // FIX: Node.js 10 calls the write callback AFTER the end callback!\n            while(this._progressCallbacks.length !== 0){\n                this._progressCallbacks.shift()();\n            }\n            // We need to check if `this[kRequest]` is present,\n            // because it isn't when we use cache.\n            if (!(kRequest in this)) {\n                callback();\n                return;\n            }\n            if (this[kRequest].destroyed) {\n                callback();\n                return;\n            }\n            this[kRequest].end((error)=>{\n                if (!error) {\n                    this[kBodySize] = this[kUploadedSize];\n                    this.emit(\"uploadProgress\", this.uploadProgress);\n                    this[kRequest].emit(\"upload-complete\");\n                }\n                callback(error);\n            });\n        };\n        if (this.requestInitialized) {\n            endRequest();\n        } else {\n            this[kJobs].push(endRequest);\n        }\n    }\n    _destroy(error, callback) {\n        var _a;\n        this[kStopReading] = true;\n        // Prevent further retries\n        clearTimeout(this[kRetryTimeout]);\n        if (kRequest in this) {\n            this[kCancelTimeouts]();\n            // TODO: Remove the next `if` when these get fixed:\n            // - https://github.com/nodejs/node/issues/32851\n            if (!((_a = this[kResponse]) === null || _a === void 0 ? void 0 : _a.complete)) {\n                this[kRequest].destroy();\n            }\n        }\n        if (error !== null && !is_1.default.undefined(error) && !(error instanceof RequestError)) {\n            error = new RequestError(error.message, error, this);\n        }\n        callback(error);\n    }\n    get _isAboutToError() {\n        return this[kStopReading];\n    }\n    /**\n    The remote IP address.\n    */ get ip() {\n        var _a;\n        return (_a = this.socket) === null || _a === void 0 ? void 0 : _a.remoteAddress;\n    }\n    /**\n    Indicates whether the request has been aborted or not.\n    */ get aborted() {\n        var _a, _b, _c;\n        return ((_b = (_a = this[kRequest]) === null || _a === void 0 ? void 0 : _a.destroyed) !== null && _b !== void 0 ? _b : this.destroyed) && !((_c = this[kOriginalResponse]) === null || _c === void 0 ? void 0 : _c.complete);\n    }\n    get socket() {\n        var _a, _b;\n        return (_b = (_a = this[kRequest]) === null || _a === void 0 ? void 0 : _a.socket) !== null && _b !== void 0 ? _b : undefined;\n    }\n    /**\n    Progress event for downloading (receiving a response).\n    */ get downloadProgress() {\n        let percent;\n        if (this[kResponseSize]) {\n            percent = this[kDownloadedSize] / this[kResponseSize];\n        } else if (this[kResponseSize] === this[kDownloadedSize]) {\n            percent = 1;\n        } else {\n            percent = 0;\n        }\n        return {\n            percent,\n            transferred: this[kDownloadedSize],\n            total: this[kResponseSize]\n        };\n    }\n    /**\n    Progress event for uploading (sending a request).\n    */ get uploadProgress() {\n        let percent;\n        if (this[kBodySize]) {\n            percent = this[kUploadedSize] / this[kBodySize];\n        } else if (this[kBodySize] === this[kUploadedSize]) {\n            percent = 1;\n        } else {\n            percent = 0;\n        }\n        return {\n            percent,\n            transferred: this[kUploadedSize],\n            total: this[kBodySize]\n        };\n    }\n    /**\n    The object contains the following properties:\n\n    - `start` - Time when the request started.\n    - `socket` - Time when a socket was assigned to the request.\n    - `lookup` - Time when the DNS lookup finished.\n    - `connect` - Time when the socket successfully connected.\n    - `secureConnect` - Time when the socket securely connected.\n    - `upload` - Time when the request finished uploading.\n    - `response` - Time when the request fired `response` event.\n    - `end` - Time when the response fired `end` event.\n    - `error` - Time when the request fired `error` event.\n    - `abort` - Time when the request fired `abort` event.\n    - `phases`\n        - `wait` - `timings.socket - timings.start`\n        - `dns` - `timings.lookup - timings.socket`\n        - `tcp` - `timings.connect - timings.lookup`\n        - `tls` - `timings.secureConnect - timings.connect`\n        - `request` - `timings.upload - (timings.secureConnect || timings.connect)`\n        - `firstByte` - `timings.response - timings.upload`\n        - `download` - `timings.end - timings.response`\n        - `total` - `(timings.end || timings.error || timings.abort) - timings.start`\n\n    If something has not been measured yet, it will be `undefined`.\n\n    __Note__: The time is a `number` representing the milliseconds elapsed since the UNIX epoch.\n    */ get timings() {\n        var _a;\n        return (_a = this[kRequest]) === null || _a === void 0 ? void 0 : _a.timings;\n    }\n    /**\n    Whether the response was retrieved from the cache.\n    */ get isFromCache() {\n        return this[kIsFromCache];\n    }\n    pipe(destination, options) {\n        if (this[kStartedReading]) {\n            throw new Error(\"Failed to pipe. The response has been emitted already.\");\n        }\n        if (destination instanceof http_1.ServerResponse) {\n            this[kServerResponsesPiped].add(destination);\n        }\n        return super.pipe(destination, options);\n    }\n    unpipe(destination) {\n        if (destination instanceof http_1.ServerResponse) {\n            this[kServerResponsesPiped].delete(destination);\n        }\n        super.unpipe(destination);\n        return this;\n    }\n}\nexports[\"default\"] = Request;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/dns-ip-version.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/core/utils/dns-ip-version.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.dnsLookupIpVersionToFamily = exports.isDnsLookupIpVersion = void 0;\nconst conversionTable = {\n    auto: 0,\n    ipv4: 4,\n    ipv6: 6\n};\nexports.isDnsLookupIpVersion = (value)=>{\n    return value in conversionTable;\n};\nexports.dnsLookupIpVersionToFamily = (dnsLookupIpVersion)=>{\n    if (exports.isDnsLookupIpVersion(dnsLookupIpVersion)) {\n        return conversionTable[dnsLookupIpVersion];\n    }\n    throw new Error(\"Invalid DNS lookup IP version\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvZG5zLWlwLXZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGtDQUFrQyxHQUFHQSw0QkFBNEIsR0FBRyxLQUFLO0FBQ3pFLE1BQU1JLGtCQUFrQjtJQUNwQkMsTUFBTTtJQUNOQyxNQUFNO0lBQ05DLE1BQU07QUFDVjtBQUNBUCw0QkFBNEIsR0FBRyxDQUFDQztJQUM1QixPQUFPQSxTQUFTRztBQUNwQjtBQUNBSixrQ0FBa0MsR0FBRyxDQUFDUTtJQUNsQyxJQUFJUixRQUFRRyxvQkFBb0IsQ0FBQ0sscUJBQXFCO1FBQ2xELE9BQU9KLGVBQWUsQ0FBQ0ksbUJBQW1CO0lBQzlDO0lBQ0EsTUFBTSxJQUFJQyxNQUFNO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZXhhbXBsZS1mdWxsLy4vbm9kZV9tb2R1bGVzL25vdGlvbi1jbGllbnQvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL2Rucy1pcC12ZXJzaW9uLmpzPzZmNGYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRuc0xvb2t1cElwVmVyc2lvblRvRmFtaWx5ID0gZXhwb3J0cy5pc0Ruc0xvb2t1cElwVmVyc2lvbiA9IHZvaWQgMDtcbmNvbnN0IGNvbnZlcnNpb25UYWJsZSA9IHtcbiAgICBhdXRvOiAwLFxuICAgIGlwdjQ6IDQsXG4gICAgaXB2NjogNlxufTtcbmV4cG9ydHMuaXNEbnNMb29rdXBJcFZlcnNpb24gPSAodmFsdWUpID0+IHtcbiAgICByZXR1cm4gdmFsdWUgaW4gY29udmVyc2lvblRhYmxlO1xufTtcbmV4cG9ydHMuZG5zTG9va3VwSXBWZXJzaW9uVG9GYW1pbHkgPSAoZG5zTG9va3VwSXBWZXJzaW9uKSA9PiB7XG4gICAgaWYgKGV4cG9ydHMuaXNEbnNMb29rdXBJcFZlcnNpb24oZG5zTG9va3VwSXBWZXJzaW9uKSkge1xuICAgICAgICByZXR1cm4gY29udmVyc2lvblRhYmxlW2Ruc0xvb2t1cElwVmVyc2lvbl07XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBETlMgbG9va3VwIElQIHZlcnNpb24nKTtcbn07XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkbnNMb29rdXBJcFZlcnNpb25Ub0ZhbWlseSIsImlzRG5zTG9va3VwSXBWZXJzaW9uIiwiY29udmVyc2lvblRhYmxlIiwiYXV0byIsImlwdjQiLCJpcHY2IiwiZG5zTG9va3VwSXBWZXJzaW9uIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/dns-ip-version.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/get-body-size.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/core/utils/get-body-size.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\nconst is_form_data_1 = __webpack_require__(/*! ./is-form-data */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/is-form-data.js\");\nconst statAsync = util_1.promisify(fs_1.stat);\nexports[\"default\"] = async (body, headers)=>{\n    if (headers && \"content-length\" in headers) {\n        return Number(headers[\"content-length\"]);\n    }\n    if (!body) {\n        return 0;\n    }\n    if (is_1.default.string(body)) {\n        return Buffer.byteLength(body);\n    }\n    if (is_1.default.buffer(body)) {\n        return body.length;\n    }\n    if (is_form_data_1.default(body)) {\n        return util_1.promisify(body.getLength.bind(body))();\n    }\n    if (body instanceof fs_1.ReadStream) {\n        const { size } = await statAsync(body.path);\n        if (size === 0) {\n            return undefined;\n        }\n        return size;\n    }\n    return undefined;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvZ2V0LWJvZHktc2l6ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxPQUFPQyxtQkFBT0EsQ0FBQyxjQUFJO0FBQ3pCLE1BQU1DLFNBQVNELG1CQUFPQSxDQUFDLGtCQUFNO0FBQzdCLE1BQU1FLE9BQU9GLG1CQUFPQSxDQUFDLDZFQUFrQjtBQUN2QyxNQUFNRyxpQkFBaUJILG1CQUFPQSxDQUFDLGtIQUFnQjtBQUMvQyxNQUFNSSxZQUFZSCxPQUFPSSxTQUFTLENBQUNOLEtBQUtPLElBQUk7QUFDNUNULGtCQUFlLEdBQUcsT0FBT1csTUFBTUM7SUFDM0IsSUFBSUEsV0FBVyxvQkFBb0JBLFNBQVM7UUFDeEMsT0FBT0MsT0FBT0QsT0FBTyxDQUFDLGlCQUFpQjtJQUMzQztJQUNBLElBQUksQ0FBQ0QsTUFBTTtRQUNQLE9BQU87SUFDWDtJQUNBLElBQUlOLEtBQUtLLE9BQU8sQ0FBQ0ksTUFBTSxDQUFDSCxPQUFPO1FBQzNCLE9BQU9JLE9BQU9DLFVBQVUsQ0FBQ0w7SUFDN0I7SUFDQSxJQUFJTixLQUFLSyxPQUFPLENBQUNPLE1BQU0sQ0FBQ04sT0FBTztRQUMzQixPQUFPQSxLQUFLTyxNQUFNO0lBQ3RCO0lBQ0EsSUFBSVosZUFBZUksT0FBTyxDQUFDQyxPQUFPO1FBQzlCLE9BQU9QLE9BQU9JLFNBQVMsQ0FBQ0csS0FBS1EsU0FBUyxDQUFDQyxJQUFJLENBQUNUO0lBQ2hEO0lBQ0EsSUFBSUEsZ0JBQWdCVCxLQUFLbUIsVUFBVSxFQUFFO1FBQ2pDLE1BQU0sRUFBRUMsSUFBSSxFQUFFLEdBQUcsTUFBTWYsVUFBVUksS0FBS1ksSUFBSTtRQUMxQyxJQUFJRCxTQUFTLEdBQUc7WUFDWixPQUFPRTtRQUNYO1FBQ0EsT0FBT0Y7SUFDWDtJQUNBLE9BQU9FO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1leGFtcGxlLWZ1bGwvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvZ2V0LWJvZHktc2l6ZS5qcz8wZTE5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZnNfMSA9IHJlcXVpcmUoXCJmc1wiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xuY29uc3QgaXNfMSA9IHJlcXVpcmUoXCJAc2luZHJlc29yaHVzL2lzXCIpO1xuY29uc3QgaXNfZm9ybV9kYXRhXzEgPSByZXF1aXJlKFwiLi9pcy1mb3JtLWRhdGFcIik7XG5jb25zdCBzdGF0QXN5bmMgPSB1dGlsXzEucHJvbWlzaWZ5KGZzXzEuc3RhdCk7XG5leHBvcnRzLmRlZmF1bHQgPSBhc3luYyAoYm9keSwgaGVhZGVycykgPT4ge1xuICAgIGlmIChoZWFkZXJzICYmICdjb250ZW50LWxlbmd0aCcgaW4gaGVhZGVycykge1xuICAgICAgICByZXR1cm4gTnVtYmVyKGhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ10pO1xuICAgIH1cbiAgICBpZiAoIWJvZHkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmIChpc18xLmRlZmF1bHQuc3RyaW5nKGJvZHkpKSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuYnl0ZUxlbmd0aChib2R5KTtcbiAgICB9XG4gICAgaWYgKGlzXzEuZGVmYXVsdC5idWZmZXIoYm9keSkpIHtcbiAgICAgICAgcmV0dXJuIGJvZHkubGVuZ3RoO1xuICAgIH1cbiAgICBpZiAoaXNfZm9ybV9kYXRhXzEuZGVmYXVsdChib2R5KSkge1xuICAgICAgICByZXR1cm4gdXRpbF8xLnByb21pc2lmeShib2R5LmdldExlbmd0aC5iaW5kKGJvZHkpKSgpO1xuICAgIH1cbiAgICBpZiAoYm9keSBpbnN0YW5jZW9mIGZzXzEuUmVhZFN0cmVhbSkge1xuICAgICAgICBjb25zdCB7IHNpemUgfSA9IGF3YWl0IHN0YXRBc3luYyhib2R5LnBhdGgpO1xuICAgICAgICBpZiAoc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJmc18xIiwicmVxdWlyZSIsInV0aWxfMSIsImlzXzEiLCJpc19mb3JtX2RhdGFfMSIsInN0YXRBc3luYyIsInByb21pc2lmeSIsInN0YXQiLCJkZWZhdWx0IiwiYm9keSIsImhlYWRlcnMiLCJOdW1iZXIiLCJzdHJpbmciLCJCdWZmZXIiLCJieXRlTGVuZ3RoIiwiYnVmZmVyIiwibGVuZ3RoIiwiZ2V0TGVuZ3RoIiwiYmluZCIsIlJlYWRTdHJlYW0iLCJzaXplIiwicGF0aCIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/get-body-size.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/get-buffer.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/core/utils/get-buffer.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n// TODO: Update https://github.com/sindresorhus/get-stream\nconst getBuffer = async (stream)=>{\n    const chunks = [];\n    let length = 0;\n    for await (const chunk of stream){\n        chunks.push(chunk);\n        length += Buffer.byteLength(chunk);\n    }\n    if (Buffer.isBuffer(chunks[0])) {\n        return Buffer.concat(chunks, length);\n    }\n    return Buffer.from(chunks.join(\"\"));\n};\nexports[\"default\"] = getBuffer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvZ2V0LWJ1ZmZlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCwwREFBMEQ7QUFDMUQsTUFBTUMsWUFBWSxPQUFPQztJQUNyQixNQUFNQyxTQUFTLEVBQUU7SUFDakIsSUFBSUMsU0FBUztJQUNiLFdBQVcsTUFBTUMsU0FBU0gsT0FBUTtRQUM5QkMsT0FBT0csSUFBSSxDQUFDRDtRQUNaRCxVQUFVRyxPQUFPQyxVQUFVLENBQUNIO0lBQ2hDO0lBQ0EsSUFBSUUsT0FBT0UsUUFBUSxDQUFDTixNQUFNLENBQUMsRUFBRSxHQUFHO1FBQzVCLE9BQU9JLE9BQU9HLE1BQU0sQ0FBQ1AsUUFBUUM7SUFDakM7SUFDQSxPQUFPRyxPQUFPSSxJQUFJLENBQUNSLE9BQU9TLElBQUksQ0FBQztBQUNuQztBQUNBYixrQkFBZSxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL25vdGlvbi14LWV4YW1wbGUtZnVsbC8uL25vZGVfbW9kdWxlcy9ub3Rpb24tY2xpZW50L25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS91dGlscy9nZXQtYnVmZmVyLmpzPzRhYTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyBUT0RPOiBVcGRhdGUgaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9nZXQtc3RyZWFtXG5jb25zdCBnZXRCdWZmZXIgPSBhc3luYyAoc3RyZWFtKSA9PiB7XG4gICAgY29uc3QgY2h1bmtzID0gW107XG4gICAgbGV0IGxlbmd0aCA9IDA7XG4gICAgZm9yIGF3YWl0IChjb25zdCBjaHVuayBvZiBzdHJlYW0pIHtcbiAgICAgICAgY2h1bmtzLnB1c2goY2h1bmspO1xuICAgICAgICBsZW5ndGggKz0gQnVmZmVyLmJ5dGVMZW5ndGgoY2h1bmspO1xuICAgIH1cbiAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKGNodW5rc1swXSkpIHtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoY2h1bmtzLCBsZW5ndGgpO1xuICAgIH1cbiAgICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmtzLmpvaW4oJycpKTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRCdWZmZXI7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRCdWZmZXIiLCJzdHJlYW0iLCJjaHVua3MiLCJsZW5ndGgiLCJjaHVuayIsInB1c2giLCJCdWZmZXIiLCJieXRlTGVuZ3RoIiwiaXNCdWZmZXIiLCJjb25jYXQiLCJmcm9tIiwiam9pbiIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/get-buffer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/is-form-data.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/core/utils/is-form-data.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\nexports[\"default\"] = (body)=>is_1.default.nodeStream(body) && is_1.default.function_(body.getBoundary);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvaXMtZm9ybS1kYXRhLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLE9BQU9DLG1CQUFPQSxDQUFDLDZFQUFrQjtBQUN2Q0gsa0JBQWUsR0FBRyxDQUFDSyxPQUFTSCxLQUFLRSxPQUFPLENBQUNFLFVBQVUsQ0FBQ0QsU0FBU0gsS0FBS0UsT0FBTyxDQUFDRyxTQUFTLENBQUNGLEtBQUtHLFdBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1leGFtcGxlLWZ1bGwvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvaXMtZm9ybS1kYXRhLmpzP2NjOGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBpc18xID0gcmVxdWlyZShcIkBzaW5kcmVzb3JodXMvaXNcIik7XG5leHBvcnRzLmRlZmF1bHQgPSAoYm9keSkgPT4gaXNfMS5kZWZhdWx0Lm5vZGVTdHJlYW0oYm9keSkgJiYgaXNfMS5kZWZhdWx0LmZ1bmN0aW9uXyhib2R5LmdldEJvdW5kYXJ5KTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzXzEiLCJyZXF1aXJlIiwiZGVmYXVsdCIsImJvZHkiLCJub2RlU3RyZWFtIiwiZnVuY3Rpb25fIiwiZ2V0Qm91bmRhcnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/is-form-data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/is-response-ok.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/core/utils/is-response-ok.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isResponseOk = void 0;\nexports.isResponseOk = (response)=>{\n    const { statusCode } = response;\n    const limitStatusCode = response.request.options.followRedirect ? 299 : 399;\n    return statusCode >= 200 && statusCode <= limitStatusCode || statusCode === 304;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvaXMtcmVzcG9uc2Utb2suanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9CQUFvQixHQUFHLEtBQUs7QUFDNUJBLG9CQUFvQixHQUFHLENBQUNHO0lBQ3BCLE1BQU0sRUFBRUMsVUFBVSxFQUFFLEdBQUdEO0lBQ3ZCLE1BQU1FLGtCQUFrQkYsU0FBU0csT0FBTyxDQUFDQyxPQUFPLENBQUNDLGNBQWMsR0FBRyxNQUFNO0lBQ3hFLE9BQU8sY0FBZSxPQUFPSixjQUFjQyxtQkFBb0JELGVBQWU7QUFDbEYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1leGFtcGxlLWZ1bGwvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvaXMtcmVzcG9uc2Utb2suanM/M2Q2OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNSZXNwb25zZU9rID0gdm9pZCAwO1xuZXhwb3J0cy5pc1Jlc3BvbnNlT2sgPSAocmVzcG9uc2UpID0+IHtcbiAgICBjb25zdCB7IHN0YXR1c0NvZGUgfSA9IHJlc3BvbnNlO1xuICAgIGNvbnN0IGxpbWl0U3RhdHVzQ29kZSA9IHJlc3BvbnNlLnJlcXVlc3Qub3B0aW9ucy5mb2xsb3dSZWRpcmVjdCA/IDI5OSA6IDM5OTtcbiAgICByZXR1cm4gKHN0YXR1c0NvZGUgPj0gMjAwICYmIHN0YXR1c0NvZGUgPD0gbGltaXRTdGF0dXNDb2RlKSB8fCBzdGF0dXNDb2RlID09PSAzMDQ7XG59O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNSZXNwb25zZU9rIiwicmVzcG9uc2UiLCJzdGF0dXNDb2RlIiwibGltaXRTdGF0dXNDb2RlIiwicmVxdWVzdCIsIm9wdGlvbnMiLCJmb2xsb3dSZWRpcmVjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/is-response-ok.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/options-to-url.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/core/utils/options-to-url.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n/* istanbul ignore file: deprecated */ const url_1 = __webpack_require__(/*! url */ \"url\");\nconst keys = [\n    \"protocol\",\n    \"host\",\n    \"hostname\",\n    \"port\",\n    \"pathname\",\n    \"search\"\n];\nexports[\"default\"] = (origin, options)=>{\n    var _a, _b;\n    if (options.path) {\n        if (options.pathname) {\n            throw new TypeError(\"Parameters `path` and `pathname` are mutually exclusive.\");\n        }\n        if (options.search) {\n            throw new TypeError(\"Parameters `path` and `search` are mutually exclusive.\");\n        }\n        if (options.searchParams) {\n            throw new TypeError(\"Parameters `path` and `searchParams` are mutually exclusive.\");\n        }\n    }\n    if (options.search && options.searchParams) {\n        throw new TypeError(\"Parameters `search` and `searchParams` are mutually exclusive.\");\n    }\n    if (!origin) {\n        if (!options.protocol) {\n            throw new TypeError(\"No URL protocol specified\");\n        }\n        origin = `${options.protocol}//${(_b = (_a = options.hostname) !== null && _a !== void 0 ? _a : options.host) !== null && _b !== void 0 ? _b : \"\"}`;\n    }\n    const url = new url_1.URL(origin);\n    if (options.path) {\n        const searchIndex = options.path.indexOf(\"?\");\n        if (searchIndex === -1) {\n            options.pathname = options.path;\n        } else {\n            options.pathname = options.path.slice(0, searchIndex);\n            options.search = options.path.slice(searchIndex + 1);\n        }\n        delete options.path;\n    }\n    for (const key of keys){\n        if (options[key]) {\n            url[key] = options[key].toString();\n        }\n    }\n    return url;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvb3B0aW9ucy10by11cmwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0Qsb0NBQW9DLEdBQ3BDLE1BQU1DLFFBQVFDLG1CQUFPQSxDQUFDLGdCQUFLO0FBQzNCLE1BQU1DLE9BQU87SUFDVDtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDSDtBQUNESixrQkFBZSxHQUFHLENBQUNNLFFBQVFDO0lBQ3ZCLElBQUlDLElBQUlDO0lBQ1IsSUFBSUYsUUFBUUcsSUFBSSxFQUFFO1FBQ2QsSUFBSUgsUUFBUUksUUFBUSxFQUFFO1lBQ2xCLE1BQU0sSUFBSUMsVUFBVTtRQUN4QjtRQUNBLElBQUlMLFFBQVFNLE1BQU0sRUFBRTtZQUNoQixNQUFNLElBQUlELFVBQVU7UUFDeEI7UUFDQSxJQUFJTCxRQUFRTyxZQUFZLEVBQUU7WUFDdEIsTUFBTSxJQUFJRixVQUFVO1FBQ3hCO0lBQ0o7SUFDQSxJQUFJTCxRQUFRTSxNQUFNLElBQUlOLFFBQVFPLFlBQVksRUFBRTtRQUN4QyxNQUFNLElBQUlGLFVBQVU7SUFDeEI7SUFDQSxJQUFJLENBQUNOLFFBQVE7UUFDVCxJQUFJLENBQUNDLFFBQVFRLFFBQVEsRUFBRTtZQUNuQixNQUFNLElBQUlILFVBQVU7UUFDeEI7UUFDQU4sU0FBUyxDQUFDLEVBQUVDLFFBQVFRLFFBQVEsQ0FBQyxFQUFFLEVBQUUsQ0FBQ04sS0FBSyxDQUFDRCxLQUFLRCxRQUFRUyxRQUFRLE1BQU0sUUFBUVIsT0FBTyxLQUFLLElBQUlBLEtBQUtELFFBQVFVLElBQUksTUFBTSxRQUFRUixPQUFPLEtBQUssSUFBSUEsS0FBSyxHQUFHLENBQUM7SUFDdko7SUFDQSxNQUFNUyxNQUFNLElBQUloQixNQUFNaUIsR0FBRyxDQUFDYjtJQUMxQixJQUFJQyxRQUFRRyxJQUFJLEVBQUU7UUFDZCxNQUFNVSxjQUFjYixRQUFRRyxJQUFJLENBQUNXLE9BQU8sQ0FBQztRQUN6QyxJQUFJRCxnQkFBZ0IsQ0FBQyxHQUFHO1lBQ3BCYixRQUFRSSxRQUFRLEdBQUdKLFFBQVFHLElBQUk7UUFDbkMsT0FDSztZQUNESCxRQUFRSSxRQUFRLEdBQUdKLFFBQVFHLElBQUksQ0FBQ1ksS0FBSyxDQUFDLEdBQUdGO1lBQ3pDYixRQUFRTSxNQUFNLEdBQUdOLFFBQVFHLElBQUksQ0FBQ1ksS0FBSyxDQUFDRixjQUFjO1FBQ3REO1FBQ0EsT0FBT2IsUUFBUUcsSUFBSTtJQUN2QjtJQUNBLEtBQUssTUFBTWEsT0FBT25CLEtBQU07UUFDcEIsSUFBSUcsT0FBTyxDQUFDZ0IsSUFBSSxFQUFFO1lBQ2RMLEdBQUcsQ0FBQ0ssSUFBSSxHQUFHaEIsT0FBTyxDQUFDZ0IsSUFBSSxDQUFDQyxRQUFRO1FBQ3BDO0lBQ0o7SUFDQSxPQUFPTjtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZXhhbXBsZS1mdWxsLy4vbm9kZV9tb2R1bGVzL25vdGlvbi1jbGllbnQvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL29wdGlvbnMtdG8tdXJsLmpzPzZhMzgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgZmlsZTogZGVwcmVjYXRlZCAqL1xuY29uc3QgdXJsXzEgPSByZXF1aXJlKFwidXJsXCIpO1xuY29uc3Qga2V5cyA9IFtcbiAgICAncHJvdG9jb2wnLFxuICAgICdob3N0JyxcbiAgICAnaG9zdG5hbWUnLFxuICAgICdwb3J0JyxcbiAgICAncGF0aG5hbWUnLFxuICAgICdzZWFyY2gnXG5dO1xuZXhwb3J0cy5kZWZhdWx0ID0gKG9yaWdpbiwgb3B0aW9ucykgPT4ge1xuICAgIHZhciBfYSwgX2I7XG4gICAgaWYgKG9wdGlvbnMucGF0aCkge1xuICAgICAgICBpZiAob3B0aW9ucy5wYXRobmFtZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUGFyYW1ldGVycyBgcGF0aGAgYW5kIGBwYXRobmFtZWAgYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZS4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5zZWFyY2gpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BhcmFtZXRlcnMgYHBhdGhgIGFuZCBgc2VhcmNoYCBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnNlYXJjaFBhcmFtcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUGFyYW1ldGVycyBgcGF0aGAgYW5kIGBzZWFyY2hQYXJhbXNgIGFyZSBtdXR1YWxseSBleGNsdXNpdmUuJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuc2VhcmNoICYmIG9wdGlvbnMuc2VhcmNoUGFyYW1zKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BhcmFtZXRlcnMgYHNlYXJjaGAgYW5kIGBzZWFyY2hQYXJhbXNgIGFyZSBtdXR1YWxseSBleGNsdXNpdmUuJyk7XG4gICAgfVxuICAgIGlmICghb3JpZ2luKSB7XG4gICAgICAgIGlmICghb3B0aW9ucy5wcm90b2NvbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTm8gVVJMIHByb3RvY29sIHNwZWNpZmllZCcpO1xuICAgICAgICB9XG4gICAgICAgIG9yaWdpbiA9IGAke29wdGlvbnMucHJvdG9jb2x9Ly8keyhfYiA9IChfYSA9IG9wdGlvbnMuaG9zdG5hbWUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG9wdGlvbnMuaG9zdCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJyd9YDtcbiAgICB9XG4gICAgY29uc3QgdXJsID0gbmV3IHVybF8xLlVSTChvcmlnaW4pO1xuICAgIGlmIChvcHRpb25zLnBhdGgpIHtcbiAgICAgICAgY29uc3Qgc2VhcmNoSW5kZXggPSBvcHRpb25zLnBhdGguaW5kZXhPZignPycpO1xuICAgICAgICBpZiAoc2VhcmNoSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICBvcHRpb25zLnBhdGhuYW1lID0gb3B0aW9ucy5wYXRoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb3B0aW9ucy5wYXRobmFtZSA9IG9wdGlvbnMucGF0aC5zbGljZSgwLCBzZWFyY2hJbmRleCk7XG4gICAgICAgICAgICBvcHRpb25zLnNlYXJjaCA9IG9wdGlvbnMucGF0aC5zbGljZShzZWFyY2hJbmRleCArIDEpO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSBvcHRpb25zLnBhdGg7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnNba2V5XSkge1xuICAgICAgICAgICAgdXJsW2tleV0gPSBvcHRpb25zW2tleV0udG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdXJsO1xufTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInVybF8xIiwicmVxdWlyZSIsImtleXMiLCJkZWZhdWx0Iiwib3JpZ2luIiwib3B0aW9ucyIsIl9hIiwiX2IiLCJwYXRoIiwicGF0aG5hbWUiLCJUeXBlRXJyb3IiLCJzZWFyY2giLCJzZWFyY2hQYXJhbXMiLCJwcm90b2NvbCIsImhvc3RuYW1lIiwiaG9zdCIsInVybCIsIlVSTCIsInNlYXJjaEluZGV4IiwiaW5kZXhPZiIsInNsaWNlIiwia2V5IiwidG9TdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/options-to-url.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/proxy-events.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/core/utils/proxy-events.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nfunction default_1(from, to, events) {\n    const fns = {};\n    for (const event of events){\n        fns[event] = (...args)=>{\n            to.emit(event, ...args);\n        };\n        from.on(event, fns[event]);\n    }\n    return ()=>{\n        for (const event of events){\n            from.off(event, fns[event]);\n        }\n    };\n}\nexports[\"default\"] = default_1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvcHJveHktZXZlbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELFNBQVNDLFVBQVVDLElBQUksRUFBRUMsRUFBRSxFQUFFQyxNQUFNO0lBQy9CLE1BQU1DLE1BQU0sQ0FBQztJQUNiLEtBQUssTUFBTUMsU0FBU0YsT0FBUTtRQUN4QkMsR0FBRyxDQUFDQyxNQUFNLEdBQUcsQ0FBQyxHQUFHQztZQUNiSixHQUFHSyxJQUFJLENBQUNGLFVBQVVDO1FBQ3RCO1FBQ0FMLEtBQUtPLEVBQUUsQ0FBQ0gsT0FBT0QsR0FBRyxDQUFDQyxNQUFNO0lBQzdCO0lBQ0EsT0FBTztRQUNILEtBQUssTUFBTUEsU0FBU0YsT0FBUTtZQUN4QkYsS0FBS1EsR0FBRyxDQUFDSixPQUFPRCxHQUFHLENBQUNDLE1BQU07UUFDOUI7SUFDSjtBQUNKO0FBQ0FQLGtCQUFlLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZXhhbXBsZS1mdWxsLy4vbm9kZV9tb2R1bGVzL25vdGlvbi1jbGllbnQvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL3Byb3h5LWV2ZW50cy5qcz82NWQwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gZGVmYXVsdF8xKGZyb20sIHRvLCBldmVudHMpIHtcbiAgICBjb25zdCBmbnMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIGV2ZW50cykge1xuICAgICAgICBmbnNbZXZlbnRdID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgIHRvLmVtaXQoZXZlbnQsIC4uLmFyZ3MpO1xuICAgICAgICB9O1xuICAgICAgICBmcm9tLm9uKGV2ZW50LCBmbnNbZXZlbnRdKTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBldmVudCBvZiBldmVudHMpIHtcbiAgICAgICAgICAgIGZyb20ub2ZmKGV2ZW50LCBmbnNbZXZlbnRdKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5leHBvcnRzLmRlZmF1bHQgPSBkZWZhdWx0XzE7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0XzEiLCJmcm9tIiwidG8iLCJldmVudHMiLCJmbnMiLCJldmVudCIsImFyZ3MiLCJlbWl0Iiwib24iLCJvZmYiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/proxy-events.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/timed-out.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/core/utils/timed-out.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TimeoutError = void 0;\nconst net = __webpack_require__(/*! net */ \"net\");\nconst unhandle_1 = __webpack_require__(/*! ./unhandle */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/unhandle.js\");\nconst reentry = Symbol(\"reentry\");\nconst noop = ()=>{};\nclass TimeoutError extends Error {\n    constructor(threshold, event){\n        super(`Timeout awaiting '${event}' for ${threshold}ms`);\n        this.event = event;\n        this.name = \"TimeoutError\";\n        this.code = \"ETIMEDOUT\";\n    }\n}\nexports.TimeoutError = TimeoutError;\nexports[\"default\"] = (request, delays, options)=>{\n    if (reentry in request) {\n        return noop;\n    }\n    request[reentry] = true;\n    const cancelers = [];\n    const { once, unhandleAll } = unhandle_1.default();\n    const addTimeout = (delay, callback, event)=>{\n        var _a;\n        const timeout = setTimeout(callback, delay, delay, event);\n        (_a = timeout.unref) === null || _a === void 0 ? void 0 : _a.call(timeout);\n        const cancel = ()=>{\n            clearTimeout(timeout);\n        };\n        cancelers.push(cancel);\n        return cancel;\n    };\n    const { host, hostname } = options;\n    const timeoutHandler = (delay, event)=>{\n        request.destroy(new TimeoutError(delay, event));\n    };\n    const cancelTimeouts = ()=>{\n        for (const cancel of cancelers){\n            cancel();\n        }\n        unhandleAll();\n    };\n    request.once(\"error\", (error)=>{\n        cancelTimeouts();\n        // Save original behavior\n        /* istanbul ignore next */ if (request.listenerCount(\"error\") === 0) {\n            throw error;\n        }\n    });\n    request.once(\"close\", cancelTimeouts);\n    once(request, \"response\", (response)=>{\n        once(response, \"end\", cancelTimeouts);\n    });\n    if (typeof delays.request !== \"undefined\") {\n        addTimeout(delays.request, timeoutHandler, \"request\");\n    }\n    if (typeof delays.socket !== \"undefined\") {\n        const socketTimeoutHandler = ()=>{\n            timeoutHandler(delays.socket, \"socket\");\n        };\n        request.setTimeout(delays.socket, socketTimeoutHandler);\n        // `request.setTimeout(0)` causes a memory leak.\n        // We can just remove the listener and forget about the timer - it's unreffed.\n        // See https://github.com/sindresorhus/got/issues/690\n        cancelers.push(()=>{\n            request.removeListener(\"timeout\", socketTimeoutHandler);\n        });\n    }\n    once(request, \"socket\", (socket)=>{\n        var _a;\n        const { socketPath } = request;\n        /* istanbul ignore next: hard to test */ if (socket.connecting) {\n            const hasPath = Boolean(socketPath !== null && socketPath !== void 0 ? socketPath : net.isIP((_a = hostname !== null && hostname !== void 0 ? hostname : host) !== null && _a !== void 0 ? _a : \"\") !== 0);\n            if (typeof delays.lookup !== \"undefined\" && !hasPath && typeof socket.address().address === \"undefined\") {\n                const cancelTimeout = addTimeout(delays.lookup, timeoutHandler, \"lookup\");\n                once(socket, \"lookup\", cancelTimeout);\n            }\n            if (typeof delays.connect !== \"undefined\") {\n                const timeConnect = ()=>addTimeout(delays.connect, timeoutHandler, \"connect\");\n                if (hasPath) {\n                    once(socket, \"connect\", timeConnect());\n                } else {\n                    once(socket, \"lookup\", (error)=>{\n                        if (error === null) {\n                            once(socket, \"connect\", timeConnect());\n                        }\n                    });\n                }\n            }\n            if (typeof delays.secureConnect !== \"undefined\" && options.protocol === \"https:\") {\n                once(socket, \"connect\", ()=>{\n                    const cancelTimeout = addTimeout(delays.secureConnect, timeoutHandler, \"secureConnect\");\n                    once(socket, \"secureConnect\", cancelTimeout);\n                });\n            }\n        }\n        if (typeof delays.send !== \"undefined\") {\n            const timeRequest = ()=>addTimeout(delays.send, timeoutHandler, \"send\");\n            /* istanbul ignore next: hard to test */ if (socket.connecting) {\n                once(socket, \"connect\", ()=>{\n                    once(request, \"upload-complete\", timeRequest());\n                });\n            } else {\n                once(request, \"upload-complete\", timeRequest());\n            }\n        }\n    });\n    if (typeof delays.response !== \"undefined\") {\n        once(request, \"upload-complete\", ()=>{\n            const cancelTimeout = addTimeout(delays.response, timeoutHandler, \"response\");\n            once(request, \"response\", cancelTimeout);\n        });\n    }\n    return cancelTimeouts;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/timed-out.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/unhandle.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/core/utils/unhandle.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n// When attaching listeners, it's very easy to forget about them.\n// Especially if you do error handling and set timeouts.\n// So instead of checking if it's proper to throw an error on every timeout ever,\n// use this simple tool which will remove all listeners you have attached.\nexports[\"default\"] = ()=>{\n    const handlers = [];\n    return {\n        once (origin, event, fn) {\n            origin.once(event, fn);\n            handlers.push({\n                origin,\n                event,\n                fn\n            });\n        },\n        unhandleAll () {\n            for (const handler of handlers){\n                const { origin, event, fn } = handler;\n                origin.removeListener(event, fn);\n            }\n            handlers.length = 0;\n        }\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvdW5oYW5kbGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsaUVBQWlFO0FBQ2pFLHdEQUF3RDtBQUN4RCxpRkFBaUY7QUFDakYsMEVBQTBFO0FBQzFFRCxrQkFBZSxHQUFHO0lBQ2QsTUFBTUcsV0FBVyxFQUFFO0lBQ25CLE9BQU87UUFDSEMsTUFBS0MsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLEVBQUU7WUFDbEJGLE9BQU9ELElBQUksQ0FBQ0UsT0FBT0M7WUFDbkJKLFNBQVNLLElBQUksQ0FBQztnQkFBRUg7Z0JBQVFDO2dCQUFPQztZQUFHO1FBQ3RDO1FBQ0FFO1lBQ0ksS0FBSyxNQUFNQyxXQUFXUCxTQUFVO2dCQUM1QixNQUFNLEVBQUVFLE1BQU0sRUFBRUMsS0FBSyxFQUFFQyxFQUFFLEVBQUUsR0FBR0c7Z0JBQzlCTCxPQUFPTSxjQUFjLENBQUNMLE9BQU9DO1lBQ2pDO1lBQ0FKLFNBQVNTLE1BQU0sR0FBRztRQUN0QjtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1leGFtcGxlLWZ1bGwvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvdW5oYW5kbGUuanM/Mjc2OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIFdoZW4gYXR0YWNoaW5nIGxpc3RlbmVycywgaXQncyB2ZXJ5IGVhc3kgdG8gZm9yZ2V0IGFib3V0IHRoZW0uXG4vLyBFc3BlY2lhbGx5IGlmIHlvdSBkbyBlcnJvciBoYW5kbGluZyBhbmQgc2V0IHRpbWVvdXRzLlxuLy8gU28gaW5zdGVhZCBvZiBjaGVja2luZyBpZiBpdCdzIHByb3BlciB0byB0aHJvdyBhbiBlcnJvciBvbiBldmVyeSB0aW1lb3V0IGV2ZXIsXG4vLyB1c2UgdGhpcyBzaW1wbGUgdG9vbCB3aGljaCB3aWxsIHJlbW92ZSBhbGwgbGlzdGVuZXJzIHlvdSBoYXZlIGF0dGFjaGVkLlxuZXhwb3J0cy5kZWZhdWx0ID0gKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZXJzID0gW107XG4gICAgcmV0dXJuIHtcbiAgICAgICAgb25jZShvcmlnaW4sIGV2ZW50LCBmbikge1xuICAgICAgICAgICAgb3JpZ2luLm9uY2UoZXZlbnQsIGZuKTtcbiAgICAgICAgICAgIGhhbmRsZXJzLnB1c2goeyBvcmlnaW4sIGV2ZW50LCBmbiB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgdW5oYW5kbGVBbGwoKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGhhbmRsZXIgb2YgaGFuZGxlcnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IG9yaWdpbiwgZXZlbnQsIGZuIH0gPSBoYW5kbGVyO1xuICAgICAgICAgICAgICAgIG9yaWdpbi5yZW1vdmVMaXN0ZW5lcihldmVudCwgZm4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGFuZGxlcnMubGVuZ3RoID0gMDtcbiAgICAgICAgfVxuICAgIH07XG59O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsImhhbmRsZXJzIiwib25jZSIsIm9yaWdpbiIsImV2ZW50IiwiZm4iLCJwdXNoIiwidW5oYW5kbGVBbGwiLCJoYW5kbGVyIiwicmVtb3ZlTGlzdGVuZXIiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/unhandle.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/url-to-options.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/core/utils/url-to-options.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\nexports[\"default\"] = (url)=>{\n    // Cast to URL\n    url = url;\n    const options = {\n        protocol: url.protocol,\n        hostname: is_1.default.string(url.hostname) && url.hostname.startsWith(\"[\") ? url.hostname.slice(1, -1) : url.hostname,\n        host: url.host,\n        hash: url.hash,\n        search: url.search,\n        pathname: url.pathname,\n        href: url.href,\n        path: `${url.pathname || \"\"}${url.search || \"\"}`\n    };\n    if (is_1.default.string(url.port) && url.port.length > 0) {\n        options.port = Number(url.port);\n    }\n    if (url.username || url.password) {\n        options.auth = `${url.username || \"\"}:${url.password || \"\"}`;\n    }\n    return options;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvdXJsLXRvLW9wdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsT0FBT0MsbUJBQU9BLENBQUMsNkVBQWtCO0FBQ3ZDSCxrQkFBZSxHQUFHLENBQUNLO0lBQ2YsY0FBYztJQUNkQSxNQUFNQTtJQUNOLE1BQU1DLFVBQVU7UUFDWkMsVUFBVUYsSUFBSUUsUUFBUTtRQUN0QkMsVUFBVU4sS0FBS0UsT0FBTyxDQUFDSyxNQUFNLENBQUNKLElBQUlHLFFBQVEsS0FBS0gsSUFBSUcsUUFBUSxDQUFDRSxVQUFVLENBQUMsT0FBT0wsSUFBSUcsUUFBUSxDQUFDRyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUtOLElBQUlHLFFBQVE7UUFDdEhJLE1BQU1QLElBQUlPLElBQUk7UUFDZEMsTUFBTVIsSUFBSVEsSUFBSTtRQUNkQyxRQUFRVCxJQUFJUyxNQUFNO1FBQ2xCQyxVQUFVVixJQUFJVSxRQUFRO1FBQ3RCQyxNQUFNWCxJQUFJVyxJQUFJO1FBQ2RDLE1BQU0sQ0FBQyxFQUFFWixJQUFJVSxRQUFRLElBQUksR0FBRyxFQUFFVixJQUFJUyxNQUFNLElBQUksR0FBRyxDQUFDO0lBQ3BEO0lBQ0EsSUFBSVosS0FBS0UsT0FBTyxDQUFDSyxNQUFNLENBQUNKLElBQUlhLElBQUksS0FBS2IsSUFBSWEsSUFBSSxDQUFDQyxNQUFNLEdBQUcsR0FBRztRQUN0RGIsUUFBUVksSUFBSSxHQUFHRSxPQUFPZixJQUFJYSxJQUFJO0lBQ2xDO0lBQ0EsSUFBSWIsSUFBSWdCLFFBQVEsSUFBSWhCLElBQUlpQixRQUFRLEVBQUU7UUFDOUJoQixRQUFRaUIsSUFBSSxHQUFHLENBQUMsRUFBRWxCLElBQUlnQixRQUFRLElBQUksR0FBRyxDQUFDLEVBQUVoQixJQUFJaUIsUUFBUSxJQUFJLEdBQUcsQ0FBQztJQUNoRTtJQUNBLE9BQU9oQjtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZXhhbXBsZS1mdWxsLy4vbm9kZV9tb2R1bGVzL25vdGlvbi1jbGllbnQvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL3VybC10by1vcHRpb25zLmpzPzBiODQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBpc18xID0gcmVxdWlyZShcIkBzaW5kcmVzb3JodXMvaXNcIik7XG5leHBvcnRzLmRlZmF1bHQgPSAodXJsKSA9PiB7XG4gICAgLy8gQ2FzdCB0byBVUkxcbiAgICB1cmwgPSB1cmw7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgcHJvdG9jb2w6IHVybC5wcm90b2NvbCxcbiAgICAgICAgaG9zdG5hbWU6IGlzXzEuZGVmYXVsdC5zdHJpbmcodXJsLmhvc3RuYW1lKSAmJiB1cmwuaG9zdG5hbWUuc3RhcnRzV2l0aCgnWycpID8gdXJsLmhvc3RuYW1lLnNsaWNlKDEsIC0xKSA6IHVybC5ob3N0bmFtZSxcbiAgICAgICAgaG9zdDogdXJsLmhvc3QsXG4gICAgICAgIGhhc2g6IHVybC5oYXNoLFxuICAgICAgICBzZWFyY2g6IHVybC5zZWFyY2gsXG4gICAgICAgIHBhdGhuYW1lOiB1cmwucGF0aG5hbWUsXG4gICAgICAgIGhyZWY6IHVybC5ocmVmLFxuICAgICAgICBwYXRoOiBgJHt1cmwucGF0aG5hbWUgfHwgJyd9JHt1cmwuc2VhcmNoIHx8ICcnfWBcbiAgICB9O1xuICAgIGlmIChpc18xLmRlZmF1bHQuc3RyaW5nKHVybC5wb3J0KSAmJiB1cmwucG9ydC5sZW5ndGggPiAwKSB7XG4gICAgICAgIG9wdGlvbnMucG9ydCA9IE51bWJlcih1cmwucG9ydCk7XG4gICAgfVxuICAgIGlmICh1cmwudXNlcm5hbWUgfHwgdXJsLnBhc3N3b3JkKSB7XG4gICAgICAgIG9wdGlvbnMuYXV0aCA9IGAke3VybC51c2VybmFtZSB8fCAnJ306JHt1cmwucGFzc3dvcmQgfHwgJyd9YDtcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnM7XG59O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNfMSIsInJlcXVpcmUiLCJkZWZhdWx0IiwidXJsIiwib3B0aW9ucyIsInByb3RvY29sIiwiaG9zdG5hbWUiLCJzdHJpbmciLCJzdGFydHNXaXRoIiwic2xpY2UiLCJob3N0IiwiaGFzaCIsInNlYXJjaCIsInBhdGhuYW1lIiwiaHJlZiIsInBhdGgiLCJwb3J0IiwibGVuZ3RoIiwiTnVtYmVyIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImF1dGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/url-to-options.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/weakable-map.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/core/utils/weakable-map.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nclass WeakableMap {\n    constructor(){\n        this.weakMap = new WeakMap();\n        this.map = new Map();\n    }\n    set(key, value) {\n        if (typeof key === \"object\") {\n            this.weakMap.set(key, value);\n        } else {\n            this.map.set(key, value);\n        }\n    }\n    get(key) {\n        if (typeof key === \"object\") {\n            return this.weakMap.get(key);\n        }\n        return this.map.get(key);\n    }\n    has(key) {\n        if (typeof key === \"object\") {\n            return this.weakMap.has(key);\n        }\n        return this.map.has(key);\n    }\n}\nexports[\"default\"] = WeakableMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvd2Vha2FibGUtbWFwLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DO0lBQ0ZDLGFBQWM7UUFDVixJQUFJLENBQUNDLE9BQU8sR0FBRyxJQUFJQztRQUNuQixJQUFJLENBQUNDLEdBQUcsR0FBRyxJQUFJQztJQUNuQjtJQUNBQyxJQUFJQyxHQUFHLEVBQUVSLEtBQUssRUFBRTtRQUNaLElBQUksT0FBT1EsUUFBUSxVQUFVO1lBQ3pCLElBQUksQ0FBQ0wsT0FBTyxDQUFDSSxHQUFHLENBQUNDLEtBQUtSO1FBQzFCLE9BQ0s7WUFDRCxJQUFJLENBQUNLLEdBQUcsQ0FBQ0UsR0FBRyxDQUFDQyxLQUFLUjtRQUN0QjtJQUNKO0lBQ0FTLElBQUlELEdBQUcsRUFBRTtRQUNMLElBQUksT0FBT0EsUUFBUSxVQUFVO1lBQ3pCLE9BQU8sSUFBSSxDQUFDTCxPQUFPLENBQUNNLEdBQUcsQ0FBQ0Q7UUFDNUI7UUFDQSxPQUFPLElBQUksQ0FBQ0gsR0FBRyxDQUFDSSxHQUFHLENBQUNEO0lBQ3hCO0lBQ0FFLElBQUlGLEdBQUcsRUFBRTtRQUNMLElBQUksT0FBT0EsUUFBUSxVQUFVO1lBQ3pCLE9BQU8sSUFBSSxDQUFDTCxPQUFPLENBQUNPLEdBQUcsQ0FBQ0Y7UUFDNUI7UUFDQSxPQUFPLElBQUksQ0FBQ0gsR0FBRyxDQUFDSyxHQUFHLENBQUNGO0lBQ3hCO0FBQ0o7QUFDQVQsa0JBQWUsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1leGFtcGxlLWZ1bGwvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvd2Vha2FibGUtbWFwLmpzPzU3NGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jbGFzcyBXZWFrYWJsZU1hcCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMud2Vha01hcCA9IG5ldyBXZWFrTWFwKCk7XG4gICAgICAgIHRoaXMubWFwID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRoaXMud2Vha01hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0KGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndlYWtNYXAuZ2V0KGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubWFwLmdldChrZXkpO1xuICAgIH1cbiAgICBoYXMoa2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMud2Vha01hcC5oYXMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5tYXAuaGFzKGtleSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gV2Vha2FibGVNYXA7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJXZWFrYWJsZU1hcCIsImNvbnN0cnVjdG9yIiwid2Vha01hcCIsIldlYWtNYXAiLCJtYXAiLCJNYXAiLCJzZXQiLCJrZXkiLCJnZXQiLCJoYXMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/utils/weakable-map.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/create.js":
/*!***************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/create.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.defaultHandler = void 0;\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\nconst as_promise_1 = __webpack_require__(/*! ./as-promise */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/index.js\");\nconst create_rejection_1 = __webpack_require__(/*! ./as-promise/create-rejection */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/create-rejection.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/core/index.js\");\nconst deep_freeze_1 = __webpack_require__(/*! ./utils/deep-freeze */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/utils/deep-freeze.js\");\nconst errors = {\n    RequestError: as_promise_1.RequestError,\n    CacheError: as_promise_1.CacheError,\n    ReadError: as_promise_1.ReadError,\n    HTTPError: as_promise_1.HTTPError,\n    MaxRedirectsError: as_promise_1.MaxRedirectsError,\n    TimeoutError: as_promise_1.TimeoutError,\n    ParseError: as_promise_1.ParseError,\n    CancelError: as_promise_1.CancelError,\n    UnsupportedProtocolError: as_promise_1.UnsupportedProtocolError,\n    UploadError: as_promise_1.UploadError\n};\n// The `delay` package weighs 10KB (!)\nconst delay = async (ms)=>new Promise((resolve)=>{\n        setTimeout(resolve, ms);\n    });\nconst { normalizeArguments } = core_1.default;\nconst mergeOptions = (...sources)=>{\n    let mergedOptions;\n    for (const source of sources){\n        mergedOptions = normalizeArguments(undefined, source, mergedOptions);\n    }\n    return mergedOptions;\n};\nconst getPromiseOrStream = (options)=>options.isStream ? new core_1.default(undefined, options) : as_promise_1.default(options);\nconst isGotInstance = (value)=>\"defaults\" in value && \"options\" in value.defaults;\nconst aliases = [\n    \"get\",\n    \"post\",\n    \"put\",\n    \"patch\",\n    \"head\",\n    \"delete\"\n];\nexports.defaultHandler = (options, next)=>next(options);\nconst callInitHooks = (hooks, options)=>{\n    if (hooks) {\n        for (const hook of hooks){\n            hook(options);\n        }\n    }\n};\nconst create = (defaults)=>{\n    // Proxy properties from next handlers\n    defaults._rawHandlers = defaults.handlers;\n    defaults.handlers = defaults.handlers.map((fn)=>(options, next)=>{\n            // This will be assigned by assigning result\n            let root;\n            const result = fn(options, (newOptions)=>{\n                root = next(newOptions);\n                return root;\n            });\n            if (result !== root && !options.isStream && root) {\n                const typedResult = result;\n                const { then: promiseThen, catch: promiseCatch, finally: promiseFianlly } = typedResult;\n                Object.setPrototypeOf(typedResult, Object.getPrototypeOf(root));\n                Object.defineProperties(typedResult, Object.getOwnPropertyDescriptors(root));\n                // These should point to the new promise\n                // eslint-disable-next-line promise/prefer-await-to-then\n                typedResult.then = promiseThen;\n                typedResult.catch = promiseCatch;\n                typedResult.finally = promiseFianlly;\n            }\n            return result;\n        });\n    // Got interface\n    const got = (url, options = {}, _defaults)=>{\n        var _a, _b;\n        let iteration = 0;\n        const iterateHandlers = (newOptions)=>{\n            return defaults.handlers[iteration++](newOptions, iteration === defaults.handlers.length ? getPromiseOrStream : iterateHandlers);\n        };\n        // TODO: Remove this in Got 12.\n        if (is_1.default.plainObject(url)) {\n            const mergedOptions = {\n                ...url,\n                ...options\n            };\n            core_1.setNonEnumerableProperties([\n                url,\n                options\n            ], mergedOptions);\n            options = mergedOptions;\n            url = undefined;\n        }\n        try {\n            // Call `init` hooks\n            let initHookError;\n            try {\n                callInitHooks(defaults.options.hooks.init, options);\n                callInitHooks((_a = options.hooks) === null || _a === void 0 ? void 0 : _a.init, options);\n            } catch (error) {\n                initHookError = error;\n            }\n            // Normalize options & call handlers\n            const normalizedOptions = normalizeArguments(url, options, _defaults !== null && _defaults !== void 0 ? _defaults : defaults.options);\n            normalizedOptions[core_1.kIsNormalizedAlready] = true;\n            if (initHookError) {\n                throw new as_promise_1.RequestError(initHookError.message, initHookError, normalizedOptions);\n            }\n            return iterateHandlers(normalizedOptions);\n        } catch (error) {\n            if (options.isStream) {\n                throw error;\n            } else {\n                return create_rejection_1.default(error, defaults.options.hooks.beforeError, (_b = options.hooks) === null || _b === void 0 ? void 0 : _b.beforeError);\n            }\n        }\n    };\n    got.extend = (...instancesOrOptions)=>{\n        const optionsArray = [\n            defaults.options\n        ];\n        let handlers = [\n            ...defaults._rawHandlers\n        ];\n        let isMutableDefaults;\n        for (const value of instancesOrOptions){\n            if (isGotInstance(value)) {\n                optionsArray.push(value.defaults.options);\n                handlers.push(...value.defaults._rawHandlers);\n                isMutableDefaults = value.defaults.mutableDefaults;\n            } else {\n                optionsArray.push(value);\n                if (\"handlers\" in value) {\n                    handlers.push(...value.handlers);\n                }\n                isMutableDefaults = value.mutableDefaults;\n            }\n        }\n        handlers = handlers.filter((handler)=>handler !== exports.defaultHandler);\n        if (handlers.length === 0) {\n            handlers.push(exports.defaultHandler);\n        }\n        return create({\n            options: mergeOptions(...optionsArray),\n            handlers,\n            mutableDefaults: Boolean(isMutableDefaults)\n        });\n    };\n    // Pagination\n    const paginateEach = async function*(url, options) {\n        // TODO: Remove this `@ts-expect-error` when upgrading to TypeScript 4.\n        // Error: Argument of type 'Merge<Options, PaginationOptions<T, R>> | undefined' is not assignable to parameter of type 'Options | undefined'.\n        // @ts-expect-error\n        let normalizedOptions = normalizeArguments(url, options, defaults.options);\n        normalizedOptions.resolveBodyOnly = false;\n        const pagination = normalizedOptions.pagination;\n        if (!is_1.default.object(pagination)) {\n            throw new TypeError(\"`options.pagination` must be implemented\");\n        }\n        const all = [];\n        let { countLimit } = pagination;\n        let numberOfRequests = 0;\n        while(numberOfRequests < pagination.requestLimit){\n            if (numberOfRequests !== 0) {\n                // eslint-disable-next-line no-await-in-loop\n                await delay(pagination.backoff);\n            }\n            // @ts-expect-error FIXME!\n            // TODO: Throw when result is not an instance of Response\n            // eslint-disable-next-line no-await-in-loop\n            const result = await got(undefined, undefined, normalizedOptions);\n            // eslint-disable-next-line no-await-in-loop\n            const parsed = await pagination.transform(result);\n            const current = [];\n            for (const item of parsed){\n                if (pagination.filter(item, all, current)) {\n                    if (!pagination.shouldContinue(item, all, current)) {\n                        return;\n                    }\n                    yield item;\n                    if (pagination.stackAllItems) {\n                        all.push(item);\n                    }\n                    current.push(item);\n                    if (--countLimit <= 0) {\n                        return;\n                    }\n                }\n            }\n            const optionsToMerge = pagination.paginate(result, all, current);\n            if (optionsToMerge === false) {\n                return;\n            }\n            if (optionsToMerge === result.request.options) {\n                normalizedOptions = result.request.options;\n            } else if (optionsToMerge !== undefined) {\n                normalizedOptions = normalizeArguments(undefined, optionsToMerge, normalizedOptions);\n            }\n            numberOfRequests++;\n        }\n    };\n    got.paginate = paginateEach;\n    got.paginate.all = async (url, options)=>{\n        const results = [];\n        for await (const item of paginateEach(url, options)){\n            results.push(item);\n        }\n        return results;\n    };\n    // For those who like very descriptive names\n    got.paginate.each = paginateEach;\n    // Stream API\n    got.stream = (url, options)=>got(url, {\n            ...options,\n            isStream: true\n        });\n    // Shortcuts\n    for (const method of aliases){\n        got[method] = (url, options)=>got(url, {\n                ...options,\n                method\n            });\n        got.stream[method] = (url, options)=>{\n            return got(url, {\n                ...options,\n                method,\n                isStream: true\n            });\n        };\n    }\n    Object.assign(got, errors);\n    Object.defineProperty(got, \"defaults\", {\n        value: defaults.mutableDefaults ? defaults : deep_freeze_1.default(defaults),\n        writable: defaults.mutableDefaults,\n        configurable: defaults.mutableDefaults,\n        enumerable: true\n    });\n    got.mergeOptions = mergeOptions;\n    return got;\n};\nexports[\"default\"] = create;\n__exportStar(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/types.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/create.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/index.js ***!
  \**************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst create_1 = __webpack_require__(/*! ./create */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/create.js\");\nconst defaults = {\n    options: {\n        method: \"GET\",\n        retry: {\n            limit: 2,\n            methods: [\n                \"GET\",\n                \"PUT\",\n                \"HEAD\",\n                \"DELETE\",\n                \"OPTIONS\",\n                \"TRACE\"\n            ],\n            statusCodes: [\n                408,\n                413,\n                429,\n                500,\n                502,\n                503,\n                504,\n                521,\n                522,\n                524\n            ],\n            errorCodes: [\n                \"ETIMEDOUT\",\n                \"ECONNRESET\",\n                \"EADDRINUSE\",\n                \"ECONNREFUSED\",\n                \"EPIPE\",\n                \"ENOTFOUND\",\n                \"ENETUNREACH\",\n                \"EAI_AGAIN\"\n            ],\n            maxRetryAfter: undefined,\n            calculateDelay: ({ computedValue })=>computedValue\n        },\n        timeout: {},\n        headers: {\n            \"user-agent\": \"got (https://github.com/sindresorhus/got)\"\n        },\n        hooks: {\n            init: [],\n            beforeRequest: [],\n            beforeRedirect: [],\n            beforeRetry: [],\n            beforeError: [],\n            afterResponse: []\n        },\n        cache: undefined,\n        dnsCache: undefined,\n        decompress: true,\n        throwHttpErrors: true,\n        followRedirect: true,\n        isStream: false,\n        responseType: \"text\",\n        resolveBodyOnly: false,\n        maxRedirects: 10,\n        prefixUrl: \"\",\n        methodRewriting: true,\n        ignoreInvalidCookies: false,\n        context: {},\n        // TODO: Set this to `true` when Got 12 gets released\n        http2: false,\n        allowGetBody: false,\n        https: undefined,\n        pagination: {\n            transform: (response)=>{\n                if (response.request.options.responseType === \"json\") {\n                    return response.body;\n                }\n                return JSON.parse(response.body);\n            },\n            paginate: (response)=>{\n                if (!Reflect.has(response.headers, \"link\")) {\n                    return false;\n                }\n                const items = response.headers.link.split(\",\");\n                let next;\n                for (const item of items){\n                    const parsed = item.split(\";\");\n                    if (parsed[1].includes(\"next\")) {\n                        next = parsed[0].trimStart().trim();\n                        next = next.slice(1, -1);\n                        break;\n                    }\n                }\n                if (next) {\n                    const options = {\n                        url: new url_1.URL(next)\n                    };\n                    return options;\n                }\n                return false;\n            },\n            filter: ()=>true,\n            shouldContinue: ()=>true,\n            countLimit: Infinity,\n            backoff: 0,\n            requestLimit: 10000,\n            stackAllItems: true\n        },\n        parseJson: (text)=>JSON.parse(text),\n        stringifyJson: (object)=>JSON.stringify(object),\n        cacheOptions: {}\n    },\n    handlers: [\n        create_1.defaultHandler\n    ],\n    mutableDefaults: false\n};\nconst got = create_1.default(defaults);\nexports[\"default\"] = got;\n// For CommonJS default export support\nmodule.exports = got;\nmodule.exports[\"default\"] = got;\nmodule.exports.__esModule = true; // Workaround for TS issue: https://github.com/sindresorhus/got/pull/1267\n__exportStar(__webpack_require__(/*! ./create */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/create.js\"), exports);\n__exportStar(__webpack_require__(/*! ./as-promise */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/as-promise/index.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/types.js":
/*!**************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/types.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZXhhbXBsZS1mdWxsLy4vbm9kZV9tb2R1bGVzL25vdGlvbi1jbGllbnQvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS90eXBlcy5qcz82OTI1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/utils/deep-freeze.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/utils/deep-freeze.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\nfunction deepFreeze(object) {\n    for (const value of Object.values(object)){\n        if (is_1.default.plainObject(value) || is_1.default.array(value)) {\n            deepFreeze(value);\n        }\n    }\n    return Object.freeze(object);\n}\nexports[\"default\"] = deepFreeze;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL3V0aWxzL2RlZXAtZnJlZXplLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLE9BQU9DLG1CQUFPQSxDQUFDLDZFQUFrQjtBQUN2QyxTQUFTQyxXQUFXQyxNQUFNO0lBQ3RCLEtBQUssTUFBTUosU0FBU0gsT0FBT1EsTUFBTSxDQUFDRCxRQUFTO1FBQ3ZDLElBQUlILEtBQUtLLE9BQU8sQ0FBQ0MsV0FBVyxDQUFDUCxVQUFVQyxLQUFLSyxPQUFPLENBQUNFLEtBQUssQ0FBQ1IsUUFBUTtZQUM5REcsV0FBV0g7UUFDZjtJQUNKO0lBQ0EsT0FBT0gsT0FBT1ksTUFBTSxDQUFDTDtBQUN6QjtBQUNBTCxrQkFBZSxHQUFHSSIsInNvdXJjZXMiOlsid2VicGFjazovL25vdGlvbi14LWV4YW1wbGUtZnVsbC8uL25vZGVfbW9kdWxlcy9ub3Rpb24tY2xpZW50L25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvdXRpbHMvZGVlcC1mcmVlemUuanM/ODRkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGlzXzEgPSByZXF1aXJlKFwiQHNpbmRyZXNvcmh1cy9pc1wiKTtcbmZ1bmN0aW9uIGRlZXBGcmVlemUob2JqZWN0KSB7XG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiBPYmplY3QudmFsdWVzKG9iamVjdCkpIHtcbiAgICAgICAgaWYgKGlzXzEuZGVmYXVsdC5wbGFpbk9iamVjdCh2YWx1ZSkgfHwgaXNfMS5kZWZhdWx0LmFycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgZGVlcEZyZWV6ZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUob2JqZWN0KTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGRlZXBGcmVlemU7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpc18xIiwicmVxdWlyZSIsImRlZXBGcmVlemUiLCJvYmplY3QiLCJ2YWx1ZXMiLCJkZWZhdWx0IiwicGxhaW5PYmplY3QiLCJhcnJheSIsImZyZWV6ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/utils/deep-freeze.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/got/dist/source/utils/deprecation-warning.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/got/dist/source/utils/deprecation-warning.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst alreadyWarned = new Set();\nexports[\"default\"] = (message)=>{\n    if (alreadyWarned.has(message)) {\n        return;\n    }\n    alreadyWarned.add(message);\n    // @ts-expect-error Missing types.\n    process.emitWarning(`Got: ${message}`, {\n        type: \"DeprecationWarning\"\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL3V0aWxzL2RlcHJlY2F0aW9uLXdhcm5pbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsZ0JBQWdCLElBQUlDO0FBQzFCSCxrQkFBZSxHQUFHLENBQUNLO0lBQ2YsSUFBSUgsY0FBY0ksR0FBRyxDQUFDRCxVQUFVO1FBQzVCO0lBQ0o7SUFDQUgsY0FBY0ssR0FBRyxDQUFDRjtJQUNsQixrQ0FBa0M7SUFDbENHLFFBQVFDLFdBQVcsQ0FBQyxDQUFDLEtBQUssRUFBRUosUUFBUSxDQUFDLEVBQUU7UUFDbkNLLE1BQU07SUFDVjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZXhhbXBsZS1mdWxsLy4vbm9kZV9tb2R1bGVzL25vdGlvbi1jbGllbnQvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS91dGlscy9kZXByZWNhdGlvbi13YXJuaW5nLmpzPzA5ODkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBhbHJlYWR5V2FybmVkID0gbmV3IFNldCgpO1xuZXhwb3J0cy5kZWZhdWx0ID0gKG1lc3NhZ2UpID0+IHtcbiAgICBpZiAoYWxyZWFkeVdhcm5lZC5oYXMobWVzc2FnZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhbHJlYWR5V2FybmVkLmFkZChtZXNzYWdlKTtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIE1pc3NpbmcgdHlwZXMuXG4gICAgcHJvY2Vzcy5lbWl0V2FybmluZyhgR290OiAke21lc3NhZ2V9YCwge1xuICAgICAgICB0eXBlOiAnRGVwcmVjYXRpb25XYXJuaW5nJ1xuICAgIH0pO1xufTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImFscmVhZHlXYXJuZWQiLCJTZXQiLCJkZWZhdWx0IiwibWVzc2FnZSIsImhhcyIsImFkZCIsInByb2Nlc3MiLCJlbWl0V2FybmluZyIsInR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/got/dist/source/utils/deprecation-warning.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/agent.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/http2-wrapper/source/agent.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst QuickLRU = __webpack_require__(/*! quick-lru */ \"(rsc)/./node_modules/quick-lru/index.js\");\nconst kCurrentStreamsCount = Symbol(\"currentStreamsCount\");\nconst kRequest = Symbol(\"request\");\nconst kOriginSet = Symbol(\"cachedOriginSet\");\nconst kGracefullyClosing = Symbol(\"gracefullyClosing\");\nconst nameKeys = [\n    // `http2.connect()` options\n    \"maxDeflateDynamicTableSize\",\n    \"maxSessionMemory\",\n    \"maxHeaderListPairs\",\n    \"maxOutstandingPings\",\n    \"maxReservedRemoteStreams\",\n    \"maxSendHeaderBlockLength\",\n    \"paddingStrategy\",\n    // `tls.connect()` options\n    \"localAddress\",\n    \"path\",\n    \"rejectUnauthorized\",\n    \"minDHSize\",\n    // `tls.createSecureContext()` options\n    \"ca\",\n    \"cert\",\n    \"clientCertEngine\",\n    \"ciphers\",\n    \"key\",\n    \"pfx\",\n    \"servername\",\n    \"minVersion\",\n    \"maxVersion\",\n    \"secureProtocol\",\n    \"crl\",\n    \"honorCipherOrder\",\n    \"ecdhCurve\",\n    \"dhparam\",\n    \"secureOptions\",\n    \"sessionIdContext\"\n];\nconst getSortedIndex = (array, value, compare)=>{\n    let low = 0;\n    let high = array.length;\n    while(low < high){\n        const mid = low + high >>> 1;\n        /* istanbul ignore next */ if (compare(array[mid], value)) {\n            // This never gets called because we use descending sort. Better to have this anyway.\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n};\nconst compareSessions = (a, b)=>{\n    return a.remoteSettings.maxConcurrentStreams > b.remoteSettings.maxConcurrentStreams;\n};\n// See https://tools.ietf.org/html/rfc8336\nconst closeCoveredSessions = (where, session)=>{\n    // Clients SHOULD NOT emit new requests on any connection whose Origin\n    // Set is a proper subset of another connection's Origin Set, and they\n    // SHOULD close it once all outstanding requests are satisfied.\n    for (const coveredSession of where){\n        if (// The set is a proper subset when its length is less than the other set.\n        coveredSession[kOriginSet].length < session[kOriginSet].length && // And the other set includes all elements of the subset.\n        coveredSession[kOriginSet].every((origin)=>session[kOriginSet].includes(origin)) && // Makes sure that the session can handle all requests from the covered session.\n        coveredSession[kCurrentStreamsCount] + session[kCurrentStreamsCount] <= session.remoteSettings.maxConcurrentStreams) {\n            // This allows pending requests to finish and prevents making new requests.\n            gracefullyClose(coveredSession);\n        }\n    }\n};\n// This is basically inverted `closeCoveredSessions(...)`.\nconst closeSessionIfCovered = (where, coveredSession)=>{\n    for (const session of where){\n        if (coveredSession[kOriginSet].length < session[kOriginSet].length && coveredSession[kOriginSet].every((origin)=>session[kOriginSet].includes(origin)) && coveredSession[kCurrentStreamsCount] + session[kCurrentStreamsCount] <= session.remoteSettings.maxConcurrentStreams) {\n            gracefullyClose(coveredSession);\n        }\n    }\n};\nconst getSessions = ({ agent, isFree })=>{\n    const result = {};\n    // eslint-disable-next-line guard-for-in\n    for(const normalizedOptions in agent.sessions){\n        const sessions = agent.sessions[normalizedOptions];\n        const filtered = sessions.filter((session)=>{\n            const result = session[Agent.kCurrentStreamsCount] < session.remoteSettings.maxConcurrentStreams;\n            return isFree ? result : !result;\n        });\n        if (filtered.length !== 0) {\n            result[normalizedOptions] = filtered;\n        }\n    }\n    return result;\n};\nconst gracefullyClose = (session)=>{\n    session[kGracefullyClosing] = true;\n    if (session[kCurrentStreamsCount] === 0) {\n        session.close();\n    }\n};\nclass Agent extends EventEmitter {\n    constructor({ timeout = 60000, maxSessions = Infinity, maxFreeSessions = 10, maxCachedTlsSessions = 100 } = {}){\n        super();\n        // A session is considered busy when its current streams count\n        // is equal to or greater than the `maxConcurrentStreams` value.\n        // A session is considered free when its current streams count\n        // is less than the `maxConcurrentStreams` value.\n        // SESSIONS[NORMALIZED_OPTIONS] = [];\n        this.sessions = {};\n        // The queue for creating new sessions. It looks like this:\n        // QUEUE[NORMALIZED_OPTIONS][NORMALIZED_ORIGIN] = ENTRY_FUNCTION\n        //\n        // The entry function has `listeners`, `completed` and `destroyed` properties.\n        // `listeners` is an array of objects containing `resolve` and `reject` functions.\n        // `completed` is a boolean. It's set to true after ENTRY_FUNCTION is executed.\n        // `destroyed` is a boolean. If it's set to true, the session will be destroyed if hasn't connected yet.\n        this.queue = {};\n        // Each session will use this timeout value.\n        this.timeout = timeout;\n        // Max sessions in total\n        this.maxSessions = maxSessions;\n        // Max free sessions in total\n        // TODO: decreasing `maxFreeSessions` should close some sessions\n        this.maxFreeSessions = maxFreeSessions;\n        this._freeSessionsCount = 0;\n        this._sessionsCount = 0;\n        // We don't support push streams by default.\n        this.settings = {\n            enablePush: false\n        };\n        // Reusing TLS sessions increases performance.\n        this.tlsSessionCache = new QuickLRU({\n            maxSize: maxCachedTlsSessions\n        });\n    }\n    static normalizeOrigin(url, servername) {\n        if (typeof url === \"string\") {\n            url = new URL(url);\n        }\n        if (servername && url.hostname !== servername) {\n            url.hostname = servername;\n        }\n        return url.origin;\n    }\n    normalizeOptions(options) {\n        let normalized = \"\";\n        if (options) {\n            for (const key of nameKeys){\n                if (options[key]) {\n                    normalized += `:${options[key]}`;\n                }\n            }\n        }\n        return normalized;\n    }\n    _tryToCreateNewSession(normalizedOptions, normalizedOrigin) {\n        if (!(normalizedOptions in this.queue) || !(normalizedOrigin in this.queue[normalizedOptions])) {\n            return;\n        }\n        const item = this.queue[normalizedOptions][normalizedOrigin];\n        // The entry function can be run only once.\n        // BUG: The session may be never created when:\n        // - the first condition is false AND\n        // - this function is never called with the same arguments in the future.\n        if (this._sessionsCount < this.maxSessions && !item.completed) {\n            item.completed = true;\n            item();\n        }\n    }\n    getSession(origin, options, listeners) {\n        return new Promise((resolve, reject)=>{\n            if (Array.isArray(listeners)) {\n                listeners = [\n                    ...listeners\n                ];\n                // Resolve the current promise ASAP, we're just moving the listeners.\n                // They will be executed at a different time.\n                resolve();\n            } else {\n                listeners = [\n                    {\n                        resolve,\n                        reject\n                    }\n                ];\n            }\n            const normalizedOptions = this.normalizeOptions(options);\n            const normalizedOrigin = Agent.normalizeOrigin(origin, options && options.servername);\n            if (normalizedOrigin === undefined) {\n                for (const { reject } of listeners){\n                    reject(new TypeError(\"The `origin` argument needs to be a string or an URL object\"));\n                }\n                return;\n            }\n            if (normalizedOptions in this.sessions) {\n                const sessions = this.sessions[normalizedOptions];\n                let maxConcurrentStreams = -1;\n                let currentStreamsCount = -1;\n                let optimalSession;\n                // We could just do this.sessions[normalizedOptions].find(...) but that isn't optimal.\n                // Additionally, we are looking for session which has biggest current pending streams count.\n                for (const session of sessions){\n                    const sessionMaxConcurrentStreams = session.remoteSettings.maxConcurrentStreams;\n                    if (sessionMaxConcurrentStreams < maxConcurrentStreams) {\n                        break;\n                    }\n                    if (session[kOriginSet].includes(normalizedOrigin)) {\n                        const sessionCurrentStreamsCount = session[kCurrentStreamsCount];\n                        if (sessionCurrentStreamsCount >= sessionMaxConcurrentStreams || session[kGracefullyClosing] || // Unfortunately the `close` event isn't called immediately,\n                        // so `session.destroyed` is `true`, but `session.closed` is `false`.\n                        session.destroyed) {\n                            continue;\n                        }\n                        // We only need set this once.\n                        if (!optimalSession) {\n                            maxConcurrentStreams = sessionMaxConcurrentStreams;\n                        }\n                        // We're looking for the session which has biggest current pending stream count,\n                        // in order to minimalize the amount of active sessions.\n                        if (sessionCurrentStreamsCount > currentStreamsCount) {\n                            optimalSession = session;\n                            currentStreamsCount = sessionCurrentStreamsCount;\n                        }\n                    }\n                }\n                if (optimalSession) {\n                    /* istanbul ignore next: safety check */ if (listeners.length !== 1) {\n                        for (const { reject } of listeners){\n                            const error = new Error(`Expected the length of listeners to be 1, got ${listeners.length}.\\n` + \"Please report this to https://github.com/szmarczak/http2-wrapper/\");\n                            reject(error);\n                        }\n                        return;\n                    }\n                    listeners[0].resolve(optimalSession);\n                    return;\n                }\n            }\n            if (normalizedOptions in this.queue) {\n                if (normalizedOrigin in this.queue[normalizedOptions]) {\n                    // There's already an item in the queue, just attach ourselves to it.\n                    this.queue[normalizedOptions][normalizedOrigin].listeners.push(...listeners);\n                    // This shouldn't be executed here.\n                    // See the comment inside _tryToCreateNewSession.\n                    this._tryToCreateNewSession(normalizedOptions, normalizedOrigin);\n                    return;\n                }\n            } else {\n                this.queue[normalizedOptions] = {};\n            }\n            // The entry must be removed from the queue IMMEDIATELY when:\n            // 1. the session connects successfully,\n            // 2. an error occurs.\n            const removeFromQueue = ()=>{\n                // Our entry can be replaced. We cannot remove the new one.\n                if (normalizedOptions in this.queue && this.queue[normalizedOptions][normalizedOrigin] === entry) {\n                    delete this.queue[normalizedOptions][normalizedOrigin];\n                    if (Object.keys(this.queue[normalizedOptions]).length === 0) {\n                        delete this.queue[normalizedOptions];\n                    }\n                }\n            };\n            // The main logic is here\n            const entry = ()=>{\n                const name = `${normalizedOrigin}:${normalizedOptions}`;\n                let receivedSettings = false;\n                try {\n                    const session = http2.connect(origin, {\n                        createConnection: this.createConnection,\n                        settings: this.settings,\n                        session: this.tlsSessionCache.get(name),\n                        ...options\n                    });\n                    session[kCurrentStreamsCount] = 0;\n                    session[kGracefullyClosing] = false;\n                    const isFree = ()=>session[kCurrentStreamsCount] < session.remoteSettings.maxConcurrentStreams;\n                    let wasFree = true;\n                    session.socket.once(\"session\", (tlsSession)=>{\n                        this.tlsSessionCache.set(name, tlsSession);\n                    });\n                    session.once(\"error\", (error)=>{\n                        // Listeners are empty when the session successfully connected.\n                        for (const { reject } of listeners){\n                            reject(error);\n                        }\n                        // The connection got broken, purge the cache.\n                        this.tlsSessionCache.delete(name);\n                    });\n                    session.setTimeout(this.timeout, ()=>{\n                        // Terminates all streams owned by this session.\n                        // TODO: Maybe the streams should have a \"Session timed out\" error?\n                        session.destroy();\n                    });\n                    session.once(\"close\", ()=>{\n                        if (receivedSettings) {\n                            // 1. If it wasn't free then no need to decrease because\n                            //    it has been decreased already in session.request().\n                            // 2. `stream.once('close')` won't increment the count\n                            //    because the session is already closed.\n                            if (wasFree) {\n                                this._freeSessionsCount--;\n                            }\n                            this._sessionsCount--;\n                            // This cannot be moved to the stream logic,\n                            // because there may be a session that hadn't made a single request.\n                            const where = this.sessions[normalizedOptions];\n                            where.splice(where.indexOf(session), 1);\n                            if (where.length === 0) {\n                                delete this.sessions[normalizedOptions];\n                            }\n                        } else {\n                            // Broken connection\n                            const error = new Error(\"Session closed without receiving a SETTINGS frame\");\n                            error.code = \"HTTP2WRAPPER_NOSETTINGS\";\n                            for (const { reject } of listeners){\n                                reject(error);\n                            }\n                            removeFromQueue();\n                        }\n                        // There may be another session awaiting.\n                        this._tryToCreateNewSession(normalizedOptions, normalizedOrigin);\n                    });\n                    // Iterates over the queue and processes listeners.\n                    const processListeners = ()=>{\n                        if (!(normalizedOptions in this.queue) || !isFree()) {\n                            return;\n                        }\n                        for (const origin of session[kOriginSet]){\n                            if (origin in this.queue[normalizedOptions]) {\n                                const { listeners } = this.queue[normalizedOptions][origin];\n                                // Prevents session overloading.\n                                while(listeners.length !== 0 && isFree()){\n                                    // We assume `resolve(...)` calls `request(...)` *directly*,\n                                    // otherwise the session will get overloaded.\n                                    listeners.shift().resolve(session);\n                                }\n                                const where = this.queue[normalizedOptions];\n                                if (where[origin].listeners.length === 0) {\n                                    delete where[origin];\n                                    if (Object.keys(where).length === 0) {\n                                        delete this.queue[normalizedOptions];\n                                        break;\n                                    }\n                                }\n                                // We're no longer free, no point in continuing.\n                                if (!isFree()) {\n                                    break;\n                                }\n                            }\n                        }\n                    };\n                    // The Origin Set cannot shrink. No need to check if it suddenly became covered by another one.\n                    session.on(\"origin\", ()=>{\n                        session[kOriginSet] = session.originSet;\n                        if (!isFree()) {\n                            // The session is full.\n                            return;\n                        }\n                        processListeners();\n                        // Close covered sessions (if possible).\n                        closeCoveredSessions(this.sessions[normalizedOptions], session);\n                    });\n                    session.once(\"remoteSettings\", ()=>{\n                        // Fix Node.js bug preventing the process from exiting\n                        session.ref();\n                        session.unref();\n                        this._sessionsCount++;\n                        // The Agent could have been destroyed already.\n                        if (entry.destroyed) {\n                            const error = new Error(\"Agent has been destroyed\");\n                            for (const listener of listeners){\n                                listener.reject(error);\n                            }\n                            session.destroy();\n                            return;\n                        }\n                        session[kOriginSet] = session.originSet;\n                        {\n                            const where = this.sessions;\n                            if (normalizedOptions in where) {\n                                const sessions = where[normalizedOptions];\n                                sessions.splice(getSortedIndex(sessions, session, compareSessions), 0, session);\n                            } else {\n                                where[normalizedOptions] = [\n                                    session\n                                ];\n                            }\n                        }\n                        this._freeSessionsCount += 1;\n                        receivedSettings = true;\n                        this.emit(\"session\", session);\n                        processListeners();\n                        removeFromQueue();\n                        // TODO: Close last recently used (or least used?) session\n                        if (session[kCurrentStreamsCount] === 0 && this._freeSessionsCount > this.maxFreeSessions) {\n                            session.close();\n                        }\n                        // Check if we haven't managed to execute all listeners.\n                        if (listeners.length !== 0) {\n                            // Request for a new session with predefined listeners.\n                            this.getSession(normalizedOrigin, options, listeners);\n                            listeners.length = 0;\n                        }\n                        // `session.remoteSettings.maxConcurrentStreams` might get increased\n                        session.on(\"remoteSettings\", ()=>{\n                            processListeners();\n                            // In case the Origin Set changes\n                            closeCoveredSessions(this.sessions[normalizedOptions], session);\n                        });\n                    });\n                    // Shim `session.request()` in order to catch all streams\n                    session[kRequest] = session.request;\n                    session.request = (headers, streamOptions)=>{\n                        if (session[kGracefullyClosing]) {\n                            throw new Error(\"The session is gracefully closing. No new streams are allowed.\");\n                        }\n                        const stream = session[kRequest](headers, streamOptions);\n                        // The process won't exit until the session is closed or all requests are gone.\n                        session.ref();\n                        ++session[kCurrentStreamsCount];\n                        if (session[kCurrentStreamsCount] === session.remoteSettings.maxConcurrentStreams) {\n                            this._freeSessionsCount--;\n                        }\n                        stream.once(\"close\", ()=>{\n                            wasFree = isFree();\n                            --session[kCurrentStreamsCount];\n                            if (!session.destroyed && !session.closed) {\n                                closeSessionIfCovered(this.sessions[normalizedOptions], session);\n                                if (isFree() && !session.closed) {\n                                    if (!wasFree) {\n                                        this._freeSessionsCount++;\n                                        wasFree = true;\n                                    }\n                                    const isEmpty = session[kCurrentStreamsCount] === 0;\n                                    if (isEmpty) {\n                                        session.unref();\n                                    }\n                                    if (isEmpty && (this._freeSessionsCount > this.maxFreeSessions || session[kGracefullyClosing])) {\n                                        session.close();\n                                    } else {\n                                        closeCoveredSessions(this.sessions[normalizedOptions], session);\n                                        processListeners();\n                                    }\n                                }\n                            }\n                        });\n                        return stream;\n                    };\n                } catch (error) {\n                    for (const listener of listeners){\n                        listener.reject(error);\n                    }\n                    removeFromQueue();\n                }\n            };\n            entry.listeners = listeners;\n            entry.completed = false;\n            entry.destroyed = false;\n            this.queue[normalizedOptions][normalizedOrigin] = entry;\n            this._tryToCreateNewSession(normalizedOptions, normalizedOrigin);\n        });\n    }\n    request(origin, options, headers, streamOptions) {\n        return new Promise((resolve, reject)=>{\n            this.getSession(origin, options, [\n                {\n                    reject,\n                    resolve: (session)=>{\n                        try {\n                            resolve(session.request(headers, streamOptions));\n                        } catch (error) {\n                            reject(error);\n                        }\n                    }\n                }\n            ]);\n        });\n    }\n    createConnection(origin, options) {\n        return Agent.connect(origin, options);\n    }\n    static connect(origin, options) {\n        options.ALPNProtocols = [\n            \"h2\"\n        ];\n        const port = origin.port || 443;\n        const host = origin.hostname || origin.host;\n        if (typeof options.servername === \"undefined\") {\n            options.servername = host;\n        }\n        return tls.connect(port, host, options);\n    }\n    closeFreeSessions() {\n        for (const sessions of Object.values(this.sessions)){\n            for (const session of sessions){\n                if (session[kCurrentStreamsCount] === 0) {\n                    session.close();\n                }\n            }\n        }\n    }\n    destroy(reason) {\n        for (const sessions of Object.values(this.sessions)){\n            for (const session of sessions){\n                session.destroy(reason);\n            }\n        }\n        for (const entriesOfAuthority of Object.values(this.queue)){\n            for (const entry of Object.values(entriesOfAuthority)){\n                entry.destroyed = true;\n            }\n        }\n        // New requests should NOT attach to destroyed sessions\n        this.queue = {};\n    }\n    get freeSessions() {\n        return getSessions({\n            agent: this,\n            isFree: true\n        });\n    }\n    get busySessions() {\n        return getSessions({\n            agent: this,\n            isFree: false\n        });\n    }\n}\nAgent.kCurrentStreamsCount = kCurrentStreamsCount;\nAgent.kGracefullyClosing = kGracefullyClosing;\nmodule.exports = {\n    Agent,\n    globalAgent: new Agent()\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/agent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/auto.js":
/*!******************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/http2-wrapper/source/auto.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst resolveALPN = __webpack_require__(/*! resolve-alpn */ \"(rsc)/./node_modules/resolve-alpn/index.js\");\nconst QuickLRU = __webpack_require__(/*! quick-lru */ \"(rsc)/./node_modules/quick-lru/index.js\");\nconst Http2ClientRequest = __webpack_require__(/*! ./client-request */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/client-request.js\");\nconst calculateServerName = __webpack_require__(/*! ./utils/calculate-server-name */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/calculate-server-name.js\");\nconst urlToOptions = __webpack_require__(/*! ./utils/url-to-options */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/url-to-options.js\");\nconst cache = new QuickLRU({\n    maxSize: 100\n});\nconst queue = new Map();\nconst installSocket = (agent, socket, options)=>{\n    socket._httpMessage = {\n        shouldKeepAlive: true\n    };\n    const onFree = ()=>{\n        agent.emit(\"free\", socket, options);\n    };\n    socket.on(\"free\", onFree);\n    const onClose = ()=>{\n        agent.removeSocket(socket, options);\n    };\n    socket.on(\"close\", onClose);\n    const onRemove = ()=>{\n        agent.removeSocket(socket, options);\n        socket.off(\"close\", onClose);\n        socket.off(\"free\", onFree);\n        socket.off(\"agentRemove\", onRemove);\n    };\n    socket.on(\"agentRemove\", onRemove);\n    agent.emit(\"free\", socket, options);\n};\nconst resolveProtocol = async (options)=>{\n    const name = `${options.host}:${options.port}:${options.ALPNProtocols.sort()}`;\n    if (!cache.has(name)) {\n        if (queue.has(name)) {\n            const result = await queue.get(name);\n            return result.alpnProtocol;\n        }\n        const { path, agent } = options;\n        options.path = options.socketPath;\n        const resultPromise = resolveALPN(options);\n        queue.set(name, resultPromise);\n        try {\n            const { socket, alpnProtocol } = await resultPromise;\n            cache.set(name, alpnProtocol);\n            options.path = path;\n            if (alpnProtocol === \"h2\") {\n                // https://github.com/nodejs/node/issues/33343\n                socket.destroy();\n            } else {\n                const { globalAgent } = https;\n                const defaultCreateConnection = https.Agent.prototype.createConnection;\n                if (agent) {\n                    if (agent.createConnection === defaultCreateConnection) {\n                        installSocket(agent, socket, options);\n                    } else {\n                        socket.destroy();\n                    }\n                } else if (globalAgent.createConnection === defaultCreateConnection) {\n                    installSocket(globalAgent, socket, options);\n                } else {\n                    socket.destroy();\n                }\n            }\n            queue.delete(name);\n            return alpnProtocol;\n        } catch (error) {\n            queue.delete(name);\n            throw error;\n        }\n    }\n    return cache.get(name);\n};\nmodule.exports = async (input, options, callback)=>{\n    if (typeof input === \"string\" || input instanceof URL) {\n        input = urlToOptions(new URL(input));\n    }\n    if (typeof options === \"function\") {\n        callback = options;\n        options = undefined;\n    }\n    options = {\n        ALPNProtocols: [\n            \"h2\",\n            \"http/1.1\"\n        ],\n        ...input,\n        ...options,\n        resolveSocket: true\n    };\n    if (!Array.isArray(options.ALPNProtocols) || options.ALPNProtocols.length === 0) {\n        throw new Error(\"The `ALPNProtocols` option must be an Array with at least one entry\");\n    }\n    options.protocol = options.protocol || \"https:\";\n    const isHttps = options.protocol === \"https:\";\n    options.host = options.hostname || options.host || \"localhost\";\n    options.session = options.tlsSession;\n    options.servername = options.servername || calculateServerName(options);\n    options.port = options.port || (isHttps ? 443 : 80);\n    options._defaultAgent = isHttps ? https.globalAgent : http.globalAgent;\n    const agents = options.agent;\n    if (agents) {\n        if (agents.addRequest) {\n            throw new Error(\"The `options.agent` object can contain only `http`, `https` or `http2` properties\");\n        }\n        options.agent = agents[isHttps ? \"https\" : \"http\"];\n    }\n    if (isHttps) {\n        const protocol = await resolveProtocol(options);\n        if (protocol === \"h2\") {\n            if (agents) {\n                options.agent = agents.http2;\n            }\n            return new Http2ClientRequest(options, callback);\n        }\n    }\n    return http.request(options, callback);\n};\nmodule.exports.protocolCache = cache;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/auto.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/client-request.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/http2-wrapper/source/client-request.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst { Writable } = __webpack_require__(/*! stream */ \"stream\");\nconst { Agent, globalAgent } = __webpack_require__(/*! ./agent */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/agent.js\");\nconst IncomingMessage = __webpack_require__(/*! ./incoming-message */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/incoming-message.js\");\nconst urlToOptions = __webpack_require__(/*! ./utils/url-to-options */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/url-to-options.js\");\nconst proxyEvents = __webpack_require__(/*! ./utils/proxy-events */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/proxy-events.js\");\nconst isRequestPseudoHeader = __webpack_require__(/*! ./utils/is-request-pseudo-header */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/is-request-pseudo-header.js\");\nconst { ERR_INVALID_ARG_TYPE, ERR_INVALID_PROTOCOL, ERR_HTTP_HEADERS_SENT, ERR_INVALID_HTTP_TOKEN, ERR_HTTP_INVALID_HEADER_VALUE, ERR_INVALID_CHAR } = __webpack_require__(/*! ./utils/errors */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/errors.js\");\nconst { HTTP2_HEADER_STATUS, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_METHOD_CONNECT } = http2.constants;\nconst kHeaders = Symbol(\"headers\");\nconst kOrigin = Symbol(\"origin\");\nconst kSession = Symbol(\"session\");\nconst kOptions = Symbol(\"options\");\nconst kFlushedHeaders = Symbol(\"flushedHeaders\");\nconst kJobs = Symbol(\"jobs\");\nconst isValidHttpToken = /^[\\^`\\-\\w!#$%&*+.|~]+$/;\nconst isInvalidHeaderValue = /[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/;\nclass ClientRequest extends Writable {\n    constructor(input, options, callback){\n        super({\n            autoDestroy: false\n        });\n        const hasInput = typeof input === \"string\" || input instanceof URL;\n        if (hasInput) {\n            input = urlToOptions(input instanceof URL ? input : new URL(input));\n        }\n        if (typeof options === \"function\" || options === undefined) {\n            // (options, callback)\n            callback = options;\n            options = hasInput ? input : {\n                ...input\n            };\n        } else {\n            // (input, options, callback)\n            options = {\n                ...input,\n                ...options\n            };\n        }\n        if (options.h2session) {\n            this[kSession] = options.h2session;\n        } else if (options.agent === false) {\n            this.agent = new Agent({\n                maxFreeSessions: 0\n            });\n        } else if (typeof options.agent === \"undefined\" || options.agent === null) {\n            if (typeof options.createConnection === \"function\") {\n                // This is a workaround - we don't have to create the session on our own.\n                this.agent = new Agent({\n                    maxFreeSessions: 0\n                });\n                this.agent.createConnection = options.createConnection;\n            } else {\n                this.agent = globalAgent;\n            }\n        } else if (typeof options.agent.request === \"function\") {\n            this.agent = options.agent;\n        } else {\n            throw new ERR_INVALID_ARG_TYPE(\"options.agent\", [\n                \"Agent-like Object\",\n                \"undefined\",\n                \"false\"\n            ], options.agent);\n        }\n        if (options.protocol && options.protocol !== \"https:\") {\n            throw new ERR_INVALID_PROTOCOL(options.protocol, \"https:\");\n        }\n        const port = options.port || options.defaultPort || this.agent && this.agent.defaultPort || 443;\n        const host = options.hostname || options.host || \"localhost\";\n        // Don't enforce the origin via options. It may be changed in an Agent.\n        delete options.hostname;\n        delete options.host;\n        delete options.port;\n        const { timeout } = options;\n        options.timeout = undefined;\n        this[kHeaders] = Object.create(null);\n        this[kJobs] = [];\n        this.socket = null;\n        this.connection = null;\n        this.method = options.method || \"GET\";\n        this.path = options.path;\n        this.res = null;\n        this.aborted = false;\n        this.reusedSocket = false;\n        if (options.headers) {\n            for (const [header, value] of Object.entries(options.headers)){\n                this.setHeader(header, value);\n            }\n        }\n        if (options.auth && !(\"authorization\" in this[kHeaders])) {\n            this[kHeaders].authorization = \"Basic \" + Buffer.from(options.auth).toString(\"base64\");\n        }\n        options.session = options.tlsSession;\n        options.path = options.socketPath;\n        this[kOptions] = options;\n        // Clients that generate HTTP/2 requests directly SHOULD use the :authority pseudo-header field instead of the Host header field.\n        if (port === 443) {\n            this[kOrigin] = `https://${host}`;\n            if (!(\":authority\" in this[kHeaders])) {\n                this[kHeaders][\":authority\"] = host;\n            }\n        } else {\n            this[kOrigin] = `https://${host}:${port}`;\n            if (!(\":authority\" in this[kHeaders])) {\n                this[kHeaders][\":authority\"] = `${host}:${port}`;\n            }\n        }\n        if (timeout) {\n            this.setTimeout(timeout);\n        }\n        if (callback) {\n            this.once(\"response\", callback);\n        }\n        this[kFlushedHeaders] = false;\n    }\n    get method() {\n        return this[kHeaders][HTTP2_HEADER_METHOD];\n    }\n    set method(value) {\n        if (value) {\n            this[kHeaders][HTTP2_HEADER_METHOD] = value.toUpperCase();\n        }\n    }\n    get path() {\n        return this[kHeaders][HTTP2_HEADER_PATH];\n    }\n    set path(value) {\n        if (value) {\n            this[kHeaders][HTTP2_HEADER_PATH] = value;\n        }\n    }\n    get _mustNotHaveABody() {\n        return this.method === \"GET\" || this.method === \"HEAD\" || this.method === \"DELETE\";\n    }\n    _write(chunk, encoding, callback) {\n        // https://github.com/nodejs/node/blob/654df09ae0c5e17d1b52a900a545f0664d8c7627/lib/internal/http2/util.js#L148-L156\n        if (this._mustNotHaveABody) {\n            callback(new Error(\"The GET, HEAD and DELETE methods must NOT have a body\"));\n            /* istanbul ignore next: Node.js 12 throws directly */ return;\n        }\n        this.flushHeaders();\n        const callWrite = ()=>this._request.write(chunk, encoding, callback);\n        if (this._request) {\n            callWrite();\n        } else {\n            this[kJobs].push(callWrite);\n        }\n    }\n    _final(callback) {\n        if (this.destroyed) {\n            return;\n        }\n        this.flushHeaders();\n        const callEnd = ()=>{\n            // For GET, HEAD and DELETE\n            if (this._mustNotHaveABody) {\n                callback();\n                return;\n            }\n            this._request.end(callback);\n        };\n        if (this._request) {\n            callEnd();\n        } else {\n            this[kJobs].push(callEnd);\n        }\n    }\n    abort() {\n        if (this.res && this.res.complete) {\n            return;\n        }\n        if (!this.aborted) {\n            process.nextTick(()=>this.emit(\"abort\"));\n        }\n        this.aborted = true;\n        this.destroy();\n    }\n    _destroy(error, callback) {\n        if (this.res) {\n            this.res._dump();\n        }\n        if (this._request) {\n            this._request.destroy();\n        }\n        callback(error);\n    }\n    async flushHeaders() {\n        if (this[kFlushedHeaders] || this.destroyed) {\n            return;\n        }\n        this[kFlushedHeaders] = true;\n        const isConnectMethod = this.method === HTTP2_METHOD_CONNECT;\n        // The real magic is here\n        const onStream = (stream)=>{\n            this._request = stream;\n            if (this.destroyed) {\n                stream.destroy();\n                return;\n            }\n            // Forwards `timeout`, `continue`, `close` and `error` events to this instance.\n            if (!isConnectMethod) {\n                proxyEvents(stream, this, [\n                    \"timeout\",\n                    \"continue\",\n                    \"close\",\n                    \"error\"\n                ]);\n            }\n            // Wait for the `finish` event. We don't want to emit the `response` event\n            // before `request.end()` is called.\n            const waitForEnd = (fn)=>{\n                return (...args)=>{\n                    if (!this.writable && !this.destroyed) {\n                        fn(...args);\n                    } else {\n                        this.once(\"finish\", ()=>{\n                            fn(...args);\n                        });\n                    }\n                };\n            };\n            // This event tells we are ready to listen for the data.\n            stream.once(\"response\", waitForEnd((headers, flags, rawHeaders)=>{\n                // If we were to emit raw request stream, it would be as fast as the native approach.\n                // Note that wrapping the raw stream in a Proxy instance won't improve the performance (already tested it).\n                const response = new IncomingMessage(this.socket, stream.readableHighWaterMark);\n                this.res = response;\n                response.req = this;\n                response.statusCode = headers[HTTP2_HEADER_STATUS];\n                response.headers = headers;\n                response.rawHeaders = rawHeaders;\n                response.once(\"end\", ()=>{\n                    if (this.aborted) {\n                        response.aborted = true;\n                        response.emit(\"aborted\");\n                    } else {\n                        response.complete = true;\n                        // Has no effect, just be consistent with the Node.js behavior\n                        response.socket = null;\n                        response.connection = null;\n                    }\n                });\n                if (isConnectMethod) {\n                    response.upgrade = true;\n                    // The HTTP1 API says the socket is detached here,\n                    // but we can't do that so we pass the original HTTP2 request.\n                    if (this.emit(\"connect\", response, stream, Buffer.alloc(0))) {\n                        this.emit(\"close\");\n                    } else {\n                        // No listeners attached, destroy the original request.\n                        stream.destroy();\n                    }\n                } else {\n                    // Forwards data\n                    stream.on(\"data\", (chunk)=>{\n                        if (!response._dumped && !response.push(chunk)) {\n                            stream.pause();\n                        }\n                    });\n                    stream.once(\"end\", ()=>{\n                        response.push(null);\n                    });\n                    if (!this.emit(\"response\", response)) {\n                        // No listeners attached, dump the response.\n                        response._dump();\n                    }\n                }\n            }));\n            // Emits `information` event\n            stream.once(\"headers\", waitForEnd((headers)=>this.emit(\"information\", {\n                    statusCode: headers[HTTP2_HEADER_STATUS]\n                })));\n            stream.once(\"trailers\", waitForEnd((trailers, flags, rawTrailers)=>{\n                const { res } = this;\n                // Assigns trailers to the response object.\n                res.trailers = trailers;\n                res.rawTrailers = rawTrailers;\n            }));\n            const { socket } = stream.session;\n            this.socket = socket;\n            this.connection = socket;\n            for (const job of this[kJobs]){\n                job();\n            }\n            this.emit(\"socket\", this.socket);\n        };\n        // Makes a HTTP2 request\n        if (this[kSession]) {\n            try {\n                onStream(this[kSession].request(this[kHeaders]));\n            } catch (error) {\n                this.emit(\"error\", error);\n            }\n        } else {\n            this.reusedSocket = true;\n            try {\n                onStream(await this.agent.request(this[kOrigin], this[kOptions], this[kHeaders]));\n            } catch (error) {\n                this.emit(\"error\", error);\n            }\n        }\n    }\n    getHeader(name) {\n        if (typeof name !== \"string\") {\n            throw new ERR_INVALID_ARG_TYPE(\"name\", \"string\", name);\n        }\n        return this[kHeaders][name.toLowerCase()];\n    }\n    get headersSent() {\n        return this[kFlushedHeaders];\n    }\n    removeHeader(name) {\n        if (typeof name !== \"string\") {\n            throw new ERR_INVALID_ARG_TYPE(\"name\", \"string\", name);\n        }\n        if (this.headersSent) {\n            throw new ERR_HTTP_HEADERS_SENT(\"remove\");\n        }\n        delete this[kHeaders][name.toLowerCase()];\n    }\n    setHeader(name, value) {\n        if (this.headersSent) {\n            throw new ERR_HTTP_HEADERS_SENT(\"set\");\n        }\n        if (typeof name !== \"string\" || !isValidHttpToken.test(name) && !isRequestPseudoHeader(name)) {\n            throw new ERR_INVALID_HTTP_TOKEN(\"Header name\", name);\n        }\n        if (typeof value === \"undefined\") {\n            throw new ERR_HTTP_INVALID_HEADER_VALUE(value, name);\n        }\n        if (isInvalidHeaderValue.test(value)) {\n            throw new ERR_INVALID_CHAR(\"header content\", name);\n        }\n        this[kHeaders][name.toLowerCase()] = value;\n    }\n    setNoDelay() {\n    // HTTP2 sockets cannot be malformed, do nothing.\n    }\n    setSocketKeepAlive() {\n    // HTTP2 sockets cannot be malformed, do nothing.\n    }\n    setTimeout(ms, callback) {\n        const applyTimeout = ()=>this._request.setTimeout(ms, callback);\n        if (this._request) {\n            applyTimeout();\n        } else {\n            this[kJobs].push(applyTimeout);\n        }\n        return this;\n    }\n    get maxHeadersCount() {\n        if (!this.destroyed && this._request) {\n            return this._request.session.localSettings.maxHeaderListSize;\n        }\n        return undefined;\n    }\n    set maxHeadersCount(_value) {\n    // Updating HTTP2 settings would affect all requests, do nothing.\n    }\n}\nmodule.exports = ClientRequest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/client-request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/incoming-message.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/http2-wrapper/source/incoming-message.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { Readable } = __webpack_require__(/*! stream */ \"stream\");\nclass IncomingMessage extends Readable {\n    constructor(socket, highWaterMark){\n        super({\n            highWaterMark,\n            autoDestroy: false\n        });\n        this.statusCode = null;\n        this.statusMessage = \"\";\n        this.httpVersion = \"2.0\";\n        this.httpVersionMajor = 2;\n        this.httpVersionMinor = 0;\n        this.headers = {};\n        this.trailers = {};\n        this.req = null;\n        this.aborted = false;\n        this.complete = false;\n        this.upgrade = null;\n        this.rawHeaders = [];\n        this.rawTrailers = [];\n        this.socket = socket;\n        this.connection = socket;\n        this._dumped = false;\n    }\n    _destroy(error) {\n        this.req._request.destroy(error);\n    }\n    setTimeout(ms, callback) {\n        this.req.setTimeout(ms, callback);\n        return this;\n    }\n    _dump() {\n        if (!this._dumped) {\n            this._dumped = true;\n            this.removeAllListeners(\"data\");\n            this.resume();\n        }\n    }\n    _read() {\n        if (this.req) {\n            this.req._request.resume();\n        }\n    }\n}\nmodule.exports = IncomingMessage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvaW5jb21pbmctbWVzc2FnZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU0sRUFBQ0EsUUFBUSxFQUFDLEdBQUdDLG1CQUFPQSxDQUFDO0FBRTNCLE1BQU1DLHdCQUF3QkY7SUFDN0JHLFlBQVlDLE1BQU0sRUFBRUMsYUFBYSxDQUFFO1FBQ2xDLEtBQUssQ0FBQztZQUNMQTtZQUNBQyxhQUFhO1FBQ2Q7UUFFQSxJQUFJLENBQUNDLFVBQVUsR0FBRztRQUNsQixJQUFJLENBQUNDLGFBQWEsR0FBRztRQUNyQixJQUFJLENBQUNDLFdBQVcsR0FBRztRQUNuQixJQUFJLENBQUNDLGdCQUFnQixHQUFHO1FBQ3hCLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUc7UUFDeEIsSUFBSSxDQUFDQyxPQUFPLEdBQUcsQ0FBQztRQUNoQixJQUFJLENBQUNDLFFBQVEsR0FBRyxDQUFDO1FBQ2pCLElBQUksQ0FBQ0MsR0FBRyxHQUFHO1FBRVgsSUFBSSxDQUFDQyxPQUFPLEdBQUc7UUFDZixJQUFJLENBQUNDLFFBQVEsR0FBRztRQUNoQixJQUFJLENBQUNDLE9BQU8sR0FBRztRQUVmLElBQUksQ0FBQ0MsVUFBVSxHQUFHLEVBQUU7UUFDcEIsSUFBSSxDQUFDQyxXQUFXLEdBQUcsRUFBRTtRQUVyQixJQUFJLENBQUNmLE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNnQixVQUFVLEdBQUdoQjtRQUVsQixJQUFJLENBQUNpQixPQUFPLEdBQUc7SUFDaEI7SUFFQUMsU0FBU0MsS0FBSyxFQUFFO1FBQ2YsSUFBSSxDQUFDVCxHQUFHLENBQUNVLFFBQVEsQ0FBQ0MsT0FBTyxDQUFDRjtJQUMzQjtJQUVBRyxXQUFXQyxFQUFFLEVBQUVDLFFBQVEsRUFBRTtRQUN4QixJQUFJLENBQUNkLEdBQUcsQ0FBQ1ksVUFBVSxDQUFDQyxJQUFJQztRQUN4QixPQUFPLElBQUk7SUFDWjtJQUVBQyxRQUFRO1FBQ1AsSUFBSSxDQUFDLElBQUksQ0FBQ1IsT0FBTyxFQUFFO1lBQ2xCLElBQUksQ0FBQ0EsT0FBTyxHQUFHO1lBRWYsSUFBSSxDQUFDUyxrQkFBa0IsQ0FBQztZQUN4QixJQUFJLENBQUNDLE1BQU07UUFDWjtJQUNEO0lBRUFDLFFBQVE7UUFDUCxJQUFJLElBQUksQ0FBQ2xCLEdBQUcsRUFBRTtZQUNiLElBQUksQ0FBQ0EsR0FBRyxDQUFDVSxRQUFRLENBQUNPLE1BQU07UUFDekI7SUFDRDtBQUNEO0FBRUFFLE9BQU9DLE9BQU8sR0FBR2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZXhhbXBsZS1mdWxsLy4vbm9kZV9tb2R1bGVzL25vdGlvbi1jbGllbnQvbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL2luY29taW5nLW1lc3NhZ2UuanM/ZTdjZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCB7UmVhZGFibGV9ID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5cbmNsYXNzIEluY29taW5nTWVzc2FnZSBleHRlbmRzIFJlYWRhYmxlIHtcblx0Y29uc3RydWN0b3Ioc29ja2V0LCBoaWdoV2F0ZXJNYXJrKSB7XG5cdFx0c3VwZXIoe1xuXHRcdFx0aGlnaFdhdGVyTWFyayxcblx0XHRcdGF1dG9EZXN0cm95OiBmYWxzZVxuXHRcdH0pO1xuXG5cdFx0dGhpcy5zdGF0dXNDb2RlID0gbnVsbDtcblx0XHR0aGlzLnN0YXR1c01lc3NhZ2UgPSAnJztcblx0XHR0aGlzLmh0dHBWZXJzaW9uID0gJzIuMCc7XG5cdFx0dGhpcy5odHRwVmVyc2lvbk1ham9yID0gMjtcblx0XHR0aGlzLmh0dHBWZXJzaW9uTWlub3IgPSAwO1xuXHRcdHRoaXMuaGVhZGVycyA9IHt9O1xuXHRcdHRoaXMudHJhaWxlcnMgPSB7fTtcblx0XHR0aGlzLnJlcSA9IG51bGw7XG5cblx0XHR0aGlzLmFib3J0ZWQgPSBmYWxzZTtcblx0XHR0aGlzLmNvbXBsZXRlID0gZmFsc2U7XG5cdFx0dGhpcy51cGdyYWRlID0gbnVsbDtcblxuXHRcdHRoaXMucmF3SGVhZGVycyA9IFtdO1xuXHRcdHRoaXMucmF3VHJhaWxlcnMgPSBbXTtcblxuXHRcdHRoaXMuc29ja2V0ID0gc29ja2V0O1xuXHRcdHRoaXMuY29ubmVjdGlvbiA9IHNvY2tldDtcblxuXHRcdHRoaXMuX2R1bXBlZCA9IGZhbHNlO1xuXHR9XG5cblx0X2Rlc3Ryb3koZXJyb3IpIHtcblx0XHR0aGlzLnJlcS5fcmVxdWVzdC5kZXN0cm95KGVycm9yKTtcblx0fVxuXG5cdHNldFRpbWVvdXQobXMsIGNhbGxiYWNrKSB7XG5cdFx0dGhpcy5yZXEuc2V0VGltZW91dChtcywgY2FsbGJhY2spO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0X2R1bXAoKSB7XG5cdFx0aWYgKCF0aGlzLl9kdW1wZWQpIHtcblx0XHRcdHRoaXMuX2R1bXBlZCA9IHRydWU7XG5cblx0XHRcdHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdkYXRhJyk7XG5cdFx0XHR0aGlzLnJlc3VtZSgpO1xuXHRcdH1cblx0fVxuXG5cdF9yZWFkKCkge1xuXHRcdGlmICh0aGlzLnJlcSkge1xuXHRcdFx0dGhpcy5yZXEuX3JlcXVlc3QucmVzdW1lKCk7XG5cdFx0fVxuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gSW5jb21pbmdNZXNzYWdlO1xuIl0sIm5hbWVzIjpbIlJlYWRhYmxlIiwicmVxdWlyZSIsIkluY29taW5nTWVzc2FnZSIsImNvbnN0cnVjdG9yIiwic29ja2V0IiwiaGlnaFdhdGVyTWFyayIsImF1dG9EZXN0cm95Iiwic3RhdHVzQ29kZSIsInN0YXR1c01lc3NhZ2UiLCJodHRwVmVyc2lvbiIsImh0dHBWZXJzaW9uTWFqb3IiLCJodHRwVmVyc2lvbk1pbm9yIiwiaGVhZGVycyIsInRyYWlsZXJzIiwicmVxIiwiYWJvcnRlZCIsImNvbXBsZXRlIiwidXBncmFkZSIsInJhd0hlYWRlcnMiLCJyYXdUcmFpbGVycyIsImNvbm5lY3Rpb24iLCJfZHVtcGVkIiwiX2Rlc3Ryb3kiLCJlcnJvciIsIl9yZXF1ZXN0IiwiZGVzdHJveSIsInNldFRpbWVvdXQiLCJtcyIsImNhbGxiYWNrIiwiX2R1bXAiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJyZXN1bWUiLCJfcmVhZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/incoming-message.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/http2-wrapper/source/index.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst agent = __webpack_require__(/*! ./agent */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/agent.js\");\nconst ClientRequest = __webpack_require__(/*! ./client-request */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/client-request.js\");\nconst IncomingMessage = __webpack_require__(/*! ./incoming-message */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/incoming-message.js\");\nconst auto = __webpack_require__(/*! ./auto */ \"(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/auto.js\");\nconst request = (url, options, callback)=>{\n    return new ClientRequest(url, options, callback);\n};\nconst get = (url, options, callback)=>{\n    // eslint-disable-next-line unicorn/prevent-abbreviations\n    const req = new ClientRequest(url, options, callback);\n    req.end();\n    return req;\n};\nmodule.exports = {\n    ...http2,\n    ClientRequest,\n    IncomingMessage,\n    ...agent,\n    request,\n    get,\n    auto\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxNQUFNQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUN0QixNQUFNQyxRQUFRRCxtQkFBT0EsQ0FBQztBQUN0QixNQUFNRSxnQkFBZ0JGLG1CQUFPQSxDQUFDO0FBQzlCLE1BQU1HLGtCQUFrQkgsbUJBQU9BLENBQUM7QUFDaEMsTUFBTUksT0FBT0osbUJBQU9BLENBQUM7QUFFckIsTUFBTUssVUFBVSxDQUFDQyxLQUFLQyxTQUFTQztJQUM5QixPQUFPLElBQUlOLGNBQWNJLEtBQUtDLFNBQVNDO0FBQ3hDO0FBRUEsTUFBTUMsTUFBTSxDQUFDSCxLQUFLQyxTQUFTQztJQUMxQix5REFBeUQ7SUFDekQsTUFBTUUsTUFBTSxJQUFJUixjQUFjSSxLQUFLQyxTQUFTQztJQUM1Q0UsSUFBSUMsR0FBRztJQUVQLE9BQU9EO0FBQ1I7QUFFQUUsT0FBT0MsT0FBTyxHQUFHO0lBQ2hCLEdBQUdkLEtBQUs7SUFDUkc7SUFDQUM7SUFDQSxHQUFHRixLQUFLO0lBQ1JJO0lBQ0FJO0lBQ0FMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1leGFtcGxlLWZ1bGwvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvaW5kZXguanM/M2ZiMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBodHRwMiA9IHJlcXVpcmUoJ2h0dHAyJyk7XG5jb25zdCBhZ2VudCA9IHJlcXVpcmUoJy4vYWdlbnQnKTtcbmNvbnN0IENsaWVudFJlcXVlc3QgPSByZXF1aXJlKCcuL2NsaWVudC1yZXF1ZXN0Jyk7XG5jb25zdCBJbmNvbWluZ01lc3NhZ2UgPSByZXF1aXJlKCcuL2luY29taW5nLW1lc3NhZ2UnKTtcbmNvbnN0IGF1dG8gPSByZXF1aXJlKCcuL2F1dG8nKTtcblxuY29uc3QgcmVxdWVzdCA9ICh1cmwsIG9wdGlvbnMsIGNhbGxiYWNrKSA9PiB7XG5cdHJldHVybiBuZXcgQ2xpZW50UmVxdWVzdCh1cmwsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbn07XG5cbmNvbnN0IGdldCA9ICh1cmwsIG9wdGlvbnMsIGNhbGxiYWNrKSA9PiB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL3ByZXZlbnQtYWJicmV2aWF0aW9uc1xuXHRjb25zdCByZXEgPSBuZXcgQ2xpZW50UmVxdWVzdCh1cmwsIG9wdGlvbnMsIGNhbGxiYWNrKTtcblx0cmVxLmVuZCgpO1xuXG5cdHJldHVybiByZXE7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0Li4uaHR0cDIsXG5cdENsaWVudFJlcXVlc3QsXG5cdEluY29taW5nTWVzc2FnZSxcblx0Li4uYWdlbnQsXG5cdHJlcXVlc3QsXG5cdGdldCxcblx0YXV0b1xufTtcbiJdLCJuYW1lcyI6WyJodHRwMiIsInJlcXVpcmUiLCJhZ2VudCIsIkNsaWVudFJlcXVlc3QiLCJJbmNvbWluZ01lc3NhZ2UiLCJhdXRvIiwicmVxdWVzdCIsInVybCIsIm9wdGlvbnMiLCJjYWxsYmFjayIsImdldCIsInJlcSIsImVuZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/calculate-server-name.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/http2-wrapper/source/utils/calculate-server-name.js ***!
  \*****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst net = __webpack_require__(/*! net */ \"net\");\n/* istanbul ignore file: https://github.com/nodejs/node/blob/v13.0.1/lib/_http_agent.js */ module.exports = (options)=>{\n    let servername = options.host;\n    const hostHeader = options.headers && options.headers.host;\n    if (hostHeader) {\n        if (hostHeader.startsWith(\"[\")) {\n            const index = hostHeader.indexOf(\"]\");\n            if (index === -1) {\n                servername = hostHeader;\n            } else {\n                servername = hostHeader.slice(1, -1);\n            }\n        } else {\n            servername = hostHeader.split(\":\", 1)[0];\n        }\n    }\n    if (net.isIP(servername)) {\n        return \"\";\n    }\n    return servername;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvY2FsY3VsYXRlLXNlcnZlci1uYW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsTUFBTUEsTUFBTUMsbUJBQU9BLENBQUM7QUFDcEIsd0ZBQXdGLEdBRXhGQyxPQUFPQyxPQUFPLEdBQUdDLENBQUFBO0lBQ2hCLElBQUlDLGFBQWFELFFBQVFFLElBQUk7SUFDN0IsTUFBTUMsYUFBYUgsUUFBUUksT0FBTyxJQUFJSixRQUFRSSxPQUFPLENBQUNGLElBQUk7SUFFMUQsSUFBSUMsWUFBWTtRQUNmLElBQUlBLFdBQVdFLFVBQVUsQ0FBQyxNQUFNO1lBQy9CLE1BQU1DLFFBQVFILFdBQVdJLE9BQU8sQ0FBQztZQUNqQyxJQUFJRCxVQUFVLENBQUMsR0FBRztnQkFDakJMLGFBQWFFO1lBQ2QsT0FBTztnQkFDTkYsYUFBYUUsV0FBV0ssS0FBSyxDQUFDLEdBQUcsQ0FBQztZQUNuQztRQUNELE9BQU87WUFDTlAsYUFBYUUsV0FBV00sS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUU7UUFDekM7SUFDRDtJQUVBLElBQUliLElBQUljLElBQUksQ0FBQ1QsYUFBYTtRQUN6QixPQUFPO0lBQ1I7SUFFQSxPQUFPQTtBQUNSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZXhhbXBsZS1mdWxsLy4vbm9kZV9tb2R1bGVzL25vdGlvbi1jbGllbnQvbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL3V0aWxzL2NhbGN1bGF0ZS1zZXJ2ZXItbmFtZS5qcz83ZWI5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IG5ldCA9IHJlcXVpcmUoJ25ldCcpO1xuLyogaXN0YW5idWwgaWdub3JlIGZpbGU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iL3YxMy4wLjEvbGliL19odHRwX2FnZW50LmpzICovXG5cbm1vZHVsZS5leHBvcnRzID0gb3B0aW9ucyA9PiB7XG5cdGxldCBzZXJ2ZXJuYW1lID0gb3B0aW9ucy5ob3N0O1xuXHRjb25zdCBob3N0SGVhZGVyID0gb3B0aW9ucy5oZWFkZXJzICYmIG9wdGlvbnMuaGVhZGVycy5ob3N0O1xuXG5cdGlmIChob3N0SGVhZGVyKSB7XG5cdFx0aWYgKGhvc3RIZWFkZXIuc3RhcnRzV2l0aCgnWycpKSB7XG5cdFx0XHRjb25zdCBpbmRleCA9IGhvc3RIZWFkZXIuaW5kZXhPZignXScpO1xuXHRcdFx0aWYgKGluZGV4ID09PSAtMSkge1xuXHRcdFx0XHRzZXJ2ZXJuYW1lID0gaG9zdEhlYWRlcjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlcnZlcm5hbWUgPSBob3N0SGVhZGVyLnNsaWNlKDEsIC0xKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c2VydmVybmFtZSA9IGhvc3RIZWFkZXIuc3BsaXQoJzonLCAxKVswXTtcblx0XHR9XG5cdH1cblxuXHRpZiAobmV0LmlzSVAoc2VydmVybmFtZSkpIHtcblx0XHRyZXR1cm4gJyc7XG5cdH1cblxuXHRyZXR1cm4gc2VydmVybmFtZTtcbn07XG4iXSwibmFtZXMiOlsibmV0IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJvcHRpb25zIiwic2VydmVybmFtZSIsImhvc3QiLCJob3N0SGVhZGVyIiwiaGVhZGVycyIsInN0YXJ0c1dpdGgiLCJpbmRleCIsImluZGV4T2YiLCJzbGljZSIsInNwbGl0IiwiaXNJUCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/calculate-server-name.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/errors.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/http2-wrapper/source/utils/errors.js ***!
  \**************************************************************************************/
/***/ ((module) => {

eval("\n/* istanbul ignore file: https://github.com/nodejs/node/blob/master/lib/internal/errors.js */ const makeError = (Base, key, getMessage)=>{\n    module.exports[key] = class NodeError extends Base {\n        constructor(...args){\n            super(typeof getMessage === \"string\" ? getMessage : getMessage(args));\n            this.name = `${super.name} [${key}]`;\n            this.code = key;\n        }\n    };\n};\nmakeError(TypeError, \"ERR_INVALID_ARG_TYPE\", (args)=>{\n    const type = args[0].includes(\".\") ? \"property\" : \"argument\";\n    let valid = args[1];\n    const isManyTypes = Array.isArray(valid);\n    if (isManyTypes) {\n        valid = `${valid.slice(0, -1).join(\", \")} or ${valid.slice(-1)}`;\n    }\n    return `The \"${args[0]}\" ${type} must be ${isManyTypes ? \"one of\" : \"of\"} type ${valid}. Received ${typeof args[2]}`;\n});\nmakeError(TypeError, \"ERR_INVALID_PROTOCOL\", (args)=>{\n    return `Protocol \"${args[0]}\" not supported. Expected \"${args[1]}\"`;\n});\nmakeError(Error, \"ERR_HTTP_HEADERS_SENT\", (args)=>{\n    return `Cannot ${args[0]} headers after they are sent to the client`;\n});\nmakeError(TypeError, \"ERR_INVALID_HTTP_TOKEN\", (args)=>{\n    return `${args[0]} must be a valid HTTP token [${args[1]}]`;\n});\nmakeError(TypeError, \"ERR_HTTP_INVALID_HEADER_VALUE\", (args)=>{\n    return `Invalid value \"${args[0]} for header \"${args[1]}\"`;\n});\nmakeError(TypeError, \"ERR_INVALID_CHAR\", (args)=>{\n    return `Invalid character in ${args[0]} [${args[1]}]`;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvZXJyb3JzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsMkZBQTJGLEdBRTNGLE1BQU1BLFlBQVksQ0FBQ0MsTUFBTUMsS0FBS0M7SUFDN0JDLE9BQU9DLE9BQU8sQ0FBQ0gsSUFBSSxHQUFHLE1BQU1JLGtCQUFrQkw7UUFDN0NNLFlBQVksR0FBR0MsSUFBSSxDQUFFO1lBQ3BCLEtBQUssQ0FBQyxPQUFPTCxlQUFlLFdBQVdBLGFBQWFBLFdBQVdLO1lBQy9ELElBQUksQ0FBQ0MsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUNBLEtBQUssRUFBRSxFQUFFUCxJQUFJLENBQUMsQ0FBQztZQUNwQyxJQUFJLENBQUNRLElBQUksR0FBR1I7UUFDYjtJQUNEO0FBQ0Q7QUFFQUYsVUFBVVcsV0FBVyx3QkFBd0JILENBQUFBO0lBQzVDLE1BQU1JLE9BQU9KLElBQUksQ0FBQyxFQUFFLENBQUNLLFFBQVEsQ0FBQyxPQUFPLGFBQWE7SUFFbEQsSUFBSUMsUUFBUU4sSUFBSSxDQUFDLEVBQUU7SUFDbkIsTUFBTU8sY0FBY0MsTUFBTUMsT0FBTyxDQUFDSDtJQUVsQyxJQUFJQyxhQUFhO1FBQ2hCRCxRQUFRLENBQUMsRUFBRUEsTUFBTUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHQyxJQUFJLENBQUMsTUFBTSxJQUFJLEVBQUVMLE1BQU1JLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUNqRTtJQUVBLE9BQU8sQ0FBQyxLQUFLLEVBQUVWLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFSSxLQUFLLFNBQVMsRUFBRUcsY0FBYyxXQUFXLEtBQUssTUFBTSxFQUFFRCxNQUFNLFdBQVcsRUFBRSxPQUFPTixJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDckg7QUFFQVIsVUFBVVcsV0FBVyx3QkFBd0JILENBQUFBO0lBQzVDLE9BQU8sQ0FBQyxVQUFVLEVBQUVBLElBQUksQ0FBQyxFQUFFLENBQUMsMkJBQTJCLEVBQUVBLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3BFO0FBRUFSLFVBQVVvQixPQUFPLHlCQUF5QlosQ0FBQUE7SUFDekMsT0FBTyxDQUFDLE9BQU8sRUFBRUEsSUFBSSxDQUFDLEVBQUUsQ0FBQywwQ0FBMEMsQ0FBQztBQUNyRTtBQUVBUixVQUFVVyxXQUFXLDBCQUEwQkgsQ0FBQUE7SUFDOUMsT0FBTyxDQUFDLEVBQUVBLElBQUksQ0FBQyxFQUFFLENBQUMsNkJBQTZCLEVBQUVBLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzVEO0FBRUFSLFVBQVVXLFdBQVcsaUNBQWlDSCxDQUFBQTtJQUNyRCxPQUFPLENBQUMsZUFBZSxFQUFFQSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDM0Q7QUFFQVIsVUFBVVcsV0FBVyxvQkFBb0JILENBQUFBO0lBQ3hDLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUVBLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3REIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZXhhbXBsZS1mdWxsLy4vbm9kZV9tb2R1bGVzL25vdGlvbi1jbGllbnQvbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL3V0aWxzL2Vycm9ycy5qcz9iYjFlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8qIGlzdGFuYnVsIGlnbm9yZSBmaWxlOiBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi9tYXN0ZXIvbGliL2ludGVybmFsL2Vycm9ycy5qcyAqL1xuXG5jb25zdCBtYWtlRXJyb3IgPSAoQmFzZSwga2V5LCBnZXRNZXNzYWdlKSA9PiB7XG5cdG1vZHVsZS5leHBvcnRzW2tleV0gPSBjbGFzcyBOb2RlRXJyb3IgZXh0ZW5kcyBCYXNlIHtcblx0XHRjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG5cdFx0XHRzdXBlcih0eXBlb2YgZ2V0TWVzc2FnZSA9PT0gJ3N0cmluZycgPyBnZXRNZXNzYWdlIDogZ2V0TWVzc2FnZShhcmdzKSk7XG5cdFx0XHR0aGlzLm5hbWUgPSBgJHtzdXBlci5uYW1lfSBbJHtrZXl9XWA7XG5cdFx0XHR0aGlzLmNvZGUgPSBrZXk7XG5cdFx0fVxuXHR9O1xufTtcblxubWFrZUVycm9yKFR5cGVFcnJvciwgJ0VSUl9JTlZBTElEX0FSR19UWVBFJywgYXJncyA9PiB7XG5cdGNvbnN0IHR5cGUgPSBhcmdzWzBdLmluY2x1ZGVzKCcuJykgPyAncHJvcGVydHknIDogJ2FyZ3VtZW50JztcblxuXHRsZXQgdmFsaWQgPSBhcmdzWzFdO1xuXHRjb25zdCBpc01hbnlUeXBlcyA9IEFycmF5LmlzQXJyYXkodmFsaWQpO1xuXG5cdGlmIChpc01hbnlUeXBlcykge1xuXHRcdHZhbGlkID0gYCR7dmFsaWQuc2xpY2UoMCwgLTEpLmpvaW4oJywgJyl9IG9yICR7dmFsaWQuc2xpY2UoLTEpfWA7XG5cdH1cblxuXHRyZXR1cm4gYFRoZSBcIiR7YXJnc1swXX1cIiAke3R5cGV9IG11c3QgYmUgJHtpc01hbnlUeXBlcyA/ICdvbmUgb2YnIDogJ29mJ30gdHlwZSAke3ZhbGlkfS4gUmVjZWl2ZWQgJHt0eXBlb2YgYXJnc1syXX1gO1xufSk7XG5cbm1ha2VFcnJvcihUeXBlRXJyb3IsICdFUlJfSU5WQUxJRF9QUk9UT0NPTCcsIGFyZ3MgPT4ge1xuXHRyZXR1cm4gYFByb3RvY29sIFwiJHthcmdzWzBdfVwiIG5vdCBzdXBwb3J0ZWQuIEV4cGVjdGVkIFwiJHthcmdzWzFdfVwiYDtcbn0pO1xuXG5tYWtlRXJyb3IoRXJyb3IsICdFUlJfSFRUUF9IRUFERVJTX1NFTlQnLCBhcmdzID0+IHtcblx0cmV0dXJuIGBDYW5ub3QgJHthcmdzWzBdfSBoZWFkZXJzIGFmdGVyIHRoZXkgYXJlIHNlbnQgdG8gdGhlIGNsaWVudGA7XG59KTtcblxubWFrZUVycm9yKFR5cGVFcnJvciwgJ0VSUl9JTlZBTElEX0hUVFBfVE9LRU4nLCBhcmdzID0+IHtcblx0cmV0dXJuIGAke2FyZ3NbMF19IG11c3QgYmUgYSB2YWxpZCBIVFRQIHRva2VuIFske2FyZ3NbMV19XWA7XG59KTtcblxubWFrZUVycm9yKFR5cGVFcnJvciwgJ0VSUl9IVFRQX0lOVkFMSURfSEVBREVSX1ZBTFVFJywgYXJncyA9PiB7XG5cdHJldHVybiBgSW52YWxpZCB2YWx1ZSBcIiR7YXJnc1swXX0gZm9yIGhlYWRlciBcIiR7YXJnc1sxXX1cImA7XG59KTtcblxubWFrZUVycm9yKFR5cGVFcnJvciwgJ0VSUl9JTlZBTElEX0NIQVInLCBhcmdzID0+IHtcblx0cmV0dXJuIGBJbnZhbGlkIGNoYXJhY3RlciBpbiAke2FyZ3NbMF19IFske2FyZ3NbMV19XWA7XG59KTtcbiJdLCJuYW1lcyI6WyJtYWtlRXJyb3IiLCJCYXNlIiwia2V5IiwiZ2V0TWVzc2FnZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJOb2RlRXJyb3IiLCJjb25zdHJ1Y3RvciIsImFyZ3MiLCJuYW1lIiwiY29kZSIsIlR5cGVFcnJvciIsInR5cGUiLCJpbmNsdWRlcyIsInZhbGlkIiwiaXNNYW55VHlwZXMiLCJBcnJheSIsImlzQXJyYXkiLCJzbGljZSIsImpvaW4iLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/is-request-pseudo-header.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/http2-wrapper/source/utils/is-request-pseudo-header.js ***!
  \********************************************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = (header)=>{\n    switch(header){\n        case \":method\":\n        case \":scheme\":\n        case \":authority\":\n        case \":path\":\n            return true;\n        default:\n            return false;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvaXMtcmVxdWVzdC1wc2V1ZG8taGVhZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBR0MsQ0FBQUE7SUFDaEIsT0FBUUE7UUFDUCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1lBQ0osT0FBTztRQUNSO1lBQ0MsT0FBTztJQUNUO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1leGFtcGxlLWZ1bGwvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvaXMtcmVxdWVzdC1wc2V1ZG8taGVhZGVyLmpzPzhlYmEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGhlYWRlciA9PiB7XG5cdHN3aXRjaCAoaGVhZGVyKSB7XG5cdFx0Y2FzZSAnOm1ldGhvZCc6XG5cdFx0Y2FzZSAnOnNjaGVtZSc6XG5cdFx0Y2FzZSAnOmF1dGhvcml0eSc6XG5cdFx0Y2FzZSAnOnBhdGgnOlxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiaGVhZGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/is-request-pseudo-header.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/proxy-events.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/http2-wrapper/source/utils/proxy-events.js ***!
  \********************************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = (from, to, events)=>{\n    for (const event of events){\n        from.on(event, (...args)=>to.emit(event, ...args));\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvcHJveHktZXZlbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBRyxDQUFDQyxNQUFNQyxJQUFJQztJQUMzQixLQUFLLE1BQU1DLFNBQVNELE9BQVE7UUFDM0JGLEtBQUtJLEVBQUUsQ0FBQ0QsT0FBTyxDQUFDLEdBQUdFLE9BQVNKLEdBQUdLLElBQUksQ0FBQ0gsVUFBVUU7SUFDL0M7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25vdGlvbi14LWV4YW1wbGUtZnVsbC8uL25vZGVfbW9kdWxlcy9ub3Rpb24tY2xpZW50L25vZGVfbW9kdWxlcy9odHRwMi13cmFwcGVyL3NvdXJjZS91dGlscy9wcm94eS1ldmVudHMuanM/NjVlYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gKGZyb20sIHRvLCBldmVudHMpID0+IHtcblx0Zm9yIChjb25zdCBldmVudCBvZiBldmVudHMpIHtcblx0XHRmcm9tLm9uKGV2ZW50LCAoLi4uYXJncykgPT4gdG8uZW1pdChldmVudCwgLi4uYXJncykpO1xuXHR9XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJmcm9tIiwidG8iLCJldmVudHMiLCJldmVudCIsIm9uIiwiYXJncyIsImVtaXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/proxy-events.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/url-to-options.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/http2-wrapper/source/utils/url-to-options.js ***!
  \**********************************************************************************************/
/***/ ((module) => {

eval("\n/* istanbul ignore file: https://github.com/nodejs/node/blob/a91293d4d9ab403046ab5eb022332e4e3d249bd3/lib/internal/url.js#L1257 */ module.exports = (url)=>{\n    const options = {\n        protocol: url.protocol,\n        hostname: typeof url.hostname === \"string\" && url.hostname.startsWith(\"[\") ? url.hostname.slice(1, -1) : url.hostname,\n        host: url.host,\n        hash: url.hash,\n        search: url.search,\n        pathname: url.pathname,\n        href: url.href,\n        path: `${url.pathname || \"\"}${url.search || \"\"}`\n    };\n    if (typeof url.port === \"string\" && url.port.length !== 0) {\n        options.port = Number(url.port);\n    }\n    if (url.username || url.password) {\n        options.auth = `${url.username || \"\"}:${url.password || \"\"}`;\n    }\n    return options;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvdXJsLXRvLW9wdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxnSUFBZ0ksR0FFaElBLE9BQU9DLE9BQU8sR0FBR0MsQ0FBQUE7SUFDaEIsTUFBTUMsVUFBVTtRQUNmQyxVQUFVRixJQUFJRSxRQUFRO1FBQ3RCQyxVQUFVLE9BQU9ILElBQUlHLFFBQVEsS0FBSyxZQUFZSCxJQUFJRyxRQUFRLENBQUNDLFVBQVUsQ0FBQyxPQUFPSixJQUFJRyxRQUFRLENBQUNFLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBS0wsSUFBSUcsUUFBUTtRQUNySEcsTUFBTU4sSUFBSU0sSUFBSTtRQUNkQyxNQUFNUCxJQUFJTyxJQUFJO1FBQ2RDLFFBQVFSLElBQUlRLE1BQU07UUFDbEJDLFVBQVVULElBQUlTLFFBQVE7UUFDdEJDLE1BQU1WLElBQUlVLElBQUk7UUFDZEMsTUFBTSxDQUFDLEVBQUVYLElBQUlTLFFBQVEsSUFBSSxHQUFHLEVBQUVULElBQUlRLE1BQU0sSUFBSSxHQUFHLENBQUM7SUFDakQ7SUFFQSxJQUFJLE9BQU9SLElBQUlZLElBQUksS0FBSyxZQUFZWixJQUFJWSxJQUFJLENBQUNDLE1BQU0sS0FBSyxHQUFHO1FBQzFEWixRQUFRVyxJQUFJLEdBQUdFLE9BQU9kLElBQUlZLElBQUk7SUFDL0I7SUFFQSxJQUFJWixJQUFJZSxRQUFRLElBQUlmLElBQUlnQixRQUFRLEVBQUU7UUFDakNmLFFBQVFnQixJQUFJLEdBQUcsQ0FBQyxFQUFFakIsSUFBSWUsUUFBUSxJQUFJLEdBQUcsQ0FBQyxFQUFFZixJQUFJZ0IsUUFBUSxJQUFJLEdBQUcsQ0FBQztJQUM3RDtJQUVBLE9BQU9mO0FBQ1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1leGFtcGxlLWZ1bGwvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvdXJsLXRvLW9wdGlvbnMuanM/OGFiOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgZmlsZTogaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvYTkxMjkzZDRkOWFiNDAzMDQ2YWI1ZWIwMjIzMzJlNGUzZDI0OWJkMy9saWIvaW50ZXJuYWwvdXJsLmpzI0wxMjU3ICovXG5cbm1vZHVsZS5leHBvcnRzID0gdXJsID0+IHtcblx0Y29uc3Qgb3B0aW9ucyA9IHtcblx0XHRwcm90b2NvbDogdXJsLnByb3RvY29sLFxuXHRcdGhvc3RuYW1lOiB0eXBlb2YgdXJsLmhvc3RuYW1lID09PSAnc3RyaW5nJyAmJiB1cmwuaG9zdG5hbWUuc3RhcnRzV2l0aCgnWycpID8gdXJsLmhvc3RuYW1lLnNsaWNlKDEsIC0xKSA6IHVybC5ob3N0bmFtZSxcblx0XHRob3N0OiB1cmwuaG9zdCxcblx0XHRoYXNoOiB1cmwuaGFzaCxcblx0XHRzZWFyY2g6IHVybC5zZWFyY2gsXG5cdFx0cGF0aG5hbWU6IHVybC5wYXRobmFtZSxcblx0XHRocmVmOiB1cmwuaHJlZixcblx0XHRwYXRoOiBgJHt1cmwucGF0aG5hbWUgfHwgJyd9JHt1cmwuc2VhcmNoIHx8ICcnfWBcblx0fTtcblxuXHRpZiAodHlwZW9mIHVybC5wb3J0ID09PSAnc3RyaW5nJyAmJiB1cmwucG9ydC5sZW5ndGggIT09IDApIHtcblx0XHRvcHRpb25zLnBvcnQgPSBOdW1iZXIodXJsLnBvcnQpO1xuXHR9XG5cblx0aWYgKHVybC51c2VybmFtZSB8fCB1cmwucGFzc3dvcmQpIHtcblx0XHRvcHRpb25zLmF1dGggPSBgJHt1cmwudXNlcm5hbWUgfHwgJyd9OiR7dXJsLnBhc3N3b3JkIHx8ICcnfWA7XG5cdH1cblxuXHRyZXR1cm4gb3B0aW9ucztcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInVybCIsIm9wdGlvbnMiLCJwcm90b2NvbCIsImhvc3RuYW1lIiwic3RhcnRzV2l0aCIsInNsaWNlIiwiaG9zdCIsImhhc2giLCJzZWFyY2giLCJwYXRobmFtZSIsImhyZWYiLCJwYXRoIiwicG9ydCIsImxlbmd0aCIsIk51bWJlciIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJhdXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/http2-wrapper/source/utils/url-to-options.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/lowercase-keys/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/lowercase-keys/index.js ***!
  \*************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = (object)=>{\n    const result = {};\n    for (const [key, value] of Object.entries(object)){\n        result[key.toLowerCase()] = value;\n    }\n    return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvbG93ZXJjYXNlLWtleXMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQUEsT0FBT0MsT0FBTyxHQUFHQyxDQUFBQTtJQUNoQixNQUFNQyxTQUFTLENBQUM7SUFFaEIsS0FBSyxNQUFNLENBQUNDLEtBQUtDLE1BQU0sSUFBSUMsT0FBT0MsT0FBTyxDQUFDTCxRQUFTO1FBQ2xEQyxNQUFNLENBQUNDLElBQUlJLFdBQVcsR0FBRyxHQUFHSDtJQUM3QjtJQUVBLE9BQU9GO0FBQ1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1leGFtcGxlLWZ1bGwvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvbG93ZXJjYXNlLWtleXMvaW5kZXguanM/MzBkZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IG9iamVjdCA9PiB7XG5cdGNvbnN0IHJlc3VsdCA9IHt9O1xuXG5cdGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG9iamVjdCkpIHtcblx0XHRyZXN1bHRba2V5LnRvTG93ZXJDYXNlKCldID0gdmFsdWU7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwib2JqZWN0IiwicmVzdWx0Iiwia2V5IiwidmFsdWUiLCJPYmplY3QiLCJlbnRyaWVzIiwidG9Mb3dlckNhc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/lowercase-keys/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/node_modules/p-cancelable/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/notion-client/node_modules/p-cancelable/index.js ***!
  \***********************************************************************/
/***/ ((module) => {

eval("\nclass CancelError extends Error {\n    constructor(reason){\n        super(reason || \"Promise was canceled\");\n        this.name = \"CancelError\";\n    }\n    get isCanceled() {\n        return true;\n    }\n}\nclass PCancelable {\n    static fn(userFn) {\n        return (...arguments_)=>{\n            return new PCancelable((resolve, reject, onCancel)=>{\n                arguments_.push(onCancel);\n                // eslint-disable-next-line promise/prefer-await-to-then\n                userFn(...arguments_).then(resolve, reject);\n            });\n        };\n    }\n    constructor(executor){\n        this._cancelHandlers = [];\n        this._isPending = true;\n        this._isCanceled = false;\n        this._rejectOnCancel = true;\n        this._promise = new Promise((resolve, reject)=>{\n            this._reject = reject;\n            const onResolve = (value)=>{\n                this._isPending = false;\n                resolve(value);\n            };\n            const onReject = (error)=>{\n                this._isPending = false;\n                reject(error);\n            };\n            const onCancel = (handler)=>{\n                if (!this._isPending) {\n                    throw new Error(\"The `onCancel` handler was attached after the promise settled.\");\n                }\n                this._cancelHandlers.push(handler);\n            };\n            Object.defineProperties(onCancel, {\n                shouldReject: {\n                    get: ()=>this._rejectOnCancel,\n                    set: (boolean)=>{\n                        this._rejectOnCancel = boolean;\n                    }\n                }\n            });\n            return executor(onResolve, onReject, onCancel);\n        });\n    }\n    then(onFulfilled, onRejected) {\n        // eslint-disable-next-line promise/prefer-await-to-then\n        return this._promise.then(onFulfilled, onRejected);\n    }\n    catch(onRejected) {\n        return this._promise.catch(onRejected);\n    }\n    finally(onFinally) {\n        return this._promise.finally(onFinally);\n    }\n    cancel(reason) {\n        if (!this._isPending || this._isCanceled) {\n            return;\n        }\n        if (this._cancelHandlers.length > 0) {\n            try {\n                for (const handler of this._cancelHandlers){\n                    handler();\n                }\n            } catch (error) {\n                this._reject(error);\n            }\n        }\n        this._isCanceled = true;\n        if (this._rejectOnCancel) {\n            this._reject(new CancelError(reason));\n        }\n    }\n    get isCanceled() {\n        return this._isCanceled;\n    }\n}\nObject.setPrototypeOf(PCancelable.prototype, Promise.prototype);\nmodule.exports = PCancelable;\nmodule.exports.CancelError = CancelError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvcC1jYW5jZWxhYmxlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsb0JBQW9CQztJQUN6QkMsWUFBWUMsTUFBTSxDQUFFO1FBQ25CLEtBQUssQ0FBQ0EsVUFBVTtRQUNoQixJQUFJLENBQUNDLElBQUksR0FBRztJQUNiO0lBRUEsSUFBSUMsYUFBYTtRQUNoQixPQUFPO0lBQ1I7QUFDRDtBQUVBLE1BQU1DO0lBQ0wsT0FBT0MsR0FBR0MsTUFBTSxFQUFFO1FBQ2pCLE9BQU8sQ0FBQyxHQUFHQztZQUNWLE9BQU8sSUFBSUgsWUFBWSxDQUFDSSxTQUFTQyxRQUFRQztnQkFDeENILFdBQVdJLElBQUksQ0FBQ0Q7Z0JBQ2hCLHdEQUF3RDtnQkFDeERKLFVBQVVDLFlBQVlLLElBQUksQ0FBQ0osU0FBU0M7WUFDckM7UUFDRDtJQUNEO0lBRUFULFlBQVlhLFFBQVEsQ0FBRTtRQUNyQixJQUFJLENBQUNDLGVBQWUsR0FBRyxFQUFFO1FBQ3pCLElBQUksQ0FBQ0MsVUFBVSxHQUFHO1FBQ2xCLElBQUksQ0FBQ0MsV0FBVyxHQUFHO1FBQ25CLElBQUksQ0FBQ0MsZUFBZSxHQUFHO1FBRXZCLElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUlDLFFBQVEsQ0FBQ1gsU0FBU0M7WUFDckMsSUFBSSxDQUFDVyxPQUFPLEdBQUdYO1lBRWYsTUFBTVksWUFBWUMsQ0FBQUE7Z0JBQ2pCLElBQUksQ0FBQ1AsVUFBVSxHQUFHO2dCQUNsQlAsUUFBUWM7WUFDVDtZQUVBLE1BQU1DLFdBQVdDLENBQUFBO2dCQUNoQixJQUFJLENBQUNULFVBQVUsR0FBRztnQkFDbEJOLE9BQU9lO1lBQ1I7WUFFQSxNQUFNZCxXQUFXZSxDQUFBQTtnQkFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQ1YsVUFBVSxFQUFFO29CQUNyQixNQUFNLElBQUloQixNQUFNO2dCQUNqQjtnQkFFQSxJQUFJLENBQUNlLGVBQWUsQ0FBQ0gsSUFBSSxDQUFDYztZQUMzQjtZQUVBQyxPQUFPQyxnQkFBZ0IsQ0FBQ2pCLFVBQVU7Z0JBQ2pDa0IsY0FBYztvQkFDYkMsS0FBSyxJQUFNLElBQUksQ0FBQ1osZUFBZTtvQkFDL0JhLEtBQUtDLENBQUFBO3dCQUNKLElBQUksQ0FBQ2QsZUFBZSxHQUFHYztvQkFDeEI7Z0JBQ0Q7WUFDRDtZQUVBLE9BQU9sQixTQUFTUSxXQUFXRSxVQUFVYjtRQUN0QztJQUNEO0lBRUFFLEtBQUtvQixXQUFXLEVBQUVDLFVBQVUsRUFBRTtRQUM3Qix3REFBd0Q7UUFDeEQsT0FBTyxJQUFJLENBQUNmLFFBQVEsQ0FBQ04sSUFBSSxDQUFDb0IsYUFBYUM7SUFDeEM7SUFFQUMsTUFBTUQsVUFBVSxFQUFFO1FBQ2pCLE9BQU8sSUFBSSxDQUFDZixRQUFRLENBQUNnQixLQUFLLENBQUNEO0lBQzVCO0lBRUFFLFFBQVFDLFNBQVMsRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ2xCLFFBQVEsQ0FBQ2lCLE9BQU8sQ0FBQ0M7SUFDOUI7SUFFQUMsT0FBT3BDLE1BQU0sRUFBRTtRQUNkLElBQUksQ0FBQyxJQUFJLENBQUNjLFVBQVUsSUFBSSxJQUFJLENBQUNDLFdBQVcsRUFBRTtZQUN6QztRQUNEO1FBRUEsSUFBSSxJQUFJLENBQUNGLGVBQWUsQ0FBQ3dCLE1BQU0sR0FBRyxHQUFHO1lBQ3BDLElBQUk7Z0JBQ0gsS0FBSyxNQUFNYixXQUFXLElBQUksQ0FBQ1gsZUFBZSxDQUFFO29CQUMzQ1c7Z0JBQ0Q7WUFDRCxFQUFFLE9BQU9ELE9BQU87Z0JBQ2YsSUFBSSxDQUFDSixPQUFPLENBQUNJO1lBQ2Q7UUFDRDtRQUVBLElBQUksQ0FBQ1IsV0FBVyxHQUFHO1FBQ25CLElBQUksSUFBSSxDQUFDQyxlQUFlLEVBQUU7WUFDekIsSUFBSSxDQUFDRyxPQUFPLENBQUMsSUFBSXRCLFlBQVlHO1FBQzlCO0lBQ0Q7SUFFQSxJQUFJRSxhQUFhO1FBQ2hCLE9BQU8sSUFBSSxDQUFDYSxXQUFXO0lBQ3hCO0FBQ0Q7QUFFQVUsT0FBT2EsY0FBYyxDQUFDbkMsWUFBWW9DLFNBQVMsRUFBRXJCLFFBQVFxQixTQUFTO0FBRTlEQyxPQUFPQyxPQUFPLEdBQUd0QztBQUNqQnFDLDBCQUEwQixHQUFHM0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1leGFtcGxlLWZ1bGwvLi9ub2RlX21vZHVsZXMvbm90aW9uLWNsaWVudC9ub2RlX21vZHVsZXMvcC1jYW5jZWxhYmxlL2luZGV4LmpzPzIzYjgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jbGFzcyBDYW5jZWxFcnJvciBleHRlbmRzIEVycm9yIHtcblx0Y29uc3RydWN0b3IocmVhc29uKSB7XG5cdFx0c3VwZXIocmVhc29uIHx8ICdQcm9taXNlIHdhcyBjYW5jZWxlZCcpO1xuXHRcdHRoaXMubmFtZSA9ICdDYW5jZWxFcnJvcic7XG5cdH1cblxuXHRnZXQgaXNDYW5jZWxlZCgpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufVxuXG5jbGFzcyBQQ2FuY2VsYWJsZSB7XG5cdHN0YXRpYyBmbih1c2VyRm4pIHtcblx0XHRyZXR1cm4gKC4uLmFyZ3VtZW50c18pID0+IHtcblx0XHRcdHJldHVybiBuZXcgUENhbmNlbGFibGUoKHJlc29sdmUsIHJlamVjdCwgb25DYW5jZWwpID0+IHtcblx0XHRcdFx0YXJndW1lbnRzXy5wdXNoKG9uQ2FuY2VsKTtcblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByb21pc2UvcHJlZmVyLWF3YWl0LXRvLXRoZW5cblx0XHRcdFx0dXNlckZuKC4uLmFyZ3VtZW50c18pLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcblx0XHRcdH0pO1xuXHRcdH07XG5cdH1cblxuXHRjb25zdHJ1Y3RvcihleGVjdXRvcikge1xuXHRcdHRoaXMuX2NhbmNlbEhhbmRsZXJzID0gW107XG5cdFx0dGhpcy5faXNQZW5kaW5nID0gdHJ1ZTtcblx0XHR0aGlzLl9pc0NhbmNlbGVkID0gZmFsc2U7XG5cdFx0dGhpcy5fcmVqZWN0T25DYW5jZWwgPSB0cnVlO1xuXG5cdFx0dGhpcy5fcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdHRoaXMuX3JlamVjdCA9IHJlamVjdDtcblxuXHRcdFx0Y29uc3Qgb25SZXNvbHZlID0gdmFsdWUgPT4ge1xuXHRcdFx0XHR0aGlzLl9pc1BlbmRpbmcgPSBmYWxzZTtcblx0XHRcdFx0cmVzb2x2ZSh2YWx1ZSk7XG5cdFx0XHR9O1xuXG5cdFx0XHRjb25zdCBvblJlamVjdCA9IGVycm9yID0+IHtcblx0XHRcdFx0dGhpcy5faXNQZW5kaW5nID0gZmFsc2U7XG5cdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHR9O1xuXG5cdFx0XHRjb25zdCBvbkNhbmNlbCA9IGhhbmRsZXIgPT4ge1xuXHRcdFx0XHRpZiAoIXRoaXMuX2lzUGVuZGluZykge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcignVGhlIGBvbkNhbmNlbGAgaGFuZGxlciB3YXMgYXR0YWNoZWQgYWZ0ZXIgdGhlIHByb21pc2Ugc2V0dGxlZC4nKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMuX2NhbmNlbEhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG5cdFx0XHR9O1xuXG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyhvbkNhbmNlbCwge1xuXHRcdFx0XHRzaG91bGRSZWplY3Q6IHtcblx0XHRcdFx0XHRnZXQ6ICgpID0+IHRoaXMuX3JlamVjdE9uQ2FuY2VsLFxuXHRcdFx0XHRcdHNldDogYm9vbGVhbiA9PiB7XG5cdFx0XHRcdFx0XHR0aGlzLl9yZWplY3RPbkNhbmNlbCA9IGJvb2xlYW47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIGV4ZWN1dG9yKG9uUmVzb2x2ZSwgb25SZWplY3QsIG9uQ2FuY2VsKTtcblx0XHR9KTtcblx0fVxuXG5cdHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJvbWlzZS9wcmVmZXItYXdhaXQtdG8tdGhlblxuXHRcdHJldHVybiB0aGlzLl9wcm9taXNlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpO1xuXHR9XG5cblx0Y2F0Y2gob25SZWplY3RlZCkge1xuXHRcdHJldHVybiB0aGlzLl9wcm9taXNlLmNhdGNoKG9uUmVqZWN0ZWQpO1xuXHR9XG5cblx0ZmluYWxseShvbkZpbmFsbHkpIHtcblx0XHRyZXR1cm4gdGhpcy5fcHJvbWlzZS5maW5hbGx5KG9uRmluYWxseSk7XG5cdH1cblxuXHRjYW5jZWwocmVhc29uKSB7XG5cdFx0aWYgKCF0aGlzLl9pc1BlbmRpbmcgfHwgdGhpcy5faXNDYW5jZWxlZCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLl9jYW5jZWxIYW5kbGVycy5sZW5ndGggPiAwKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRmb3IgKGNvbnN0IGhhbmRsZXIgb2YgdGhpcy5fY2FuY2VsSGFuZGxlcnMpIHtcblx0XHRcdFx0XHRoYW5kbGVyKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdHRoaXMuX3JlamVjdChlcnJvcik7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5faXNDYW5jZWxlZCA9IHRydWU7XG5cdFx0aWYgKHRoaXMuX3JlamVjdE9uQ2FuY2VsKSB7XG5cdFx0XHR0aGlzLl9yZWplY3QobmV3IENhbmNlbEVycm9yKHJlYXNvbikpO1xuXHRcdH1cblx0fVxuXG5cdGdldCBpc0NhbmNlbGVkKCkge1xuXHRcdHJldHVybiB0aGlzLl9pc0NhbmNlbGVkO1xuXHR9XG59XG5cbk9iamVjdC5zZXRQcm90b3R5cGVPZihQQ2FuY2VsYWJsZS5wcm90b3R5cGUsIFByb21pc2UucHJvdG90eXBlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQQ2FuY2VsYWJsZTtcbm1vZHVsZS5leHBvcnRzLkNhbmNlbEVycm9yID0gQ2FuY2VsRXJyb3I7XG4iXSwibmFtZXMiOlsiQ2FuY2VsRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwicmVhc29uIiwibmFtZSIsImlzQ2FuY2VsZWQiLCJQQ2FuY2VsYWJsZSIsImZuIiwidXNlckZuIiwiYXJndW1lbnRzXyIsInJlc29sdmUiLCJyZWplY3QiLCJvbkNhbmNlbCIsInB1c2giLCJ0aGVuIiwiZXhlY3V0b3IiLCJfY2FuY2VsSGFuZGxlcnMiLCJfaXNQZW5kaW5nIiwiX2lzQ2FuY2VsZWQiLCJfcmVqZWN0T25DYW5jZWwiLCJfcHJvbWlzZSIsIlByb21pc2UiLCJfcmVqZWN0Iiwib25SZXNvbHZlIiwidmFsdWUiLCJvblJlamVjdCIsImVycm9yIiwiaGFuZGxlciIsIk9iamVjdCIsImRlZmluZVByb3BlcnRpZXMiLCJzaG91bGRSZWplY3QiLCJnZXQiLCJzZXQiLCJib29sZWFuIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiY2F0Y2giLCJmaW5hbGx5Iiwib25GaW5hbGx5IiwiY2FuY2VsIiwibGVuZ3RoIiwic2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/node_modules/p-cancelable/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-client/build/index.js":
/*!***************************************************!*\
  !*** ./node_modules/notion-client/build/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NotionAPI: () => (/* binding */ E)\n/* harmony export */ });\n/* harmony import */ var got__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! got */ \"(rsc)/./node_modules/notion-client/node_modules/got/dist/source/index.js\");\n/* harmony import */ var notion_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! notion-utils */ \"(rsc)/./node_modules/notion-utils/build/index.js\");\n/* harmony import */ var p_map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-map */ \"(rsc)/./node_modules/p-map/index.js\");\n\n\n\nvar E = class {\n    constructor({ apiBaseUrl: r = \"https://www.notion.so/api/v3\", authToken: n, activeUser: e, userTimeZone: a = \"America/New_York\" } = {}){\n        this._apiBaseUrl = r, this._authToken = n, this._activeUser = e, this._userTimeZone = a;\n    }\n    async getPage(r, { concurrency: n = 3, fetchMissingBlocks: e = !0, fetchCollections: a = !0, signFileUrls: o = !0, chunkLimit: s = 100, chunkNumber: h = 0, gotOptions: p } = {}) {\n        let y = await this.getPageRaw(r, {\n            chunkLimit: s,\n            chunkNumber: h,\n            gotOptions: p\n        }), t = y == null ? void 0 : y.recordMap;\n        if (!(t != null && t.block)) throw new Error(`Notion page not found \"${(0,notion_utils__WEBPACK_IMPORTED_MODULE_1__.uuidToId)(r)}\"`);\n        if (t.collection = t.collection ?? {}, t.collection_view = t.collection_view ?? {}, t.notion_user = t.notion_user ?? {}, t.collection_query = {}, t.signed_urls = {}, e) for(;;){\n            let d = (0,notion_utils__WEBPACK_IMPORTED_MODULE_1__.getPageContentBlockIds)(t).filter((i)=>!t.block[i]);\n            if (!d.length) break;\n            let c = await this.getBlocks(d, p).then((i)=>i.recordMap.block);\n            t.block = {\n                ...t.block,\n                ...c\n            };\n        }\n        let _ = (0,notion_utils__WEBPACK_IMPORTED_MODULE_1__.getPageContentBlockIds)(t);\n        if (a) {\n            let d = _.flatMap((c)=>{\n                var m;\n                let i = t.block[c].value, g = i && (i.type === \"collection_view\" || i.type === \"collection_view_page\") && (0,notion_utils__WEBPACK_IMPORTED_MODULE_1__.getBlockCollectionId)(i, t);\n                return g ? (m = i.view_ids) == null ? void 0 : m.map((b)=>({\n                        collectionId: g,\n                        collectionViewId: b\n                    })) : [];\n            });\n            await (0,p_map__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(d, async (c)=>{\n                var b, k;\n                let { collectionId: i, collectionViewId: g } = c, m = (b = t.collection_view[g]) == null ? void 0 : b.value;\n                try {\n                    let l = await this.getCollectionData(i, g, m, {\n                        gotOptions: p\n                    });\n                    t.block = {\n                        ...t.block,\n                        ...l.recordMap.block\n                    }, t.collection = {\n                        ...t.collection,\n                        ...l.recordMap.collection\n                    }, t.collection_view = {\n                        ...t.collection_view,\n                        ...l.recordMap.collection_view\n                    }, t.notion_user = {\n                        ...t.notion_user,\n                        ...l.recordMap.notion_user\n                    }, t.collection_query[i] = {\n                        ...t.collection_query[i],\n                        [g]: (k = l.result) == null ? void 0 : k.reducerResults\n                    };\n                } catch (l) {\n                    console.warn(\"NotionAPI collectionQuery error\", r, l.message), console.error(l);\n                }\n            }, {\n                concurrency: n\n            });\n        }\n        return o && await this.addSignedUrls({\n            recordMap: t,\n            contentBlockIds: _,\n            gotOptions: p\n        }), t;\n    }\n    async addSignedUrls({ recordMap: r, contentBlockIds: n, gotOptions: e = {} }) {\n        r.signed_urls = {}, n || (n = (0,notion_utils__WEBPACK_IMPORTED_MODULE_1__.getPageContentBlockIds)(r));\n        let a = n.flatMap((o)=>{\n            var h, p, y, t, _, d;\n            let s = (h = r.block[o]) == null ? void 0 : h.value;\n            if (s && (s.type === \"pdf\" || s.type === \"audio\" || s.type === \"image\" && ((p = s.file_ids) == null ? void 0 : p.length) || s.type === \"video\" || s.type === \"file\" || s.type === \"page\")) {\n                let c = s.type === \"page\" ? (y = s.format) == null ? void 0 : y.page_cover : (d = (_ = (t = s.properties) == null ? void 0 : t.source) == null ? void 0 : _[0]) == null ? void 0 : d[0];\n                if (c) return c.includes(\"secure.notion-static.com\") ? {\n                    permissionRecord: {\n                        table: \"block\",\n                        id: s.id\n                    },\n                    url: c\n                } : [];\n            }\n            return [];\n        });\n        if (a.length > 0) try {\n            let { signedUrls: o } = await this.getSignedFileUrls(a, e);\n            if (o.length === a.length) for(let s = 0; s < a.length; ++s){\n                let h = a[s], p = o[s];\n                r.signed_urls[h.permissionRecord.id] = p;\n            }\n        } catch (o) {\n            console.warn(\"NotionAPI getSignedfileUrls error\", o);\n        }\n    }\n    async getPageRaw(r, { gotOptions: n, chunkLimit: e = 100, chunkNumber: a = 0 } = {}) {\n        let o = (0,notion_utils__WEBPACK_IMPORTED_MODULE_1__.parsePageId)(r);\n        if (!o) throw new Error(`invalid notion pageId \"${r}\"`);\n        let s = {\n            pageId: o,\n            limit: e,\n            chunkNumber: a,\n            cursor: {\n                stack: []\n            },\n            verticalColumns: !1\n        };\n        return this.fetch({\n            endpoint: \"loadPageChunk\",\n            body: s,\n            gotOptions: n\n        });\n    }\n    async getCollectionData(r, n, e, { limit: a = 9999, searchQuery: o = \"\", userTimeZone: s = this._userTimeZone, loadContentCover: h = !0, gotOptions: p } = {}) {\n        var i, g, m, b, k, l, q, T, I, N, C, P;\n        let y = e == null ? void 0 : e.type, t = y === \"board\", _ = t ? (i = e == null ? void 0 : e.format) == null ? void 0 : i.board_columns_by : (g = e == null ? void 0 : e.format) == null ? void 0 : g.collection_group_by, d = [];\n        (m = e == null ? void 0 : e.format) != null && m.property_filters && (d = (b = e.format) == null ? void 0 : b.property_filters.map((f)=>{\n            var B, R;\n            return {\n                filter: (B = f == null ? void 0 : f.filter) == null ? void 0 : B.filter,\n                property: (R = f == null ? void 0 : f.filter) == null ? void 0 : R.property\n            };\n        })), (l = (k = e == null ? void 0 : e.query2) == null ? void 0 : k.filter) != null && l.filters && d.push(...e.query2.filter.filters);\n        let c = {\n            type: \"reducer\",\n            reducers: {\n                collection_group_results: {\n                    type: \"results\",\n                    limit: a,\n                    loadContentCover: h\n                }\n            },\n            sort: [],\n            ...e == null ? void 0 : e.query2,\n            filter: {\n                filters: d,\n                operator: \"and\"\n            },\n            searchQuery: o,\n            userTimeZone: s\n        };\n        if (_) {\n            let f = ((q = e == null ? void 0 : e.format) == null ? void 0 : q.board_columns) || ((T = e == null ? void 0 : e.format) == null ? void 0 : T.collection_groups) || [], B = [\n                t ? \"board\" : \"group_aggregation\",\n                \"results\"\n            ], R = {\n                checkbox: \"checkbox_is\",\n                url: \"string_starts_with\",\n                text: \"string_starts_with\",\n                select: \"enum_is\",\n                multi_select: \"enum_contains\",\n                created_time: \"date_is_within\",\n                undefined: \"is_empty\"\n            }, x = {};\n            for (let v of f){\n                let { property: D, value: { value: u, type: J } } = v;\n                for (let S of B){\n                    let F = S === \"results\" ? {\n                        type: S,\n                        limit: a\n                    } : {\n                        type: \"aggregation\",\n                        aggregation: {\n                            aggregator: \"count\"\n                        }\n                    }, U = typeof u > \"u\", M = u == null ? void 0 : u.range, A = U ? \"uncategorized\" : M ? ((I = u.range) == null ? void 0 : I.start_date) || ((N = u.range) == null ? void 0 : N.end_date) : (u == null ? void 0 : u.value) || u, Z = !U && (M || (u == null ? void 0 : u.value) || u);\n                    x[`${S}:${J}:${A}`] = {\n                        ...F,\n                        filter: {\n                            operator: \"and\",\n                            filters: [\n                                {\n                                    property: D,\n                                    filter: {\n                                        operator: U ? \"is_empty\" : R[J],\n                                        ...!U && {\n                                            value: {\n                                                type: \"exact\",\n                                                value: Z\n                                            }\n                                        }\n                                    }\n                                }\n                            ]\n                        }\n                    };\n                }\n            }\n            let L = t ? \"board_columns\" : `${y}_groups`;\n            c = {\n                type: \"reducer\",\n                reducers: {\n                    [L]: {\n                        type: \"groups\",\n                        groupBy: _,\n                        ...((C = e == null ? void 0 : e.query2) == null ? void 0 : C.filter) && {\n                            filter: (P = e == null ? void 0 : e.query2) == null ? void 0 : P.filter\n                        },\n                        groupSortPreference: f.map((v)=>v == null ? void 0 : v.value),\n                        limit: a\n                    },\n                    ...x\n                },\n                ...e == null ? void 0 : e.query2,\n                searchQuery: o,\n                userTimeZone: s,\n                filter: {\n                    filters: d,\n                    operator: \"and\"\n                }\n            };\n        }\n        return this.fetch({\n            endpoint: \"queryCollection\",\n            body: {\n                collection: {\n                    id: r\n                },\n                collectionView: {\n                    id: n\n                },\n                loader: c\n            },\n            gotOptions: p\n        });\n    }\n    async getUsers(r, n) {\n        return this.fetch({\n            endpoint: \"getRecordValues\",\n            body: {\n                requests: r.map((e)=>({\n                        id: e,\n                        table: \"notion_user\"\n                    }))\n            },\n            gotOptions: n\n        });\n    }\n    async getBlocks(r, n) {\n        return this.fetch({\n            endpoint: \"syncRecordValues\",\n            body: {\n                requests: r.map((e)=>({\n                        table: \"block\",\n                        id: e,\n                        version: -1\n                    }))\n            },\n            gotOptions: n\n        });\n    }\n    async getSignedFileUrls(r, n) {\n        return this.fetch({\n            endpoint: \"getSignedFileUrls\",\n            body: {\n                urls: r\n            },\n            gotOptions: n\n        });\n    }\n    async search(r, n) {\n        let e = {\n            type: \"BlocksInAncestor\",\n            source: \"quick_find_public\",\n            ancestorId: (0,notion_utils__WEBPACK_IMPORTED_MODULE_1__.parsePageId)(r.ancestorId),\n            sort: \"Relevance\",\n            limit: r.limit || 20,\n            query: r.query,\n            filters: {\n                isDeletedOnly: !1,\n                isNavigableOnly: !1,\n                excludeTemplates: !0,\n                requireEditPermissions: !1,\n                ancestors: [],\n                createdBy: [],\n                editedBy: [],\n                lastEditedTime: {},\n                createdTime: {},\n                ...r.filters\n            }\n        };\n        return this.fetch({\n            endpoint: \"search\",\n            body: e,\n            gotOptions: n\n        });\n    }\n    async fetch({ endpoint: r, body: n, gotOptions: e, headers: a }) {\n        let o = {\n            ...a,\n            ...e == null ? void 0 : e.headers,\n            \"Content-Type\": \"application/json\"\n        };\n        this._authToken && (o.cookie = `token_v2=${this._authToken}`), this._activeUser && (o[\"x-notion-active-user-header\"] = this._activeUser);\n        let s = `${this._apiBaseUrl}/${r}`;\n        return got__WEBPACK_IMPORTED_MODULE_2__.post(s, {\n            ...e,\n            json: n,\n            headers: o\n        }).json();\n    }\n};\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-client/build/index.js\n");

/***/ })

};
;