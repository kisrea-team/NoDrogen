"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/http-cache-semantics";
exports.ids = ["vendor-chunks/http-cache-semantics"];
exports.modules = {

/***/ "(rsc)/./node_modules/http-cache-semantics/index.js":
/*!****************************************************!*\
  !*** ./node_modules/http-cache-semantics/index.js ***!
  \****************************************************/
/***/ ((module) => {

eval("\n// rfc7231 6.1\nconst statusCodeCacheableByDefault = new Set([\n    200,\n    203,\n    204,\n    206,\n    300,\n    301,\n    404,\n    405,\n    410,\n    414,\n    501\n]);\n// This implementation does not understand partial responses (206)\nconst understoodStatuses = new Set([\n    200,\n    203,\n    204,\n    300,\n    301,\n    302,\n    303,\n    307,\n    308,\n    404,\n    405,\n    410,\n    414,\n    501\n]);\nconst errorStatusCodes = new Set([\n    500,\n    502,\n    503,\n    504\n]);\nconst hopByHopHeaders = {\n    date: true,\n    connection: true,\n    \"keep-alive\": true,\n    \"proxy-authenticate\": true,\n    \"proxy-authorization\": true,\n    te: true,\n    trailer: true,\n    \"transfer-encoding\": true,\n    upgrade: true\n};\nconst excludedFromRevalidationUpdate = {\n    // Since the old body is reused, it doesn't make sense to change properties of the body\n    \"content-length\": true,\n    \"content-encoding\": true,\n    \"transfer-encoding\": true,\n    \"content-range\": true\n};\nfunction toNumberOrZero(s) {\n    const n = parseInt(s, 10);\n    return isFinite(n) ? n : 0;\n}\n// RFC 5861\nfunction isErrorResponse(response) {\n    // consider undefined response as faulty\n    if (!response) {\n        return true;\n    }\n    return errorStatusCodes.has(response.status);\n}\nfunction parseCacheControl(header) {\n    const cc = {};\n    if (!header) return cc;\n    // TODO: When there is more than one value present for a given directive (e.g., two Expires header fields, multiple Cache-Control: max-age directives),\n    // the directive's value is considered invalid. Caches are encouraged to consider responses that have invalid freshness information to be stale\n    const parts = header.trim().split(/\\s*,\\s*/); // TODO: lame parsing\n    for (const part of parts){\n        const [k, v] = part.split(/\\s*=\\s*/, 2);\n        cc[k] = v === undefined ? true : v.replace(/^\"|\"$/g, \"\"); // TODO: lame unquoting\n    }\n    return cc;\n}\nfunction formatCacheControl(cc) {\n    let parts = [];\n    for(const k in cc){\n        const v = cc[k];\n        parts.push(v === true ? k : k + \"=\" + v);\n    }\n    if (!parts.length) {\n        return undefined;\n    }\n    return parts.join(\", \");\n}\nmodule.exports = class CachePolicy {\n    constructor(req, res, { shared, cacheHeuristic, immutableMinTimeToLive, ignoreCargoCult, _fromObject } = {}){\n        if (_fromObject) {\n            this._fromObject(_fromObject);\n            return;\n        }\n        if (!res || !res.headers) {\n            throw Error(\"Response headers missing\");\n        }\n        this._assertRequestHasHeaders(req);\n        this._responseTime = this.now();\n        this._isShared = shared !== false;\n        this._cacheHeuristic = undefined !== cacheHeuristic ? cacheHeuristic : 0.1; // 10% matches IE\n        this._immutableMinTtl = undefined !== immutableMinTimeToLive ? immutableMinTimeToLive : 24 * 3600 * 1000;\n        this._status = \"status\" in res ? res.status : 200;\n        this._resHeaders = res.headers;\n        this._rescc = parseCacheControl(res.headers[\"cache-control\"]);\n        this._method = \"method\" in req ? req.method : \"GET\";\n        this._url = req.url;\n        this._host = req.headers.host;\n        this._noAuthorization = !req.headers.authorization;\n        this._reqHeaders = res.headers.vary ? req.headers : null; // Don't keep all request headers if they won't be used\n        this._reqcc = parseCacheControl(req.headers[\"cache-control\"]);\n        // Assume that if someone uses legacy, non-standard uncecessary options they don't understand caching,\n        // so there's no point stricly adhering to the blindly copy&pasted directives.\n        if (ignoreCargoCult && \"pre-check\" in this._rescc && \"post-check\" in this._rescc) {\n            delete this._rescc[\"pre-check\"];\n            delete this._rescc[\"post-check\"];\n            delete this._rescc[\"no-cache\"];\n            delete this._rescc[\"no-store\"];\n            delete this._rescc[\"must-revalidate\"];\n            this._resHeaders = Object.assign({}, this._resHeaders, {\n                \"cache-control\": formatCacheControl(this._rescc)\n            });\n            delete this._resHeaders.expires;\n            delete this._resHeaders.pragma;\n        }\n        // When the Cache-Control header field is not present in a request, caches MUST consider the no-cache request pragma-directive\n        // as having the same effect as if \"Cache-Control: no-cache\" were present (see Section 5.2.1).\n        if (res.headers[\"cache-control\"] == null && /no-cache/.test(res.headers.pragma)) {\n            this._rescc[\"no-cache\"] = true;\n        }\n    }\n    now() {\n        return Date.now();\n    }\n    storable() {\n        // The \"no-store\" request directive indicates that a cache MUST NOT store any part of either this request or any response to it.\n        return !!(!this._reqcc[\"no-store\"] && // A cache MUST NOT store a response to any request, unless:\n        // The request method is understood by the cache and defined as being cacheable, and\n        (\"GET\" === this._method || \"HEAD\" === this._method || \"POST\" === this._method && this._hasExplicitExpiration()) && // the response status code is understood by the cache, and\n        understoodStatuses.has(this._status) && // the \"no-store\" cache directive does not appear in request or response header fields, and\n        !this._rescc[\"no-store\"] && // the \"private\" response directive does not appear in the response, if the cache is shared, and\n        (!this._isShared || !this._rescc.private) && // the Authorization header field does not appear in the request, if the cache is shared,\n        (!this._isShared || this._noAuthorization || this._allowsStoringAuthenticated()) && // the response either:\n        // contains an Expires header field, or\n        (this._resHeaders.expires || // contains a max-age response directive, or\n        // contains a s-maxage response directive and the cache is shared, or\n        // contains a public response directive.\n        this._rescc[\"max-age\"] || this._isShared && this._rescc[\"s-maxage\"] || this._rescc.public || // has a status code that is defined as cacheable by default\n        statusCodeCacheableByDefault.has(this._status)));\n    }\n    _hasExplicitExpiration() {\n        // 4.2.1 Calculating Freshness Lifetime\n        return this._isShared && this._rescc[\"s-maxage\"] || this._rescc[\"max-age\"] || this._resHeaders.expires;\n    }\n    _assertRequestHasHeaders(req) {\n        if (!req || !req.headers) {\n            throw Error(\"Request headers missing\");\n        }\n    }\n    satisfiesWithoutRevalidation(req) {\n        this._assertRequestHasHeaders(req);\n        // When presented with a request, a cache MUST NOT reuse a stored response, unless:\n        // the presented request does not contain the no-cache pragma (Section 5.4), nor the no-cache cache directive,\n        // unless the stored response is successfully validated (Section 4.3), and\n        const requestCC = parseCacheControl(req.headers[\"cache-control\"]);\n        if (requestCC[\"no-cache\"] || /no-cache/.test(req.headers.pragma)) {\n            return false;\n        }\n        if (requestCC[\"max-age\"] && this.age() > requestCC[\"max-age\"]) {\n            return false;\n        }\n        if (requestCC[\"min-fresh\"] && this.timeToLive() < 1000 * requestCC[\"min-fresh\"]) {\n            return false;\n        }\n        // the stored response is either:\n        // fresh, or allowed to be served stale\n        if (this.stale()) {\n            const allowsStale = requestCC[\"max-stale\"] && !this._rescc[\"must-revalidate\"] && (true === requestCC[\"max-stale\"] || requestCC[\"max-stale\"] > this.age() - this.maxAge());\n            if (!allowsStale) {\n                return false;\n            }\n        }\n        return this._requestMatches(req, false);\n    }\n    _requestMatches(req, allowHeadMethod) {\n        // The presented effective request URI and that of the stored response match, and\n        return (!this._url || this._url === req.url) && this._host === req.headers.host && // the request method associated with the stored response allows it to be used for the presented request, and\n        (!req.method || this._method === req.method || allowHeadMethod && \"HEAD\" === req.method) && // selecting header fields nominated by the stored response (if any) match those presented, and\n        this._varyMatches(req);\n    }\n    _allowsStoringAuthenticated() {\n        //  following Cache-Control response directives (Section 5.2.2) have such an effect: must-revalidate, public, and s-maxage.\n        return this._rescc[\"must-revalidate\"] || this._rescc.public || this._rescc[\"s-maxage\"];\n    }\n    _varyMatches(req) {\n        if (!this._resHeaders.vary) {\n            return true;\n        }\n        // A Vary header field-value of \"*\" always fails to match\n        if (this._resHeaders.vary === \"*\") {\n            return false;\n        }\n        const fields = this._resHeaders.vary.trim().toLowerCase().split(/\\s*,\\s*/);\n        for (const name of fields){\n            if (req.headers[name] !== this._reqHeaders[name]) return false;\n        }\n        return true;\n    }\n    _copyWithoutHopByHopHeaders(inHeaders) {\n        const headers = {};\n        for(const name in inHeaders){\n            if (hopByHopHeaders[name]) continue;\n            headers[name] = inHeaders[name];\n        }\n        // 9.1.  Connection\n        if (inHeaders.connection) {\n            const tokens = inHeaders.connection.trim().split(/\\s*,\\s*/);\n            for (const name of tokens){\n                delete headers[name];\n            }\n        }\n        if (headers.warning) {\n            const warnings = headers.warning.split(/,/).filter((warning)=>{\n                return !/^\\s*1[0-9][0-9]/.test(warning);\n            });\n            if (!warnings.length) {\n                delete headers.warning;\n            } else {\n                headers.warning = warnings.join(\",\").trim();\n            }\n        }\n        return headers;\n    }\n    responseHeaders() {\n        const headers = this._copyWithoutHopByHopHeaders(this._resHeaders);\n        const age = this.age();\n        // A cache SHOULD generate 113 warning if it heuristically chose a freshness\n        // lifetime greater than 24 hours and the response's age is greater than 24 hours.\n        if (age > 3600 * 24 && !this._hasExplicitExpiration() && this.maxAge() > 3600 * 24) {\n            headers.warning = (headers.warning ? `${headers.warning}, ` : \"\") + '113 - \"rfc7234 5.5.4\"';\n        }\n        headers.age = `${Math.round(age)}`;\n        headers.date = new Date(this.now()).toUTCString();\n        return headers;\n    }\n    /**\n     * Value of the Date response header or current time if Date was invalid\n     * @return timestamp\n     */ date() {\n        const serverDate = Date.parse(this._resHeaders.date);\n        if (isFinite(serverDate)) {\n            return serverDate;\n        }\n        return this._responseTime;\n    }\n    /**\n     * Value of the Age header, in seconds, updated for the current time.\n     * May be fractional.\n     *\n     * @return Number\n     */ age() {\n        let age = this._ageValue();\n        const residentTime = (this.now() - this._responseTime) / 1000;\n        return age + residentTime;\n    }\n    _ageValue() {\n        return toNumberOrZero(this._resHeaders.age);\n    }\n    /**\n     * Value of applicable max-age (or heuristic equivalent) in seconds. This counts since response's `Date`.\n     *\n     * For an up-to-date value, see `timeToLive()`.\n     *\n     * @return Number\n     */ maxAge() {\n        if (!this.storable() || this._rescc[\"no-cache\"]) {\n            return 0;\n        }\n        // Shared responses with cookies are cacheable according to the RFC, but IMHO it'd be unwise to do so by default\n        // so this implementation requires explicit opt-in via public header\n        if (this._isShared && this._resHeaders[\"set-cookie\"] && !this._rescc.public && !this._rescc.immutable) {\n            return 0;\n        }\n        if (this._resHeaders.vary === \"*\") {\n            return 0;\n        }\n        if (this._isShared) {\n            if (this._rescc[\"proxy-revalidate\"]) {\n                return 0;\n            }\n            // if a response includes the s-maxage directive, a shared cache recipient MUST ignore the Expires field.\n            if (this._rescc[\"s-maxage\"]) {\n                return toNumberOrZero(this._rescc[\"s-maxage\"]);\n            }\n        }\n        // If a response includes a Cache-Control field with the max-age directive, a recipient MUST ignore the Expires field.\n        if (this._rescc[\"max-age\"]) {\n            return toNumberOrZero(this._rescc[\"max-age\"]);\n        }\n        const defaultMinTtl = this._rescc.immutable ? this._immutableMinTtl : 0;\n        const serverDate = this.date();\n        if (this._resHeaders.expires) {\n            const expires = Date.parse(this._resHeaders.expires);\n            // A cache recipient MUST interpret invalid date formats, especially the value \"0\", as representing a time in the past (i.e., \"already expired\").\n            if (Number.isNaN(expires) || expires < serverDate) {\n                return 0;\n            }\n            return Math.max(defaultMinTtl, (expires - serverDate) / 1000);\n        }\n        if (this._resHeaders[\"last-modified\"]) {\n            const lastModified = Date.parse(this._resHeaders[\"last-modified\"]);\n            if (isFinite(lastModified) && serverDate > lastModified) {\n                return Math.max(defaultMinTtl, (serverDate - lastModified) / 1000 * this._cacheHeuristic);\n            }\n        }\n        return defaultMinTtl;\n    }\n    timeToLive() {\n        const age = this.maxAge() - this.age();\n        const staleIfErrorAge = age + toNumberOrZero(this._rescc[\"stale-if-error\"]);\n        const staleWhileRevalidateAge = age + toNumberOrZero(this._rescc[\"stale-while-revalidate\"]);\n        return Math.max(0, age, staleIfErrorAge, staleWhileRevalidateAge) * 1000;\n    }\n    stale() {\n        return this.maxAge() <= this.age();\n    }\n    _useStaleIfError() {\n        return this.maxAge() + toNumberOrZero(this._rescc[\"stale-if-error\"]) > this.age();\n    }\n    useStaleWhileRevalidate() {\n        return this.maxAge() + toNumberOrZero(this._rescc[\"stale-while-revalidate\"]) > this.age();\n    }\n    static fromObject(obj) {\n        return new this(undefined, undefined, {\n            _fromObject: obj\n        });\n    }\n    _fromObject(obj) {\n        if (this._responseTime) throw Error(\"Reinitialized\");\n        if (!obj || obj.v !== 1) throw Error(\"Invalid serialization\");\n        this._responseTime = obj.t;\n        this._isShared = obj.sh;\n        this._cacheHeuristic = obj.ch;\n        this._immutableMinTtl = obj.imm !== undefined ? obj.imm : 24 * 3600 * 1000;\n        this._status = obj.st;\n        this._resHeaders = obj.resh;\n        this._rescc = obj.rescc;\n        this._method = obj.m;\n        this._url = obj.u;\n        this._host = obj.h;\n        this._noAuthorization = obj.a;\n        this._reqHeaders = obj.reqh;\n        this._reqcc = obj.reqcc;\n    }\n    toObject() {\n        return {\n            v: 1,\n            t: this._responseTime,\n            sh: this._isShared,\n            ch: this._cacheHeuristic,\n            imm: this._immutableMinTtl,\n            st: this._status,\n            resh: this._resHeaders,\n            rescc: this._rescc,\n            m: this._method,\n            u: this._url,\n            h: this._host,\n            a: this._noAuthorization,\n            reqh: this._reqHeaders,\n            reqcc: this._reqcc\n        };\n    }\n    /**\n     * Headers for sending to the origin server to revalidate stale response.\n     * Allows server to return 304 to allow reuse of the previous response.\n     *\n     * Hop by hop headers are always stripped.\n     * Revalidation headers may be added or removed, depending on request.\n     */ revalidationHeaders(incomingReq) {\n        this._assertRequestHasHeaders(incomingReq);\n        const headers = this._copyWithoutHopByHopHeaders(incomingReq.headers);\n        // This implementation does not understand range requests\n        delete headers[\"if-range\"];\n        if (!this._requestMatches(incomingReq, true) || !this.storable()) {\n            // revalidation allowed via HEAD\n            // not for the same resource, or wasn't allowed to be cached anyway\n            delete headers[\"if-none-match\"];\n            delete headers[\"if-modified-since\"];\n            return headers;\n        }\n        /* MUST send that entity-tag in any cache validation request (using If-Match or If-None-Match) if an entity-tag has been provided by the origin server. */ if (this._resHeaders.etag) {\n            headers[\"if-none-match\"] = headers[\"if-none-match\"] ? `${headers[\"if-none-match\"]}, ${this._resHeaders.etag}` : this._resHeaders.etag;\n        }\n        // Clients MAY issue simple (non-subrange) GET requests with either weak validators or strong validators. Clients MUST NOT use weak validators in other forms of request.\n        const forbidsWeakValidators = headers[\"accept-ranges\"] || headers[\"if-match\"] || headers[\"if-unmodified-since\"] || this._method && this._method != \"GET\";\n        /* SHOULD send the Last-Modified value in non-subrange cache validation requests (using If-Modified-Since) if only a Last-Modified value has been provided by the origin server.\n        Note: This implementation does not understand partial responses (206) */ if (forbidsWeakValidators) {\n            delete headers[\"if-modified-since\"];\n            if (headers[\"if-none-match\"]) {\n                const etags = headers[\"if-none-match\"].split(/,/).filter((etag)=>{\n                    return !/^\\s*W\\//.test(etag);\n                });\n                if (!etags.length) {\n                    delete headers[\"if-none-match\"];\n                } else {\n                    headers[\"if-none-match\"] = etags.join(\",\").trim();\n                }\n            }\n        } else if (this._resHeaders[\"last-modified\"] && !headers[\"if-modified-since\"]) {\n            headers[\"if-modified-since\"] = this._resHeaders[\"last-modified\"];\n        }\n        return headers;\n    }\n    /**\n     * Creates new CachePolicy with information combined from the previews response,\n     * and the new revalidation response.\n     *\n     * Returns {policy, modified} where modified is a boolean indicating\n     * whether the response body has been modified, and old cached body can't be used.\n     *\n     * @return {Object} {policy: CachePolicy, modified: Boolean}\n     */ revalidatedPolicy(request, response) {\n        this._assertRequestHasHeaders(request);\n        if (this._useStaleIfError() && isErrorResponse(response)) {\n            return {\n                modified: false,\n                matches: false,\n                policy: this\n            };\n        }\n        if (!response || !response.headers) {\n            throw Error(\"Response headers missing\");\n        }\n        // These aren't going to be supported exactly, since one CachePolicy object\n        // doesn't know about all the other cached objects.\n        let matches = false;\n        if (response.status !== undefined && response.status != 304) {\n            matches = false;\n        } else if (response.headers.etag && !/^\\s*W\\//.test(response.headers.etag)) {\n            // \"All of the stored responses with the same strong validator are selected.\n            // If none of the stored responses contain the same strong validator,\n            // then the cache MUST NOT use the new response to update any stored responses.\"\n            matches = this._resHeaders.etag && this._resHeaders.etag.replace(/^\\s*W\\//, \"\") === response.headers.etag;\n        } else if (this._resHeaders.etag && response.headers.etag) {\n            // \"If the new response contains a weak validator and that validator corresponds\n            // to one of the cache's stored responses,\n            // then the most recent of those matching stored responses is selected for update.\"\n            matches = this._resHeaders.etag.replace(/^\\s*W\\//, \"\") === response.headers.etag.replace(/^\\s*W\\//, \"\");\n        } else if (this._resHeaders[\"last-modified\"]) {\n            matches = this._resHeaders[\"last-modified\"] === response.headers[\"last-modified\"];\n        } else {\n            // If the new response does not include any form of validator (such as in the case where\n            // a client generates an If-Modified-Since request from a source other than the Last-Modified\n            // response header field), and there is only one stored response, and that stored response also\n            // lacks a validator, then that stored response is selected for update.\n            if (!this._resHeaders.etag && !this._resHeaders[\"last-modified\"] && !response.headers.etag && !response.headers[\"last-modified\"]) {\n                matches = true;\n            }\n        }\n        if (!matches) {\n            return {\n                policy: new this.constructor(request, response),\n                // Client receiving 304 without body, even if it's invalid/mismatched has no option\n                // but to reuse a cached body. We don't have a good way to tell clients to do\n                // error recovery in such case.\n                modified: response.status != 304,\n                matches: false\n            };\n        }\n        // use other header fields provided in the 304 (Not Modified) response to replace all instances\n        // of the corresponding header fields in the stored response.\n        const headers = {};\n        for(const k in this._resHeaders){\n            headers[k] = k in response.headers && !excludedFromRevalidationUpdate[k] ? response.headers[k] : this._resHeaders[k];\n        }\n        const newResponse = Object.assign({}, response, {\n            status: this._status,\n            method: this._method,\n            headers\n        });\n        return {\n            policy: new this.constructor(request, newResponse, {\n                shared: this._isShared,\n                cacheHeuristic: this._cacheHeuristic,\n                immutableMinTimeToLive: this._immutableMinTtl\n            }),\n            modified: false,\n            matches: true\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http-cache-semantics/index.js\n");

/***/ })

};
;