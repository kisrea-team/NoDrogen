"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/http2-wrapper";
exports.ids = ["vendor-chunks/http2-wrapper"];
exports.modules = {

/***/ "(rsc)/./node_modules/http2-wrapper/source/agent.js":
/*!****************************************************!*\
  !*** ./node_modules/http2-wrapper/source/agent.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// See https://github.com/facebook/jest/issues/2549\n// eslint-disable-next-line node/prefer-global/url\nconst { URL } = __webpack_require__(/*! url */ \"url\");\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst QuickLRU = __webpack_require__(/*! quick-lru */ \"(rsc)/./node_modules/quick-lru/index.js\");\nconst delayAsyncDestroy = __webpack_require__(/*! ./utils/delay-async-destroy.js */ \"(rsc)/./node_modules/http2-wrapper/source/utils/delay-async-destroy.js\");\nconst kCurrentStreamCount = Symbol(\"currentStreamCount\");\nconst kRequest = Symbol(\"request\");\nconst kOriginSet = Symbol(\"cachedOriginSet\");\nconst kGracefullyClosing = Symbol(\"gracefullyClosing\");\nconst kLength = Symbol(\"length\");\nconst nameKeys = [\n    // Not an Agent option actually\n    \"createConnection\",\n    // `http2.connect()` options\n    \"maxDeflateDynamicTableSize\",\n    \"maxSettings\",\n    \"maxSessionMemory\",\n    \"maxHeaderListPairs\",\n    \"maxOutstandingPings\",\n    \"maxReservedRemoteStreams\",\n    \"maxSendHeaderBlockLength\",\n    \"paddingStrategy\",\n    \"peerMaxConcurrentStreams\",\n    \"settings\",\n    // `tls.connect()` source options\n    \"family\",\n    \"localAddress\",\n    \"rejectUnauthorized\",\n    // `tls.connect()` secure context options\n    \"pskCallback\",\n    \"minDHSize\",\n    // `tls.connect()` destination options\n    // - `servername` is automatically validated, skip it\n    // - `host` and `port` just describe the destination server,\n    \"path\",\n    \"socket\",\n    // `tls.createSecureContext()` options\n    \"ca\",\n    \"cert\",\n    \"sigalgs\",\n    \"ciphers\",\n    \"clientCertEngine\",\n    \"crl\",\n    \"dhparam\",\n    \"ecdhCurve\",\n    \"honorCipherOrder\",\n    \"key\",\n    \"privateKeyEngine\",\n    \"privateKeyIdentifier\",\n    \"maxVersion\",\n    \"minVersion\",\n    \"pfx\",\n    \"secureOptions\",\n    \"secureProtocol\",\n    \"sessionIdContext\",\n    \"ticketKeys\"\n];\nconst getSortedIndex = (array, value, compare)=>{\n    let low = 0;\n    let high = array.length;\n    while(low < high){\n        const mid = low + high >>> 1;\n        if (compare(array[mid], value)) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n};\nconst compareSessions = (a, b)=>a.remoteSettings.maxConcurrentStreams > b.remoteSettings.maxConcurrentStreams;\n// See https://tools.ietf.org/html/rfc8336\nconst closeCoveredSessions = (where, session)=>{\n    // Clients SHOULD NOT emit new requests on any connection whose Origin\n    // Set is a proper subset of another connection's Origin Set, and they\n    // SHOULD close it once all outstanding requests are satisfied.\n    for(let index = 0; index < where.length; index++){\n        const coveredSession = where[index];\n        if (// Unfortunately `.every()` returns true for an empty array\n        coveredSession[kOriginSet].length > 0 && coveredSession[kOriginSet].length < session[kOriginSet].length && coveredSession[kOriginSet].every((origin)=>session[kOriginSet].includes(origin)) && coveredSession[kCurrentStreamCount] + session[kCurrentStreamCount] <= session.remoteSettings.maxConcurrentStreams) {\n            // This allows pending requests to finish and prevents making new requests.\n            gracefullyClose(coveredSession);\n        }\n    }\n};\n// This is basically inverted `closeCoveredSessions(...)`.\nconst closeSessionIfCovered = (where, coveredSession)=>{\n    for(let index = 0; index < where.length; index++){\n        const session = where[index];\n        if (coveredSession[kOriginSet].length > 0 && coveredSession[kOriginSet].length < session[kOriginSet].length && coveredSession[kOriginSet].every((origin)=>session[kOriginSet].includes(origin)) && coveredSession[kCurrentStreamCount] + session[kCurrentStreamCount] <= session.remoteSettings.maxConcurrentStreams) {\n            gracefullyClose(coveredSession);\n            return true;\n        }\n    }\n    return false;\n};\nconst gracefullyClose = (session)=>{\n    session[kGracefullyClosing] = true;\n    if (session[kCurrentStreamCount] === 0) {\n        session.close();\n    }\n};\nclass Agent extends EventEmitter {\n    constructor({ timeout = 0, maxSessions = Number.POSITIVE_INFINITY, maxEmptySessions = 10, maxCachedTlsSessions = 100 } = {}){\n        super();\n        // SESSIONS[NORMALIZED_OPTIONS] = [];\n        this.sessions = {};\n        // The queue for creating new sessions. It looks like this:\n        // QUEUE[NORMALIZED_OPTIONS][NORMALIZED_ORIGIN] = ENTRY_FUNCTION\n        //\n        // It's faster when there are many origins. If there's only one, then QUEUE[`${options}:${origin}`] is faster.\n        // I guess object creation / deletion is causing the slowdown.\n        //\n        // The entry function has `listeners`, `completed` and `destroyed` properties.\n        // `listeners` is an array of objects containing `resolve` and `reject` functions.\n        // `completed` is a boolean. It's set to true after ENTRY_FUNCTION is executed.\n        // `destroyed` is a boolean. If it's set to true, the session will be destroyed if hasn't connected yet.\n        this.queue = {};\n        // Each session will use this timeout value.\n        this.timeout = timeout;\n        // Max sessions in total\n        this.maxSessions = maxSessions;\n        // Max empty sessions in total\n        this.maxEmptySessions = maxEmptySessions;\n        this._emptySessionCount = 0;\n        this._sessionCount = 0;\n        // We don't support push streams by default.\n        this.settings = {\n            enablePush: false,\n            initialWindowSize: 1024 * 1024 * 32 // 32MB, see https://github.com/nodejs/node/issues/38426\n        };\n        // Reusing TLS sessions increases performance.\n        this.tlsSessionCache = new QuickLRU({\n            maxSize: maxCachedTlsSessions\n        });\n    }\n    get protocol() {\n        return \"https:\";\n    }\n    normalizeOptions(options) {\n        let normalized = \"\";\n        for(let index = 0; index < nameKeys.length; index++){\n            const key = nameKeys[index];\n            normalized += \":\";\n            if (options && options[key] !== undefined) {\n                normalized += options[key];\n            }\n        }\n        return normalized;\n    }\n    _processQueue() {\n        if (this._sessionCount >= this.maxSessions) {\n            this.closeEmptySessions(this.maxSessions - this._sessionCount + 1);\n            return;\n        }\n        // eslint-disable-next-line guard-for-in\n        for(const normalizedOptions in this.queue){\n            // eslint-disable-next-line guard-for-in\n            for(const normalizedOrigin in this.queue[normalizedOptions]){\n                const item = this.queue[normalizedOptions][normalizedOrigin];\n                // The entry function can be run only once.\n                if (!item.completed) {\n                    item.completed = true;\n                    item();\n                }\n            }\n        }\n    }\n    _isBetterSession(thisStreamCount, thatStreamCount) {\n        return thisStreamCount > thatStreamCount;\n    }\n    _accept(session, listeners, normalizedOrigin, options) {\n        let index = 0;\n        while(index < listeners.length && session[kCurrentStreamCount] < session.remoteSettings.maxConcurrentStreams){\n            // We assume `resolve(...)` calls `request(...)` *directly*,\n            // otherwise the session will get overloaded.\n            listeners[index].resolve(session);\n            index++;\n        }\n        listeners.splice(0, index);\n        if (listeners.length > 0) {\n            this.getSession(normalizedOrigin, options, listeners);\n            listeners.length = 0;\n        }\n    }\n    getSession(origin, options, listeners) {\n        return new Promise((resolve, reject)=>{\n            if (Array.isArray(listeners) && listeners.length > 0) {\n                listeners = [\n                    ...listeners\n                ];\n                // Resolve the current promise ASAP, we're just moving the listeners.\n                // They will be executed at a different time.\n                resolve();\n            } else {\n                listeners = [\n                    {\n                        resolve,\n                        reject\n                    }\n                ];\n            }\n            try {\n                // Parse origin\n                if (typeof origin === \"string\") {\n                    origin = new URL(origin);\n                } else if (!(origin instanceof URL)) {\n                    throw new TypeError(\"The `origin` argument needs to be a string or an URL object\");\n                }\n                if (options) {\n                    // Validate servername\n                    const { servername } = options;\n                    const { hostname } = origin;\n                    if (servername && hostname !== servername) {\n                        throw new Error(`Origin ${hostname} differs from servername ${servername}`);\n                    }\n                }\n            } catch (error) {\n                for(let index = 0; index < listeners.length; index++){\n                    listeners[index].reject(error);\n                }\n                return;\n            }\n            const normalizedOptions = this.normalizeOptions(options);\n            const normalizedOrigin = origin.origin;\n            if (normalizedOptions in this.sessions) {\n                const sessions = this.sessions[normalizedOptions];\n                let maxConcurrentStreams = -1;\n                let currentStreamsCount = -1;\n                let optimalSession;\n                // We could just do this.sessions[normalizedOptions].find(...) but that isn't optimal.\n                // Additionally, we are looking for session which has biggest current pending streams count.\n                //\n                // |------------| |------------| |------------| |------------|\n                // | Session: A | | Session: B | | Session: C | | Session: D |\n                // | Pending: 5 |-| Pending: 8 |-| Pending: 9 |-| Pending: 4 |\n                // | Max:    10 | | Max:    10 | | Max:     9 | | Max:     5 |\n                // |------------| |------------| |------------| |------------|\n                //                     ^\n                //                     |\n                //     pick this one  --\n                //\n                for(let index = 0; index < sessions.length; index++){\n                    const session = sessions[index];\n                    const sessionMaxConcurrentStreams = session.remoteSettings.maxConcurrentStreams;\n                    if (sessionMaxConcurrentStreams < maxConcurrentStreams) {\n                        break;\n                    }\n                    if (!session[kOriginSet].includes(normalizedOrigin)) {\n                        continue;\n                    }\n                    const sessionCurrentStreamsCount = session[kCurrentStreamCount];\n                    if (sessionCurrentStreamsCount >= sessionMaxConcurrentStreams || session[kGracefullyClosing] || session.destroyed) {\n                        continue;\n                    }\n                    // We only need set this once.\n                    if (!optimalSession) {\n                        maxConcurrentStreams = sessionMaxConcurrentStreams;\n                    }\n                    // Either get the session which has biggest current stream count or the lowest.\n                    if (this._isBetterSession(sessionCurrentStreamsCount, currentStreamsCount)) {\n                        optimalSession = session;\n                        currentStreamsCount = sessionCurrentStreamsCount;\n                    }\n                }\n                if (optimalSession) {\n                    this._accept(optimalSession, listeners, normalizedOrigin, options);\n                    return;\n                }\n            }\n            if (normalizedOptions in this.queue) {\n                if (normalizedOrigin in this.queue[normalizedOptions]) {\n                    // There's already an item in the queue, just attach ourselves to it.\n                    this.queue[normalizedOptions][normalizedOrigin].listeners.push(...listeners);\n                    return;\n                }\n            } else {\n                this.queue[normalizedOptions] = {\n                    [kLength]: 0\n                };\n            }\n            // The entry must be removed from the queue IMMEDIATELY when:\n            // 1. the session connects successfully,\n            // 2. an error occurs.\n            const removeFromQueue = ()=>{\n                // Our entry can be replaced. We cannot remove the new one.\n                if (normalizedOptions in this.queue && this.queue[normalizedOptions][normalizedOrigin] === entry) {\n                    delete this.queue[normalizedOptions][normalizedOrigin];\n                    if (--this.queue[normalizedOptions][kLength] === 0) {\n                        delete this.queue[normalizedOptions];\n                    }\n                }\n            };\n            // The main logic is here\n            const entry = async ()=>{\n                this._sessionCount++;\n                const name = `${normalizedOrigin}:${normalizedOptions}`;\n                let receivedSettings = false;\n                let socket;\n                try {\n                    const computedOptions = {\n                        ...options\n                    };\n                    if (computedOptions.settings === undefined) {\n                        computedOptions.settings = this.settings;\n                    }\n                    if (computedOptions.session === undefined) {\n                        computedOptions.session = this.tlsSessionCache.get(name);\n                    }\n                    const createConnection = computedOptions.createConnection || this.createConnection;\n                    // A hacky workaround to enable async `createConnection`\n                    socket = await createConnection.call(this, origin, computedOptions);\n                    computedOptions.createConnection = ()=>socket;\n                    const session = http2.connect(origin, computedOptions);\n                    session[kCurrentStreamCount] = 0;\n                    session[kGracefullyClosing] = false;\n                    // Node.js return https://false:443 instead of https://1.1.1.1:443\n                    const getOriginSet = ()=>{\n                        const { socket } = session;\n                        let originSet;\n                        if (socket.servername === false) {\n                            socket.servername = socket.remoteAddress;\n                            originSet = session.originSet;\n                            socket.servername = false;\n                        } else {\n                            originSet = session.originSet;\n                        }\n                        return originSet;\n                    };\n                    const isFree = ()=>session[kCurrentStreamCount] < session.remoteSettings.maxConcurrentStreams;\n                    session.socket.once(\"session\", (tlsSession)=>{\n                        this.tlsSessionCache.set(name, tlsSession);\n                    });\n                    session.once(\"error\", (error)=>{\n                        // Listeners are empty when the session successfully connected.\n                        for(let index = 0; index < listeners.length; index++){\n                            listeners[index].reject(error);\n                        }\n                        // The connection got broken, purge the cache.\n                        this.tlsSessionCache.delete(name);\n                    });\n                    session.setTimeout(this.timeout, ()=>{\n                        // Terminates all streams owned by this session.\n                        session.destroy();\n                    });\n                    session.once(\"close\", ()=>{\n                        this._sessionCount--;\n                        if (receivedSettings) {\n                            // Assumes session `close` is emitted after request `close`\n                            this._emptySessionCount--;\n                            // This cannot be moved to the stream logic,\n                            // because there may be a session that hadn't made a single request.\n                            const where = this.sessions[normalizedOptions];\n                            if (where.length === 1) {\n                                delete this.sessions[normalizedOptions];\n                            } else {\n                                where.splice(where.indexOf(session), 1);\n                            }\n                        } else {\n                            // Broken connection\n                            removeFromQueue();\n                            const error = new Error(\"Session closed without receiving a SETTINGS frame\");\n                            error.code = \"HTTP2WRAPPER_NOSETTINGS\";\n                            for(let index = 0; index < listeners.length; index++){\n                                listeners[index].reject(error);\n                            }\n                        }\n                        // There may be another session awaiting.\n                        this._processQueue();\n                    });\n                    // Iterates over the queue and processes listeners.\n                    const processListeners = ()=>{\n                        const queue = this.queue[normalizedOptions];\n                        if (!queue) {\n                            return;\n                        }\n                        const originSet = session[kOriginSet];\n                        for(let index = 0; index < originSet.length; index++){\n                            const origin = originSet[index];\n                            if (origin in queue) {\n                                const { listeners, completed } = queue[origin];\n                                let index = 0;\n                                // Prevents session overloading.\n                                while(index < listeners.length && isFree()){\n                                    // We assume `resolve(...)` calls `request(...)` *directly*,\n                                    // otherwise the session will get overloaded.\n                                    listeners[index].resolve(session);\n                                    index++;\n                                }\n                                queue[origin].listeners.splice(0, index);\n                                if (queue[origin].listeners.length === 0 && !completed) {\n                                    delete queue[origin];\n                                    if (--queue[kLength] === 0) {\n                                        delete this.queue[normalizedOptions];\n                                        break;\n                                    }\n                                }\n                                // We're no longer free, no point in continuing.\n                                if (!isFree()) {\n                                    break;\n                                }\n                            }\n                        }\n                    };\n                    // The Origin Set cannot shrink. No need to check if it suddenly became covered by another one.\n                    session.on(\"origin\", ()=>{\n                        session[kOriginSet] = getOriginSet() || [];\n                        session[kGracefullyClosing] = false;\n                        closeSessionIfCovered(this.sessions[normalizedOptions], session);\n                        if (session[kGracefullyClosing] || !isFree()) {\n                            return;\n                        }\n                        processListeners();\n                        if (!isFree()) {\n                            return;\n                        }\n                        // Close covered sessions (if possible).\n                        closeCoveredSessions(this.sessions[normalizedOptions], session);\n                    });\n                    session.once(\"remoteSettings\", ()=>{\n                        // The Agent could have been destroyed already.\n                        if (entry.destroyed) {\n                            const error = new Error(\"Agent has been destroyed\");\n                            for(let index = 0; index < listeners.length; index++){\n                                listeners[index].reject(error);\n                            }\n                            session.destroy();\n                            return;\n                        }\n                        // See https://github.com/nodejs/node/issues/38426\n                        if (session.setLocalWindowSize) {\n                            session.setLocalWindowSize(1024 * 1024 * 4); // 4 MB\n                        }\n                        session[kOriginSet] = getOriginSet() || [];\n                        if (session.socket.encrypted) {\n                            const mainOrigin = session[kOriginSet][0];\n                            if (mainOrigin !== normalizedOrigin) {\n                                const error = new Error(`Requested origin ${normalizedOrigin} does not match server ${mainOrigin}`);\n                                for(let index = 0; index < listeners.length; index++){\n                                    listeners[index].reject(error);\n                                }\n                                session.destroy();\n                                return;\n                            }\n                        }\n                        removeFromQueue();\n                        {\n                            const where = this.sessions;\n                            if (normalizedOptions in where) {\n                                const sessions = where[normalizedOptions];\n                                sessions.splice(getSortedIndex(sessions, session, compareSessions), 0, session);\n                            } else {\n                                where[normalizedOptions] = [\n                                    session\n                                ];\n                            }\n                        }\n                        receivedSettings = true;\n                        this._emptySessionCount++;\n                        this.emit(\"session\", session);\n                        this._accept(session, listeners, normalizedOrigin, options);\n                        if (session[kCurrentStreamCount] === 0 && this._emptySessionCount > this.maxEmptySessions) {\n                            this.closeEmptySessions(this._emptySessionCount - this.maxEmptySessions);\n                        }\n                        // `session.remoteSettings.maxConcurrentStreams` might get increased\n                        session.on(\"remoteSettings\", ()=>{\n                            if (!isFree()) {\n                                return;\n                            }\n                            processListeners();\n                            if (!isFree()) {\n                                return;\n                            }\n                            // In case the Origin Set changes\n                            closeCoveredSessions(this.sessions[normalizedOptions], session);\n                        });\n                    });\n                    // Shim `session.request()` in order to catch all streams\n                    session[kRequest] = session.request;\n                    session.request = (headers, streamOptions)=>{\n                        if (session[kGracefullyClosing]) {\n                            throw new Error(\"The session is gracefully closing. No new streams are allowed.\");\n                        }\n                        const stream = session[kRequest](headers, streamOptions);\n                        // The process won't exit until the session is closed or all requests are gone.\n                        session.ref();\n                        if (session[kCurrentStreamCount]++ === 0) {\n                            this._emptySessionCount--;\n                        }\n                        stream.once(\"close\", ()=>{\n                            if (--session[kCurrentStreamCount] === 0) {\n                                this._emptySessionCount++;\n                                session.unref();\n                                if (this._emptySessionCount > this.maxEmptySessions || session[kGracefullyClosing]) {\n                                    session.close();\n                                    return;\n                                }\n                            }\n                            if (session.destroyed || session.closed) {\n                                return;\n                            }\n                            if (isFree() && !closeSessionIfCovered(this.sessions[normalizedOptions], session)) {\n                                closeCoveredSessions(this.sessions[normalizedOptions], session);\n                                processListeners();\n                                if (session[kCurrentStreamCount] === 0) {\n                                    this._processQueue();\n                                }\n                            }\n                        });\n                        return stream;\n                    };\n                } catch (error) {\n                    removeFromQueue();\n                    this._sessionCount--;\n                    for(let index = 0; index < listeners.length; index++){\n                        listeners[index].reject(error);\n                    }\n                }\n            };\n            entry.listeners = listeners;\n            entry.completed = false;\n            entry.destroyed = false;\n            this.queue[normalizedOptions][normalizedOrigin] = entry;\n            this.queue[normalizedOptions][kLength]++;\n            this._processQueue();\n        });\n    }\n    request(origin, options, headers, streamOptions) {\n        return new Promise((resolve, reject)=>{\n            this.getSession(origin, options, [\n                {\n                    reject,\n                    resolve: (session)=>{\n                        try {\n                            const stream = session.request(headers, streamOptions);\n                            // Do not throw before `request(...)` has been awaited\n                            delayAsyncDestroy(stream);\n                            resolve(stream);\n                        } catch (error) {\n                            reject(error);\n                        }\n                    }\n                }\n            ]);\n        });\n    }\n    async createConnection(origin, options) {\n        return Agent.connect(origin, options);\n    }\n    static connect(origin, options) {\n        options.ALPNProtocols = [\n            \"h2\"\n        ];\n        const port = origin.port || 443;\n        const host = origin.hostname;\n        if (typeof options.servername === \"undefined\") {\n            options.servername = host;\n        }\n        const socket = tls.connect(port, host, options);\n        if (options.socket) {\n            socket._peername = {\n                family: undefined,\n                address: undefined,\n                port\n            };\n        }\n        return socket;\n    }\n    closeEmptySessions(maxCount = Number.POSITIVE_INFINITY) {\n        let closedCount = 0;\n        const { sessions } = this;\n        // eslint-disable-next-line guard-for-in\n        for(const key in sessions){\n            const thisSessions = sessions[key];\n            for(let index = 0; index < thisSessions.length; index++){\n                const session = thisSessions[index];\n                if (session[kCurrentStreamCount] === 0) {\n                    closedCount++;\n                    session.close();\n                    if (closedCount >= maxCount) {\n                        return closedCount;\n                    }\n                }\n            }\n        }\n        return closedCount;\n    }\n    destroy(reason) {\n        const { sessions, queue } = this;\n        // eslint-disable-next-line guard-for-in\n        for(const key in sessions){\n            const thisSessions = sessions[key];\n            for(let index = 0; index < thisSessions.length; index++){\n                thisSessions[index].destroy(reason);\n            }\n        }\n        // eslint-disable-next-line guard-for-in\n        for(const normalizedOptions in queue){\n            const entries = queue[normalizedOptions];\n            // eslint-disable-next-line guard-for-in\n            for(const normalizedOrigin in entries){\n                entries[normalizedOrigin].destroyed = true;\n            }\n        }\n        // New requests should NOT attach to destroyed sessions\n        this.queue = {};\n        this.tlsSessionCache.clear();\n    }\n    get emptySessionCount() {\n        return this._emptySessionCount;\n    }\n    get pendingSessionCount() {\n        return this._sessionCount - this._emptySessionCount;\n    }\n    get sessionCount() {\n        return this._sessionCount;\n    }\n}\nAgent.kCurrentStreamCount = kCurrentStreamCount;\nAgent.kGracefullyClosing = kGracefullyClosing;\nmodule.exports = {\n    Agent,\n    globalAgent: new Agent()\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http2-wrapper/source/agent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/http2-wrapper/source/auto.js":
/*!***************************************************!*\
  !*** ./node_modules/http2-wrapper/source/auto.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// See https://github.com/facebook/jest/issues/2549\n// eslint-disable-next-line node/prefer-global/url\nconst { URL, urlToHttpOptions } = __webpack_require__(/*! url */ \"url\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst resolveALPN = __webpack_require__(/*! resolve-alpn */ \"(rsc)/./node_modules/resolve-alpn/index.js\");\nconst QuickLRU = __webpack_require__(/*! quick-lru */ \"(rsc)/./node_modules/quick-lru/index.js\");\nconst { Agent, globalAgent } = __webpack_require__(/*! ./agent.js */ \"(rsc)/./node_modules/http2-wrapper/source/agent.js\");\nconst Http2ClientRequest = __webpack_require__(/*! ./client-request.js */ \"(rsc)/./node_modules/http2-wrapper/source/client-request.js\");\nconst calculateServerName = __webpack_require__(/*! ./utils/calculate-server-name.js */ \"(rsc)/./node_modules/http2-wrapper/source/utils/calculate-server-name.js\");\nconst delayAsyncDestroy = __webpack_require__(/*! ./utils/delay-async-destroy.js */ \"(rsc)/./node_modules/http2-wrapper/source/utils/delay-async-destroy.js\");\nconst cache = new QuickLRU({\n    maxSize: 100\n});\nconst queue = new Map();\nconst installSocket = (agent, socket, options)=>{\n    socket._httpMessage = {\n        shouldKeepAlive: true\n    };\n    const onFree = ()=>{\n        agent.emit(\"free\", socket, options);\n    };\n    socket.on(\"free\", onFree);\n    const onClose = ()=>{\n        agent.removeSocket(socket, options);\n    };\n    socket.on(\"close\", onClose);\n    const onTimeout = ()=>{\n        const { freeSockets } = agent;\n        for (const sockets of Object.values(freeSockets)){\n            if (sockets.includes(socket)) {\n                socket.destroy();\n                return;\n            }\n        }\n    };\n    socket.on(\"timeout\", onTimeout);\n    const onRemove = ()=>{\n        agent.removeSocket(socket, options);\n        socket.off(\"close\", onClose);\n        socket.off(\"free\", onFree);\n        socket.off(\"timeout\", onTimeout);\n        socket.off(\"agentRemove\", onRemove);\n    };\n    socket.on(\"agentRemove\", onRemove);\n    agent.emit(\"free\", socket, options);\n};\nconst createResolveProtocol = (cache, queue = new Map(), connect = undefined)=>{\n    return async (options)=>{\n        const name = `${options.host}:${options.port}:${options.ALPNProtocols.sort()}`;\n        if (!cache.has(name)) {\n            if (queue.has(name)) {\n                const result = await queue.get(name);\n                return {\n                    alpnProtocol: result.alpnProtocol\n                };\n            }\n            const { path } = options;\n            options.path = options.socketPath;\n            const resultPromise = resolveALPN(options, connect);\n            queue.set(name, resultPromise);\n            try {\n                const result = await resultPromise;\n                cache.set(name, result.alpnProtocol);\n                queue.delete(name);\n                options.path = path;\n                return result;\n            } catch (error) {\n                queue.delete(name);\n                options.path = path;\n                throw error;\n            }\n        }\n        return {\n            alpnProtocol: cache.get(name)\n        };\n    };\n};\nconst defaultResolveProtocol = createResolveProtocol(cache, queue);\nmodule.exports = async (input, options, callback)=>{\n    if (typeof input === \"string\") {\n        input = urlToHttpOptions(new URL(input));\n    } else if (input instanceof URL) {\n        input = urlToHttpOptions(input);\n    } else {\n        input = {\n            ...input\n        };\n    }\n    if (typeof options === \"function\" || options === undefined) {\n        // (options, callback)\n        callback = options;\n        options = input;\n    } else {\n        // (input, options, callback)\n        options = Object.assign(input, options);\n    }\n    options.ALPNProtocols = options.ALPNProtocols || [\n        \"h2\",\n        \"http/1.1\"\n    ];\n    if (!Array.isArray(options.ALPNProtocols) || options.ALPNProtocols.length === 0) {\n        throw new Error(\"The `ALPNProtocols` option must be an Array with at least one entry\");\n    }\n    options.protocol = options.protocol || \"https:\";\n    const isHttps = options.protocol === \"https:\";\n    options.host = options.hostname || options.host || \"localhost\";\n    options.session = options.tlsSession;\n    options.servername = options.servername || calculateServerName(options.headers && options.headers.host || options.host);\n    options.port = options.port || (isHttps ? 443 : 80);\n    options._defaultAgent = isHttps ? https.globalAgent : http.globalAgent;\n    const resolveProtocol = options.resolveProtocol || defaultResolveProtocol;\n    // Note: We don't support `h2session` here\n    let { agent } = options;\n    if (agent !== undefined && agent !== false && agent.constructor.name !== \"Object\") {\n        throw new Error(\"The `options.agent` can be only an object `http`, `https` or `http2` properties\");\n    }\n    if (isHttps) {\n        options.resolveSocket = true;\n        let { socket, alpnProtocol, timeout } = await resolveProtocol(options);\n        if (timeout) {\n            if (socket) {\n                socket.destroy();\n            }\n            const error = new Error(`Timed out resolving ALPN: ${options.timeout} ms`);\n            error.code = \"ETIMEDOUT\";\n            error.ms = options.timeout;\n            throw error;\n        }\n        // We can't accept custom `createConnection` because the API is different for HTTP/2\n        if (socket && options.createConnection) {\n            socket.destroy();\n            socket = undefined;\n        }\n        delete options.resolveSocket;\n        const isHttp2 = alpnProtocol === \"h2\";\n        if (agent) {\n            agent = isHttp2 ? agent.http2 : agent.https;\n            options.agent = agent;\n        }\n        if (agent === undefined) {\n            agent = isHttp2 ? globalAgent : https.globalAgent;\n        }\n        if (socket) {\n            if (agent === false) {\n                socket.destroy();\n            } else {\n                const defaultCreateConnection = (isHttp2 ? Agent : https.Agent).prototype.createConnection;\n                if (agent.createConnection === defaultCreateConnection) {\n                    if (isHttp2) {\n                        options._reuseSocket = socket;\n                    } else {\n                        installSocket(agent, socket, options);\n                    }\n                } else {\n                    socket.destroy();\n                }\n            }\n        }\n        if (isHttp2) {\n            return delayAsyncDestroy(new Http2ClientRequest(options, callback));\n        }\n    } else if (agent) {\n        options.agent = agent.http;\n    }\n    return delayAsyncDestroy(http.request(options, callback));\n};\nmodule.exports.protocolCache = cache;\nmodule.exports.resolveProtocol = defaultResolveProtocol;\nmodule.exports.createResolveProtocol = createResolveProtocol;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http2-wrapper/source/auto.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/http2-wrapper/source/client-request.js":
/*!*************************************************************!*\
  !*** ./node_modules/http2-wrapper/source/client-request.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// See https://github.com/facebook/jest/issues/2549\n// eslint-disable-next-line node/prefer-global/url\nconst { URL, urlToHttpOptions } = __webpack_require__(/*! url */ \"url\");\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst { Writable } = __webpack_require__(/*! stream */ \"stream\");\nconst { Agent, globalAgent } = __webpack_require__(/*! ./agent.js */ \"(rsc)/./node_modules/http2-wrapper/source/agent.js\");\nconst IncomingMessage = __webpack_require__(/*! ./incoming-message.js */ \"(rsc)/./node_modules/http2-wrapper/source/incoming-message.js\");\nconst proxyEvents = __webpack_require__(/*! ./utils/proxy-events.js */ \"(rsc)/./node_modules/http2-wrapper/source/utils/proxy-events.js\");\nconst { ERR_INVALID_ARG_TYPE, ERR_INVALID_PROTOCOL, ERR_HTTP_HEADERS_SENT } = __webpack_require__(/*! ./utils/errors.js */ \"(rsc)/./node_modules/http2-wrapper/source/utils/errors.js\");\nconst validateHeaderName = __webpack_require__(/*! ./utils/validate-header-name.js */ \"(rsc)/./node_modules/http2-wrapper/source/utils/validate-header-name.js\");\nconst validateHeaderValue = __webpack_require__(/*! ./utils/validate-header-value.js */ \"(rsc)/./node_modules/http2-wrapper/source/utils/validate-header-value.js\");\nconst proxySocketHandler = __webpack_require__(/*! ./utils/proxy-socket-handler.js */ \"(rsc)/./node_modules/http2-wrapper/source/utils/proxy-socket-handler.js\");\nconst { HTTP2_HEADER_STATUS, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_HEADER_AUTHORITY, HTTP2_METHOD_CONNECT } = http2.constants;\nconst kHeaders = Symbol(\"headers\");\nconst kOrigin = Symbol(\"origin\");\nconst kSession = Symbol(\"session\");\nconst kOptions = Symbol(\"options\");\nconst kFlushedHeaders = Symbol(\"flushedHeaders\");\nconst kJobs = Symbol(\"jobs\");\nconst kPendingAgentPromise = Symbol(\"pendingAgentPromise\");\nclass ClientRequest extends Writable {\n    constructor(input, options, callback){\n        super({\n            autoDestroy: false,\n            emitClose: false\n        });\n        if (typeof input === \"string\") {\n            input = urlToHttpOptions(new URL(input));\n        } else if (input instanceof URL) {\n            input = urlToHttpOptions(input);\n        } else {\n            input = {\n                ...input\n            };\n        }\n        if (typeof options === \"function\" || options === undefined) {\n            // (options, callback)\n            callback = options;\n            options = input;\n        } else {\n            // (input, options, callback)\n            options = Object.assign(input, options);\n        }\n        if (options.h2session) {\n            this[kSession] = options.h2session;\n            if (this[kSession].destroyed) {\n                throw new Error(\"The session has been closed already\");\n            }\n            this.protocol = this[kSession].socket.encrypted ? \"https:\" : \"http:\";\n        } else if (options.agent === false) {\n            this.agent = new Agent({\n                maxEmptySessions: 0\n            });\n        } else if (typeof options.agent === \"undefined\" || options.agent === null) {\n            this.agent = globalAgent;\n        } else if (typeof options.agent.request === \"function\") {\n            this.agent = options.agent;\n        } else {\n            throw new ERR_INVALID_ARG_TYPE(\"options.agent\", [\n                \"http2wrapper.Agent-like Object\",\n                \"undefined\",\n                \"false\"\n            ], options.agent);\n        }\n        if (this.agent) {\n            this.protocol = this.agent.protocol;\n        }\n        if (options.protocol && options.protocol !== this.protocol) {\n            throw new ERR_INVALID_PROTOCOL(options.protocol, this.protocol);\n        }\n        if (!options.port) {\n            options.port = options.defaultPort || this.agent && this.agent.defaultPort || 443;\n        }\n        options.host = options.hostname || options.host || \"localhost\";\n        // Unused\n        delete options.hostname;\n        const { timeout } = options;\n        options.timeout = undefined;\n        this[kHeaders] = Object.create(null);\n        this[kJobs] = [];\n        this[kPendingAgentPromise] = undefined;\n        this.socket = null;\n        this.connection = null;\n        this.method = options.method || \"GET\";\n        if (!(this.method === \"CONNECT\" && (options.path === \"/\" || options.path === undefined))) {\n            this.path = options.path;\n        }\n        this.res = null;\n        this.aborted = false;\n        this.reusedSocket = false;\n        const { headers } = options;\n        if (headers) {\n            // eslint-disable-next-line guard-for-in\n            for(const header in headers){\n                this.setHeader(header, headers[header]);\n            }\n        }\n        if (options.auth && !(\"authorization\" in this[kHeaders])) {\n            this[kHeaders].authorization = \"Basic \" + Buffer.from(options.auth).toString(\"base64\");\n        }\n        options.session = options.tlsSession;\n        options.path = options.socketPath;\n        this[kOptions] = options;\n        // Clients that generate HTTP/2 requests directly SHOULD use the :authority pseudo-header field instead of the Host header field.\n        this[kOrigin] = new URL(`${this.protocol}//${options.servername || options.host}:${options.port}`);\n        // A socket is being reused\n        const reuseSocket = options._reuseSocket;\n        if (reuseSocket) {\n            options.createConnection = (...args)=>{\n                if (reuseSocket.destroyed) {\n                    return this.agent.createConnection(...args);\n                }\n                return reuseSocket;\n            };\n            // eslint-disable-next-line promise/prefer-await-to-then\n            this.agent.getSession(this[kOrigin], this[kOptions]).catch(()=>{});\n        }\n        if (timeout) {\n            this.setTimeout(timeout);\n        }\n        if (callback) {\n            this.once(\"response\", callback);\n        }\n        this[kFlushedHeaders] = false;\n    }\n    get method() {\n        return this[kHeaders][HTTP2_HEADER_METHOD];\n    }\n    set method(value) {\n        if (value) {\n            this[kHeaders][HTTP2_HEADER_METHOD] = value.toUpperCase();\n        }\n    }\n    get path() {\n        const header = this.method === \"CONNECT\" ? HTTP2_HEADER_AUTHORITY : HTTP2_HEADER_PATH;\n        return this[kHeaders][header];\n    }\n    set path(value) {\n        if (value) {\n            const header = this.method === \"CONNECT\" ? HTTP2_HEADER_AUTHORITY : HTTP2_HEADER_PATH;\n            this[kHeaders][header] = value;\n        }\n    }\n    get host() {\n        return this[kOrigin].hostname;\n    }\n    set host(_value) {\n    // Do nothing as this is read only.\n    }\n    get _mustNotHaveABody() {\n        return this.method === \"GET\" || this.method === \"HEAD\" || this.method === \"DELETE\";\n    }\n    _write(chunk, encoding, callback) {\n        // https://github.com/nodejs/node/blob/654df09ae0c5e17d1b52a900a545f0664d8c7627/lib/internal/http2/util.js#L148-L156\n        if (this._mustNotHaveABody) {\n            callback(new Error(\"The GET, HEAD and DELETE methods must NOT have a body\"));\n            /* istanbul ignore next: Node.js 12 throws directly */ return;\n        }\n        this.flushHeaders();\n        const callWrite = ()=>this._request.write(chunk, encoding, callback);\n        if (this._request) {\n            callWrite();\n        } else {\n            this[kJobs].push(callWrite);\n        }\n    }\n    _final(callback) {\n        this.flushHeaders();\n        const callEnd = ()=>{\n            // For GET, HEAD and DELETE and CONNECT\n            if (this._mustNotHaveABody || this.method === \"CONNECT\") {\n                callback();\n                return;\n            }\n            this._request.end(callback);\n        };\n        if (this._request) {\n            callEnd();\n        } else {\n            this[kJobs].push(callEnd);\n        }\n    }\n    abort() {\n        if (this.res && this.res.complete) {\n            return;\n        }\n        if (!this.aborted) {\n            process.nextTick(()=>this.emit(\"abort\"));\n        }\n        this.aborted = true;\n        this.destroy();\n    }\n    async _destroy(error, callback) {\n        if (this.res) {\n            this.res._dump();\n        }\n        if (this._request) {\n            this._request.destroy();\n        } else {\n            process.nextTick(()=>{\n                this.emit(\"close\");\n            });\n        }\n        try {\n            await this[kPendingAgentPromise];\n        } catch (internalError) {\n            if (this.aborted) {\n                error = internalError;\n            }\n        }\n        callback(error);\n    }\n    async flushHeaders() {\n        if (this[kFlushedHeaders] || this.destroyed) {\n            return;\n        }\n        this[kFlushedHeaders] = true;\n        const isConnectMethod = this.method === HTTP2_METHOD_CONNECT;\n        // The real magic is here\n        const onStream = (stream)=>{\n            this._request = stream;\n            if (this.destroyed) {\n                stream.destroy();\n                return;\n            }\n            // Forwards `timeout`, `continue`, `close` and `error` events to this instance.\n            if (!isConnectMethod) {\n                // TODO: Should we proxy `close` here?\n                proxyEvents(stream, this, [\n                    \"timeout\",\n                    \"continue\"\n                ]);\n            }\n            stream.once(\"error\", (error)=>{\n                this.destroy(error);\n            });\n            stream.once(\"aborted\", ()=>{\n                const { res } = this;\n                if (res) {\n                    res.aborted = true;\n                    res.emit(\"aborted\");\n                    res.destroy();\n                } else {\n                    this.destroy(new Error(\"The server aborted the HTTP/2 stream\"));\n                }\n            });\n            const onResponse = (headers, flags, rawHeaders)=>{\n                // If we were to emit raw request stream, it would be as fast as the native approach.\n                // Note that wrapping the raw stream in a Proxy instance won't improve the performance (already tested it).\n                const response = new IncomingMessage(this.socket, stream.readableHighWaterMark);\n                this.res = response;\n                // Undocumented, but it is used by `cacheable-request`\n                response.url = `${this[kOrigin].origin}${this.path}`;\n                response.req = this;\n                response.statusCode = headers[HTTP2_HEADER_STATUS];\n                response.headers = headers;\n                response.rawHeaders = rawHeaders;\n                response.once(\"end\", ()=>{\n                    response.complete = true;\n                    // Has no effect, just be consistent with the Node.js behavior\n                    response.socket = null;\n                    response.connection = null;\n                });\n                if (isConnectMethod) {\n                    response.upgrade = true;\n                    // The HTTP1 API says the socket is detached here,\n                    // but we can't do that so we pass the original HTTP2 request.\n                    if (this.emit(\"connect\", response, stream, Buffer.alloc(0))) {\n                        this.emit(\"close\");\n                    } else {\n                        // No listeners attached, destroy the original request.\n                        stream.destroy();\n                    }\n                } else {\n                    // Forwards data\n                    stream.on(\"data\", (chunk)=>{\n                        if (!response._dumped && !response.push(chunk)) {\n                            stream.pause();\n                        }\n                    });\n                    stream.once(\"end\", ()=>{\n                        if (!this.aborted) {\n                            response.push(null);\n                        }\n                    });\n                    if (!this.emit(\"response\", response)) {\n                        // No listeners attached, dump the response.\n                        response._dump();\n                    }\n                }\n            };\n            // This event tells we are ready to listen for the data.\n            stream.once(\"response\", onResponse);\n            // Emits `information` event\n            stream.once(\"headers\", (headers)=>this.emit(\"information\", {\n                    statusCode: headers[HTTP2_HEADER_STATUS]\n                }));\n            stream.once(\"trailers\", (trailers, flags, rawTrailers)=>{\n                const { res } = this;\n                // https://github.com/nodejs/node/issues/41251\n                if (res === null) {\n                    onResponse(trailers, flags, rawTrailers);\n                    return;\n                }\n                // Assigns trailers to the response object.\n                res.trailers = trailers;\n                res.rawTrailers = rawTrailers;\n            });\n            stream.once(\"close\", ()=>{\n                const { aborted, res } = this;\n                if (res) {\n                    if (aborted) {\n                        res.aborted = true;\n                        res.emit(\"aborted\");\n                        res.destroy();\n                    }\n                    const finish = ()=>{\n                        res.emit(\"close\");\n                        this.destroy();\n                        this.emit(\"close\");\n                    };\n                    if (res.readable) {\n                        res.once(\"end\", finish);\n                    } else {\n                        finish();\n                    }\n                    return;\n                }\n                if (!this.destroyed) {\n                    this.destroy(new Error(\"The HTTP/2 stream has been early terminated\"));\n                    this.emit(\"close\");\n                    return;\n                }\n                this.destroy();\n                this.emit(\"close\");\n            });\n            this.socket = new Proxy(stream, proxySocketHandler);\n            for (const job of this[kJobs]){\n                job();\n            }\n            this.emit(\"socket\", this.socket);\n        };\n        if (!(HTTP2_HEADER_AUTHORITY in this[kHeaders]) && !isConnectMethod) {\n            this[kHeaders][HTTP2_HEADER_AUTHORITY] = this[kOrigin].host;\n        }\n        // Makes a HTTP2 request\n        if (this[kSession]) {\n            try {\n                onStream(this[kSession].request(this[kHeaders]));\n            } catch (error) {\n                this.destroy(error);\n            }\n        } else {\n            this.reusedSocket = true;\n            try {\n                const promise = this.agent.request(this[kOrigin], this[kOptions], this[kHeaders]);\n                this[kPendingAgentPromise] = promise;\n                onStream(await promise);\n                this[kPendingAgentPromise] = false;\n            } catch (error) {\n                this[kPendingAgentPromise] = false;\n                this.destroy(error);\n            }\n        }\n    }\n    get connection() {\n        return this.socket;\n    }\n    set connection(value) {\n        this.socket = value;\n    }\n    getHeaderNames() {\n        return Object.keys(this[kHeaders]);\n    }\n    hasHeader(name) {\n        if (typeof name !== \"string\") {\n            throw new ERR_INVALID_ARG_TYPE(\"name\", \"string\", name);\n        }\n        return Boolean(this[kHeaders][name.toLowerCase()]);\n    }\n    getHeader(name) {\n        if (typeof name !== \"string\") {\n            throw new ERR_INVALID_ARG_TYPE(\"name\", \"string\", name);\n        }\n        return this[kHeaders][name.toLowerCase()];\n    }\n    get headersSent() {\n        return this[kFlushedHeaders];\n    }\n    removeHeader(name) {\n        if (typeof name !== \"string\") {\n            throw new ERR_INVALID_ARG_TYPE(\"name\", \"string\", name);\n        }\n        if (this.headersSent) {\n            throw new ERR_HTTP_HEADERS_SENT(\"remove\");\n        }\n        delete this[kHeaders][name.toLowerCase()];\n    }\n    setHeader(name, value) {\n        if (this.headersSent) {\n            throw new ERR_HTTP_HEADERS_SENT(\"set\");\n        }\n        validateHeaderName(name);\n        validateHeaderValue(name, value);\n        const lowercased = name.toLowerCase();\n        if (lowercased === \"connection\") {\n            if (value.toLowerCase() === \"keep-alive\") {\n                return;\n            }\n            throw new Error(`Invalid 'connection' header: ${value}`);\n        }\n        if (lowercased === \"host\" && this.method === \"CONNECT\") {\n            this[kHeaders][HTTP2_HEADER_AUTHORITY] = value;\n        } else {\n            this[kHeaders][lowercased] = value;\n        }\n    }\n    setNoDelay() {\n    // HTTP2 sockets cannot be malformed, do nothing.\n    }\n    setSocketKeepAlive() {\n    // HTTP2 sockets cannot be malformed, do nothing.\n    }\n    setTimeout(ms, callback) {\n        const applyTimeout = ()=>this._request.setTimeout(ms, callback);\n        if (this._request) {\n            applyTimeout();\n        } else {\n            this[kJobs].push(applyTimeout);\n        }\n        return this;\n    }\n    get maxHeadersCount() {\n        if (!this.destroyed && this._request) {\n            return this._request.session.localSettings.maxHeaderListSize;\n        }\n        return undefined;\n    }\n    set maxHeadersCount(_value) {\n    // Updating HTTP2 settings would affect all requests, do nothing.\n    }\n}\nmodule.exports = ClientRequest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http2-wrapper/source/client-request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/http2-wrapper/source/incoming-message.js":
/*!***************************************************************!*\
  !*** ./node_modules/http2-wrapper/source/incoming-message.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { Readable } = __webpack_require__(/*! stream */ \"stream\");\nclass IncomingMessage extends Readable {\n    constructor(socket, highWaterMark){\n        super({\n            emitClose: false,\n            autoDestroy: true,\n            highWaterMark\n        });\n        this.statusCode = null;\n        this.statusMessage = \"\";\n        this.httpVersion = \"2.0\";\n        this.httpVersionMajor = 2;\n        this.httpVersionMinor = 0;\n        this.headers = {};\n        this.trailers = {};\n        this.req = null;\n        this.aborted = false;\n        this.complete = false;\n        this.upgrade = null;\n        this.rawHeaders = [];\n        this.rawTrailers = [];\n        this.socket = socket;\n        this._dumped = false;\n    }\n    get connection() {\n        return this.socket;\n    }\n    set connection(value) {\n        this.socket = value;\n    }\n    _destroy(error, callback) {\n        if (!this.readableEnded) {\n            this.aborted = true;\n        }\n        // See https://github.com/nodejs/node/issues/35303\n        callback();\n        this.req._request.destroy(error);\n    }\n    setTimeout(ms, callback) {\n        this.req.setTimeout(ms, callback);\n        return this;\n    }\n    _dump() {\n        if (!this._dumped) {\n            this._dumped = true;\n            this.removeAllListeners(\"data\");\n            this.resume();\n        }\n    }\n    _read() {\n        if (this.req) {\n            this.req._request.resume();\n        }\n    }\n}\nmodule.exports = IncomingMessage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvaW5jb21pbmctbWVzc2FnZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU0sRUFBQ0EsUUFBUSxFQUFDLEdBQUdDLG1CQUFPQSxDQUFDO0FBRTNCLE1BQU1DLHdCQUF3QkY7SUFDN0JHLFlBQVlDLE1BQU0sRUFBRUMsYUFBYSxDQUFFO1FBQ2xDLEtBQUssQ0FBQztZQUNMQyxXQUFXO1lBQ1hDLGFBQWE7WUFDYkY7UUFDRDtRQUVBLElBQUksQ0FBQ0csVUFBVSxHQUFHO1FBQ2xCLElBQUksQ0FBQ0MsYUFBYSxHQUFHO1FBQ3JCLElBQUksQ0FBQ0MsV0FBVyxHQUFHO1FBQ25CLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUc7UUFDeEIsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRztRQUN4QixJQUFJLENBQUNDLE9BQU8sR0FBRyxDQUFDO1FBQ2hCLElBQUksQ0FBQ0MsUUFBUSxHQUFHLENBQUM7UUFDakIsSUFBSSxDQUFDQyxHQUFHLEdBQUc7UUFFWCxJQUFJLENBQUNDLE9BQU8sR0FBRztRQUNmLElBQUksQ0FBQ0MsUUFBUSxHQUFHO1FBQ2hCLElBQUksQ0FBQ0MsT0FBTyxHQUFHO1FBRWYsSUFBSSxDQUFDQyxVQUFVLEdBQUcsRUFBRTtRQUNwQixJQUFJLENBQUNDLFdBQVcsR0FBRyxFQUFFO1FBRXJCLElBQUksQ0FBQ2hCLE1BQU0sR0FBR0E7UUFFZCxJQUFJLENBQUNpQixPQUFPLEdBQUc7SUFDaEI7SUFFQSxJQUFJQyxhQUFhO1FBQ2hCLE9BQU8sSUFBSSxDQUFDbEIsTUFBTTtJQUNuQjtJQUVBLElBQUlrQixXQUFXQyxLQUFLLEVBQUU7UUFDckIsSUFBSSxDQUFDbkIsTUFBTSxHQUFHbUI7SUFDZjtJQUVBQyxTQUFTQyxLQUFLLEVBQUVDLFFBQVEsRUFBRTtRQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDQyxhQUFhLEVBQUU7WUFDeEIsSUFBSSxDQUFDWCxPQUFPLEdBQUc7UUFDaEI7UUFFQSxrREFBa0Q7UUFDbERVO1FBRUEsSUFBSSxDQUFDWCxHQUFHLENBQUNhLFFBQVEsQ0FBQ0MsT0FBTyxDQUFDSjtJQUMzQjtJQUVBSyxXQUFXQyxFQUFFLEVBQUVMLFFBQVEsRUFBRTtRQUN4QixJQUFJLENBQUNYLEdBQUcsQ0FBQ2UsVUFBVSxDQUFDQyxJQUFJTDtRQUN4QixPQUFPLElBQUk7SUFDWjtJQUVBTSxRQUFRO1FBQ1AsSUFBSSxDQUFDLElBQUksQ0FBQ1gsT0FBTyxFQUFFO1lBQ2xCLElBQUksQ0FBQ0EsT0FBTyxHQUFHO1lBRWYsSUFBSSxDQUFDWSxrQkFBa0IsQ0FBQztZQUN4QixJQUFJLENBQUNDLE1BQU07UUFDWjtJQUNEO0lBRUFDLFFBQVE7UUFDUCxJQUFJLElBQUksQ0FBQ3BCLEdBQUcsRUFBRTtZQUNiLElBQUksQ0FBQ0EsR0FBRyxDQUFDYSxRQUFRLENBQUNNLE1BQU07UUFDekI7SUFDRDtBQUNEO0FBRUFFLE9BQU9DLE9BQU8sR0FBR25DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZXhhbXBsZS1mdWxsLy4vbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL2luY29taW5nLW1lc3NhZ2UuanM/NTliOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCB7UmVhZGFibGV9ID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5cbmNsYXNzIEluY29taW5nTWVzc2FnZSBleHRlbmRzIFJlYWRhYmxlIHtcblx0Y29uc3RydWN0b3Ioc29ja2V0LCBoaWdoV2F0ZXJNYXJrKSB7XG5cdFx0c3VwZXIoe1xuXHRcdFx0ZW1pdENsb3NlOiBmYWxzZSxcblx0XHRcdGF1dG9EZXN0cm95OiB0cnVlLFxuXHRcdFx0aGlnaFdhdGVyTWFya1xuXHRcdH0pO1xuXG5cdFx0dGhpcy5zdGF0dXNDb2RlID0gbnVsbDtcblx0XHR0aGlzLnN0YXR1c01lc3NhZ2UgPSAnJztcblx0XHR0aGlzLmh0dHBWZXJzaW9uID0gJzIuMCc7XG5cdFx0dGhpcy5odHRwVmVyc2lvbk1ham9yID0gMjtcblx0XHR0aGlzLmh0dHBWZXJzaW9uTWlub3IgPSAwO1xuXHRcdHRoaXMuaGVhZGVycyA9IHt9O1xuXHRcdHRoaXMudHJhaWxlcnMgPSB7fTtcblx0XHR0aGlzLnJlcSA9IG51bGw7XG5cblx0XHR0aGlzLmFib3J0ZWQgPSBmYWxzZTtcblx0XHR0aGlzLmNvbXBsZXRlID0gZmFsc2U7XG5cdFx0dGhpcy51cGdyYWRlID0gbnVsbDtcblxuXHRcdHRoaXMucmF3SGVhZGVycyA9IFtdO1xuXHRcdHRoaXMucmF3VHJhaWxlcnMgPSBbXTtcblxuXHRcdHRoaXMuc29ja2V0ID0gc29ja2V0O1xuXG5cdFx0dGhpcy5fZHVtcGVkID0gZmFsc2U7XG5cdH1cblxuXHRnZXQgY29ubmVjdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5zb2NrZXQ7XG5cdH1cblxuXHRzZXQgY29ubmVjdGlvbih2YWx1ZSkge1xuXHRcdHRoaXMuc29ja2V0ID0gdmFsdWU7XG5cdH1cblxuXHRfZGVzdHJveShlcnJvciwgY2FsbGJhY2spIHtcblx0XHRpZiAoIXRoaXMucmVhZGFibGVFbmRlZCkge1xuXHRcdFx0dGhpcy5hYm9ydGVkID0gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2lzc3Vlcy8zNTMwM1xuXHRcdGNhbGxiYWNrKCk7XG5cblx0XHR0aGlzLnJlcS5fcmVxdWVzdC5kZXN0cm95KGVycm9yKTtcblx0fVxuXG5cdHNldFRpbWVvdXQobXMsIGNhbGxiYWNrKSB7XG5cdFx0dGhpcy5yZXEuc2V0VGltZW91dChtcywgY2FsbGJhY2spO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0X2R1bXAoKSB7XG5cdFx0aWYgKCF0aGlzLl9kdW1wZWQpIHtcblx0XHRcdHRoaXMuX2R1bXBlZCA9IHRydWU7XG5cblx0XHRcdHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdkYXRhJyk7XG5cdFx0XHR0aGlzLnJlc3VtZSgpO1xuXHRcdH1cblx0fVxuXG5cdF9yZWFkKCkge1xuXHRcdGlmICh0aGlzLnJlcSkge1xuXHRcdFx0dGhpcy5yZXEuX3JlcXVlc3QucmVzdW1lKCk7XG5cdFx0fVxuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gSW5jb21pbmdNZXNzYWdlO1xuIl0sIm5hbWVzIjpbIlJlYWRhYmxlIiwicmVxdWlyZSIsIkluY29taW5nTWVzc2FnZSIsImNvbnN0cnVjdG9yIiwic29ja2V0IiwiaGlnaFdhdGVyTWFyayIsImVtaXRDbG9zZSIsImF1dG9EZXN0cm95Iiwic3RhdHVzQ29kZSIsInN0YXR1c01lc3NhZ2UiLCJodHRwVmVyc2lvbiIsImh0dHBWZXJzaW9uTWFqb3IiLCJodHRwVmVyc2lvbk1pbm9yIiwiaGVhZGVycyIsInRyYWlsZXJzIiwicmVxIiwiYWJvcnRlZCIsImNvbXBsZXRlIiwidXBncmFkZSIsInJhd0hlYWRlcnMiLCJyYXdUcmFpbGVycyIsIl9kdW1wZWQiLCJjb25uZWN0aW9uIiwidmFsdWUiLCJfZGVzdHJveSIsImVycm9yIiwiY2FsbGJhY2siLCJyZWFkYWJsZUVuZGVkIiwiX3JlcXVlc3QiLCJkZXN0cm95Iiwic2V0VGltZW91dCIsIm1zIiwiX2R1bXAiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJyZXN1bWUiLCJfcmVhZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http2-wrapper/source/incoming-message.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/http2-wrapper/source/index.js":
/*!****************************************************!*\
  !*** ./node_modules/http2-wrapper/source/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst { Agent, globalAgent } = __webpack_require__(/*! ./agent.js */ \"(rsc)/./node_modules/http2-wrapper/source/agent.js\");\nconst ClientRequest = __webpack_require__(/*! ./client-request.js */ \"(rsc)/./node_modules/http2-wrapper/source/client-request.js\");\nconst IncomingMessage = __webpack_require__(/*! ./incoming-message.js */ \"(rsc)/./node_modules/http2-wrapper/source/incoming-message.js\");\nconst auto = __webpack_require__(/*! ./auto.js */ \"(rsc)/./node_modules/http2-wrapper/source/auto.js\");\nconst { HttpOverHttp2, HttpsOverHttp2 } = __webpack_require__(/*! ./proxies/h1-over-h2.js */ \"(rsc)/./node_modules/http2-wrapper/source/proxies/h1-over-h2.js\");\nconst Http2OverHttp2 = __webpack_require__(/*! ./proxies/h2-over-h2.js */ \"(rsc)/./node_modules/http2-wrapper/source/proxies/h2-over-h2.js\");\nconst { Http2OverHttp, Http2OverHttps } = __webpack_require__(/*! ./proxies/h2-over-h1.js */ \"(rsc)/./node_modules/http2-wrapper/source/proxies/h2-over-h1.js\");\nconst validateHeaderName = __webpack_require__(/*! ./utils/validate-header-name.js */ \"(rsc)/./node_modules/http2-wrapper/source/utils/validate-header-name.js\");\nconst validateHeaderValue = __webpack_require__(/*! ./utils/validate-header-value.js */ \"(rsc)/./node_modules/http2-wrapper/source/utils/validate-header-value.js\");\nconst request = (url, options, callback)=>new ClientRequest(url, options, callback);\nconst get = (url, options, callback)=>{\n    // eslint-disable-next-line unicorn/prevent-abbreviations\n    const req = new ClientRequest(url, options, callback);\n    req.end();\n    return req;\n};\nmodule.exports = {\n    ...http2,\n    ClientRequest,\n    IncomingMessage,\n    Agent,\n    globalAgent,\n    request,\n    get,\n    auto,\n    proxies: {\n        HttpOverHttp2,\n        HttpsOverHttp2,\n        Http2OverHttp2,\n        Http2OverHttp,\n        Http2OverHttps\n    },\n    validateHeaderName,\n    validateHeaderValue\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxNQUFNQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUN0QixNQUFNLEVBQ0xDLEtBQUssRUFDTEMsV0FBVyxFQUNYLEdBQUdGLG1CQUFPQSxDQUFDO0FBQ1osTUFBTUcsZ0JBQWdCSCxtQkFBT0EsQ0FBQztBQUM5QixNQUFNSSxrQkFBa0JKLG1CQUFPQSxDQUFDO0FBQ2hDLE1BQU1LLE9BQU9MLG1CQUFPQSxDQUFDO0FBQ3JCLE1BQU0sRUFDTE0sYUFBYSxFQUNiQyxjQUFjLEVBQ2QsR0FBR1AsbUJBQU9BLENBQUM7QUFDWixNQUFNUSxpQkFBaUJSLG1CQUFPQSxDQUFDO0FBQy9CLE1BQU0sRUFDTFMsYUFBYSxFQUNiQyxjQUFjLEVBQ2QsR0FBR1YsbUJBQU9BLENBQUM7QUFDWixNQUFNVyxxQkFBcUJYLG1CQUFPQSxDQUFDO0FBQ25DLE1BQU1ZLHNCQUFzQlosbUJBQU9BLENBQUM7QUFFcEMsTUFBTWEsVUFBVSxDQUFDQyxLQUFLQyxTQUFTQyxXQUFhLElBQUliLGNBQWNXLEtBQUtDLFNBQVNDO0FBRTVFLE1BQU1DLE1BQU0sQ0FBQ0gsS0FBS0MsU0FBU0M7SUFDMUIseURBQXlEO0lBQ3pELE1BQU1FLE1BQU0sSUFBSWYsY0FBY1csS0FBS0MsU0FBU0M7SUFDNUNFLElBQUlDLEdBQUc7SUFFUCxPQUFPRDtBQUNSO0FBRUFFLE9BQU9DLE9BQU8sR0FBRztJQUNoQixHQUFHdEIsS0FBSztJQUNSSTtJQUNBQztJQUNBSDtJQUNBQztJQUNBVztJQUNBSTtJQUNBWjtJQUNBaUIsU0FBUztRQUNSaEI7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7SUFDRDtJQUNBQztJQUNBQztBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZXhhbXBsZS1mdWxsLy4vbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL2luZGV4LmpzPzJjZDMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgaHR0cDIgPSByZXF1aXJlKCdodHRwMicpO1xuY29uc3Qge1xuXHRBZ2VudCxcblx0Z2xvYmFsQWdlbnRcbn0gPSByZXF1aXJlKCcuL2FnZW50LmpzJyk7XG5jb25zdCBDbGllbnRSZXF1ZXN0ID0gcmVxdWlyZSgnLi9jbGllbnQtcmVxdWVzdC5qcycpO1xuY29uc3QgSW5jb21pbmdNZXNzYWdlID0gcmVxdWlyZSgnLi9pbmNvbWluZy1tZXNzYWdlLmpzJyk7XG5jb25zdCBhdXRvID0gcmVxdWlyZSgnLi9hdXRvLmpzJyk7XG5jb25zdCB7XG5cdEh0dHBPdmVySHR0cDIsXG5cdEh0dHBzT3Zlckh0dHAyXG59ID0gcmVxdWlyZSgnLi9wcm94aWVzL2gxLW92ZXItaDIuanMnKTtcbmNvbnN0IEh0dHAyT3Zlckh0dHAyID0gcmVxdWlyZSgnLi9wcm94aWVzL2gyLW92ZXItaDIuanMnKTtcbmNvbnN0IHtcblx0SHR0cDJPdmVySHR0cCxcblx0SHR0cDJPdmVySHR0cHNcbn0gPSByZXF1aXJlKCcuL3Byb3hpZXMvaDItb3Zlci1oMS5qcycpO1xuY29uc3QgdmFsaWRhdGVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi91dGlscy92YWxpZGF0ZS1oZWFkZXItbmFtZS5qcycpO1xuY29uc3QgdmFsaWRhdGVIZWFkZXJWYWx1ZSA9IHJlcXVpcmUoJy4vdXRpbHMvdmFsaWRhdGUtaGVhZGVyLXZhbHVlLmpzJyk7XG5cbmNvbnN0IHJlcXVlc3QgPSAodXJsLCBvcHRpb25zLCBjYWxsYmFjaykgPT4gbmV3IENsaWVudFJlcXVlc3QodXJsLCBvcHRpb25zLCBjYWxsYmFjayk7XG5cbmNvbnN0IGdldCA9ICh1cmwsIG9wdGlvbnMsIGNhbGxiYWNrKSA9PiB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL3ByZXZlbnQtYWJicmV2aWF0aW9uc1xuXHRjb25zdCByZXEgPSBuZXcgQ2xpZW50UmVxdWVzdCh1cmwsIG9wdGlvbnMsIGNhbGxiYWNrKTtcblx0cmVxLmVuZCgpO1xuXG5cdHJldHVybiByZXE7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0Li4uaHR0cDIsXG5cdENsaWVudFJlcXVlc3QsXG5cdEluY29taW5nTWVzc2FnZSxcblx0QWdlbnQsXG5cdGdsb2JhbEFnZW50LFxuXHRyZXF1ZXN0LFxuXHRnZXQsXG5cdGF1dG8sXG5cdHByb3hpZXM6IHtcblx0XHRIdHRwT3Zlckh0dHAyLFxuXHRcdEh0dHBzT3Zlckh0dHAyLFxuXHRcdEh0dHAyT3Zlckh0dHAyLFxuXHRcdEh0dHAyT3Zlckh0dHAsXG5cdFx0SHR0cDJPdmVySHR0cHNcblx0fSxcblx0dmFsaWRhdGVIZWFkZXJOYW1lLFxuXHR2YWxpZGF0ZUhlYWRlclZhbHVlXG59O1xuIl0sIm5hbWVzIjpbImh0dHAyIiwicmVxdWlyZSIsIkFnZW50IiwiZ2xvYmFsQWdlbnQiLCJDbGllbnRSZXF1ZXN0IiwiSW5jb21pbmdNZXNzYWdlIiwiYXV0byIsIkh0dHBPdmVySHR0cDIiLCJIdHRwc092ZXJIdHRwMiIsIkh0dHAyT3Zlckh0dHAyIiwiSHR0cDJPdmVySHR0cCIsIkh0dHAyT3Zlckh0dHBzIiwidmFsaWRhdGVIZWFkZXJOYW1lIiwidmFsaWRhdGVIZWFkZXJWYWx1ZSIsInJlcXVlc3QiLCJ1cmwiLCJvcHRpb25zIiwiY2FsbGJhY2siLCJnZXQiLCJyZXEiLCJlbmQiLCJtb2R1bGUiLCJleHBvcnRzIiwicHJveGllcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http2-wrapper/source/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/http2-wrapper/source/proxies/get-auth-headers.js":
/*!***********************************************************************!*\
  !*** ./node_modules/http2-wrapper/source/proxies/get-auth-headers.js ***!
  \***********************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = (self)=>{\n    const { username, password } = self.proxyOptions.url;\n    if (username || password) {\n        const data = `${username}:${password}`;\n        const authorization = `Basic ${Buffer.from(data).toString(\"base64\")}`;\n        return {\n            \"proxy-authorization\": authorization,\n            authorization\n        };\n    }\n    return {};\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvcHJveGllcy9nZXQtYXV0aC1oZWFkZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBR0MsQ0FBQUE7SUFDaEIsTUFBTSxFQUFDQyxRQUFRLEVBQUVDLFFBQVEsRUFBQyxHQUFHRixLQUFLRyxZQUFZLENBQUNDLEdBQUc7SUFFbEQsSUFBSUgsWUFBWUMsVUFBVTtRQUN6QixNQUFNRyxPQUFPLENBQUMsRUFBRUosU0FBUyxDQUFDLEVBQUVDLFNBQVMsQ0FBQztRQUN0QyxNQUFNSSxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUVDLE9BQU9DLElBQUksQ0FBQ0gsTUFBTUksUUFBUSxDQUFDLFVBQVUsQ0FBQztRQUVyRSxPQUFPO1lBQ04sdUJBQXVCSDtZQUN2QkE7UUFDRDtJQUNEO0lBRUEsT0FBTyxDQUFDO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1leGFtcGxlLWZ1bGwvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvcHJveGllcy9nZXQtYXV0aC1oZWFkZXJzLmpzP2QyZGMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNlbGYgPT4ge1xuXHRjb25zdCB7dXNlcm5hbWUsIHBhc3N3b3JkfSA9IHNlbGYucHJveHlPcHRpb25zLnVybDtcblxuXHRpZiAodXNlcm5hbWUgfHwgcGFzc3dvcmQpIHtcblx0XHRjb25zdCBkYXRhID0gYCR7dXNlcm5hbWV9OiR7cGFzc3dvcmR9YDtcblx0XHRjb25zdCBhdXRob3JpemF0aW9uID0gYEJhc2ljICR7QnVmZmVyLmZyb20oZGF0YSkudG9TdHJpbmcoJ2Jhc2U2NCcpfWA7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0J3Byb3h5LWF1dGhvcml6YXRpb24nOiBhdXRob3JpemF0aW9uLFxuXHRcdFx0YXV0aG9yaXphdGlvblxuXHRcdH07XG5cdH1cblxuXHRyZXR1cm4ge307XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJzZWxmIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInByb3h5T3B0aW9ucyIsInVybCIsImRhdGEiLCJhdXRob3JpemF0aW9uIiwiQnVmZmVyIiwiZnJvbSIsInRvU3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http2-wrapper/source/proxies/get-auth-headers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/http2-wrapper/source/proxies/h1-over-h2.js":
/*!*****************************************************************!*\
  !*** ./node_modules/http2-wrapper/source/proxies/h1-over-h2.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst JSStreamSocket = __webpack_require__(/*! ../utils/js-stream-socket.js */ \"(rsc)/./node_modules/http2-wrapper/source/utils/js-stream-socket.js\");\nconst { globalAgent } = __webpack_require__(/*! ../agent.js */ \"(rsc)/./node_modules/http2-wrapper/source/agent.js\");\nconst UnexpectedStatusCodeError = __webpack_require__(/*! ./unexpected-status-code-error.js */ \"(rsc)/./node_modules/http2-wrapper/source/proxies/unexpected-status-code-error.js\");\nconst initialize = __webpack_require__(/*! ./initialize.js */ \"(rsc)/./node_modules/http2-wrapper/source/proxies/initialize.js\");\nconst getAuthorizationHeaders = __webpack_require__(/*! ./get-auth-headers.js */ \"(rsc)/./node_modules/http2-wrapper/source/proxies/get-auth-headers.js\");\nconst createConnection = (self, options, callback)=>{\n    (async ()=>{\n        try {\n            const { proxyOptions } = self;\n            const { url, headers, raw } = proxyOptions;\n            const stream = await globalAgent.request(url, proxyOptions, {\n                ...getAuthorizationHeaders(self),\n                ...headers,\n                \":method\": \"CONNECT\",\n                \":authority\": `${options.host}:${options.port}`\n            });\n            stream.once(\"error\", callback);\n            stream.once(\"response\", (headers)=>{\n                const statusCode = headers[\":status\"];\n                if (statusCode !== 200) {\n                    callback(new UnexpectedStatusCodeError(statusCode));\n                    return;\n                }\n                const encrypted = self instanceof https.Agent;\n                if (raw && encrypted) {\n                    options.socket = stream;\n                    const secureStream = tls.connect(options);\n                    secureStream.once(\"close\", ()=>{\n                        stream.destroy();\n                    });\n                    callback(null, secureStream);\n                    return;\n                }\n                const socket = new JSStreamSocket(stream);\n                socket.encrypted = false;\n                socket._handle.getpeername = (out)=>{\n                    out.family = undefined;\n                    out.address = undefined;\n                    out.port = undefined;\n                };\n                callback(null, socket);\n            });\n        } catch (error) {\n            callback(error);\n        }\n    })();\n};\nclass HttpOverHttp2 extends http.Agent {\n    constructor(options){\n        super(options);\n        initialize(this, options.proxyOptions);\n    }\n    createConnection(options, callback) {\n        createConnection(this, options, callback);\n    }\n}\nclass HttpsOverHttp2 extends https.Agent {\n    constructor(options){\n        super(options);\n        initialize(this, options.proxyOptions);\n    }\n    createConnection(options, callback) {\n        createConnection(this, options, callback);\n    }\n}\nmodule.exports = {\n    HttpOverHttp2,\n    HttpsOverHttp2\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvcHJveGllcy9oMS1vdmVyLWgyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsTUFBTUEsTUFBTUMsbUJBQU9BLENBQUM7QUFDcEIsTUFBTUMsT0FBT0QsbUJBQU9BLENBQUM7QUFDckIsTUFBTUUsUUFBUUYsbUJBQU9BLENBQUM7QUFDdEIsTUFBTUcsaUJBQWlCSCxtQkFBT0EsQ0FBQztBQUMvQixNQUFNLEVBQUNJLFdBQVcsRUFBQyxHQUFHSixtQkFBT0EsQ0FBQztBQUM5QixNQUFNSyw0QkFBNEJMLG1CQUFPQSxDQUFDO0FBQzFDLE1BQU1NLGFBQWFOLG1CQUFPQSxDQUFDO0FBQzNCLE1BQU1PLDBCQUEwQlAsbUJBQU9BLENBQUM7QUFFeEMsTUFBTVEsbUJBQW1CLENBQUNDLE1BQU1DLFNBQVNDO0lBQ3ZDO1FBQ0EsSUFBSTtZQUNILE1BQU0sRUFBQ0MsWUFBWSxFQUFDLEdBQUdIO1lBQ3ZCLE1BQU0sRUFBQ0ksR0FBRyxFQUFFQyxPQUFPLEVBQUVDLEdBQUcsRUFBQyxHQUFHSDtZQUU1QixNQUFNSSxTQUFTLE1BQU1aLFlBQVlhLE9BQU8sQ0FBQ0osS0FBS0QsY0FBYztnQkFDM0QsR0FBR0wsd0JBQXdCRSxLQUFLO2dCQUNoQyxHQUFHSyxPQUFPO2dCQUNWLFdBQVc7Z0JBQ1gsY0FBYyxDQUFDLEVBQUVKLFFBQVFRLElBQUksQ0FBQyxDQUFDLEVBQUVSLFFBQVFTLElBQUksQ0FBQyxDQUFDO1lBQ2hEO1lBRUFILE9BQU9JLElBQUksQ0FBQyxTQUFTVDtZQUNyQkssT0FBT0ksSUFBSSxDQUFDLFlBQVlOLENBQUFBO2dCQUN2QixNQUFNTyxhQUFhUCxPQUFPLENBQUMsVUFBVTtnQkFFckMsSUFBSU8sZUFBZSxLQUFLO29CQUN2QlYsU0FBUyxJQUFJTiwwQkFBMEJnQjtvQkFDdkM7Z0JBQ0Q7Z0JBRUEsTUFBTUMsWUFBWWIsZ0JBQWdCUCxNQUFNcUIsS0FBSztnQkFFN0MsSUFBSVIsT0FBT08sV0FBVztvQkFDckJaLFFBQVFjLE1BQU0sR0FBR1I7b0JBQ2pCLE1BQU1TLGVBQWUxQixJQUFJMkIsT0FBTyxDQUFDaEI7b0JBRWpDZSxhQUFhTCxJQUFJLENBQUMsU0FBUzt3QkFDMUJKLE9BQU9XLE9BQU87b0JBQ2Y7b0JBRUFoQixTQUFTLE1BQU1jO29CQUNmO2dCQUNEO2dCQUVBLE1BQU1ELFNBQVMsSUFBSXJCLGVBQWVhO2dCQUNsQ1EsT0FBT0YsU0FBUyxHQUFHO2dCQUNuQkUsT0FBT0ksT0FBTyxDQUFDQyxXQUFXLEdBQUdDLENBQUFBO29CQUM1QkEsSUFBSUMsTUFBTSxHQUFHQztvQkFDYkYsSUFBSUcsT0FBTyxHQUFHRDtvQkFDZEYsSUFBSVgsSUFBSSxHQUFHYTtnQkFDWjtnQkFFQXJCLFNBQVMsTUFBTWE7WUFDaEI7UUFDRCxFQUFFLE9BQU9VLE9BQU87WUFDZnZCLFNBQVN1QjtRQUNWO0lBQ0Q7QUFDRDtBQUVBLE1BQU1DLHNCQUFzQmxDLEtBQUtzQixLQUFLO0lBQ3JDYSxZQUFZMUIsT0FBTyxDQUFFO1FBQ3BCLEtBQUssQ0FBQ0E7UUFFTkosV0FBVyxJQUFJLEVBQUVJLFFBQVFFLFlBQVk7SUFDdEM7SUFFQUosaUJBQWlCRSxPQUFPLEVBQUVDLFFBQVEsRUFBRTtRQUNuQ0gsaUJBQWlCLElBQUksRUFBRUUsU0FBU0M7SUFDakM7QUFDRDtBQUVBLE1BQU0wQix1QkFBdUJuQyxNQUFNcUIsS0FBSztJQUN2Q2EsWUFBWTFCLE9BQU8sQ0FBRTtRQUNwQixLQUFLLENBQUNBO1FBRU5KLFdBQVcsSUFBSSxFQUFFSSxRQUFRRSxZQUFZO0lBQ3RDO0lBRUFKLGlCQUFpQkUsT0FBTyxFQUFFQyxRQUFRLEVBQUU7UUFDbkNILGlCQUFpQixJQUFJLEVBQUVFLFNBQVNDO0lBQ2pDO0FBQ0Q7QUFFQTJCLE9BQU9DLE9BQU8sR0FBRztJQUNoQko7SUFDQUU7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25vdGlvbi14LWV4YW1wbGUtZnVsbC8uL25vZGVfbW9kdWxlcy9odHRwMi13cmFwcGVyL3NvdXJjZS9wcm94aWVzL2gxLW92ZXItaDIuanM/MWZiOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCB0bHMgPSByZXF1aXJlKCd0bHMnKTtcbmNvbnN0IGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG5jb25zdCBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyk7XG5jb25zdCBKU1N0cmVhbVNvY2tldCA9IHJlcXVpcmUoJy4uL3V0aWxzL2pzLXN0cmVhbS1zb2NrZXQuanMnKTtcbmNvbnN0IHtnbG9iYWxBZ2VudH0gPSByZXF1aXJlKCcuLi9hZ2VudC5qcycpO1xuY29uc3QgVW5leHBlY3RlZFN0YXR1c0NvZGVFcnJvciA9IHJlcXVpcmUoJy4vdW5leHBlY3RlZC1zdGF0dXMtY29kZS1lcnJvci5qcycpO1xuY29uc3QgaW5pdGlhbGl6ZSA9IHJlcXVpcmUoJy4vaW5pdGlhbGl6ZS5qcycpO1xuY29uc3QgZ2V0QXV0aG9yaXphdGlvbkhlYWRlcnMgPSByZXF1aXJlKCcuL2dldC1hdXRoLWhlYWRlcnMuanMnKTtcblxuY29uc3QgY3JlYXRlQ29ubmVjdGlvbiA9IChzZWxmLCBvcHRpb25zLCBjYWxsYmFjaykgPT4ge1xuXHQoYXN5bmMgKCkgPT4ge1xuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCB7cHJveHlPcHRpb25zfSA9IHNlbGY7XG5cdFx0XHRjb25zdCB7dXJsLCBoZWFkZXJzLCByYXd9ID0gcHJveHlPcHRpb25zO1xuXG5cdFx0XHRjb25zdCBzdHJlYW0gPSBhd2FpdCBnbG9iYWxBZ2VudC5yZXF1ZXN0KHVybCwgcHJveHlPcHRpb25zLCB7XG5cdFx0XHRcdC4uLmdldEF1dGhvcml6YXRpb25IZWFkZXJzKHNlbGYpLFxuXHRcdFx0XHQuLi5oZWFkZXJzLFxuXHRcdFx0XHQnOm1ldGhvZCc6ICdDT05ORUNUJyxcblx0XHRcdFx0JzphdXRob3JpdHknOiBgJHtvcHRpb25zLmhvc3R9OiR7b3B0aW9ucy5wb3J0fWBcblx0XHRcdH0pO1xuXG5cdFx0XHRzdHJlYW0ub25jZSgnZXJyb3InLCBjYWxsYmFjayk7XG5cdFx0XHRzdHJlYW0ub25jZSgncmVzcG9uc2UnLCBoZWFkZXJzID0+IHtcblx0XHRcdFx0Y29uc3Qgc3RhdHVzQ29kZSA9IGhlYWRlcnNbJzpzdGF0dXMnXTtcblxuXHRcdFx0XHRpZiAoc3RhdHVzQ29kZSAhPT0gMjAwKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2sobmV3IFVuZXhwZWN0ZWRTdGF0dXNDb2RlRXJyb3Ioc3RhdHVzQ29kZSkpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnN0IGVuY3J5cHRlZCA9IHNlbGYgaW5zdGFuY2VvZiBodHRwcy5BZ2VudDtcblxuXHRcdFx0XHRpZiAocmF3ICYmIGVuY3J5cHRlZCkge1xuXHRcdFx0XHRcdG9wdGlvbnMuc29ja2V0ID0gc3RyZWFtO1xuXHRcdFx0XHRcdGNvbnN0IHNlY3VyZVN0cmVhbSA9IHRscy5jb25uZWN0KG9wdGlvbnMpO1xuXG5cdFx0XHRcdFx0c2VjdXJlU3RyZWFtLm9uY2UoJ2Nsb3NlJywgKCkgPT4ge1xuXHRcdFx0XHRcdFx0c3RyZWFtLmRlc3Ryb3koKTtcblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdGNhbGxiYWNrKG51bGwsIHNlY3VyZVN0cmVhbSk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3Qgc29ja2V0ID0gbmV3IEpTU3RyZWFtU29ja2V0KHN0cmVhbSk7XG5cdFx0XHRcdHNvY2tldC5lbmNyeXB0ZWQgPSBmYWxzZTtcblx0XHRcdFx0c29ja2V0Ll9oYW5kbGUuZ2V0cGVlcm5hbWUgPSBvdXQgPT4ge1xuXHRcdFx0XHRcdG91dC5mYW1pbHkgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0b3V0LmFkZHJlc3MgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0b3V0LnBvcnQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Y2FsbGJhY2sobnVsbCwgc29ja2V0KTtcblx0XHRcdH0pO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRjYWxsYmFjayhlcnJvcik7XG5cdFx0fVxuXHR9KSgpO1xufTtcblxuY2xhc3MgSHR0cE92ZXJIdHRwMiBleHRlbmRzIGh0dHAuQWdlbnQge1xuXHRjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG5cdFx0c3VwZXIob3B0aW9ucyk7XG5cblx0XHRpbml0aWFsaXplKHRoaXMsIG9wdGlvbnMucHJveHlPcHRpb25zKTtcblx0fVxuXG5cdGNyZWF0ZUNvbm5lY3Rpb24ob3B0aW9ucywgY2FsbGJhY2spIHtcblx0XHRjcmVhdGVDb25uZWN0aW9uKHRoaXMsIG9wdGlvbnMsIGNhbGxiYWNrKTtcblx0fVxufVxuXG5jbGFzcyBIdHRwc092ZXJIdHRwMiBleHRlbmRzIGh0dHBzLkFnZW50IHtcblx0Y29uc3RydWN0b3Iob3B0aW9ucykge1xuXHRcdHN1cGVyKG9wdGlvbnMpO1xuXG5cdFx0aW5pdGlhbGl6ZSh0aGlzLCBvcHRpb25zLnByb3h5T3B0aW9ucyk7XG5cdH1cblxuXHRjcmVhdGVDb25uZWN0aW9uKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG5cdFx0Y3JlYXRlQ29ubmVjdGlvbih0aGlzLCBvcHRpb25zLCBjYWxsYmFjayk7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdEh0dHBPdmVySHR0cDIsXG5cdEh0dHBzT3Zlckh0dHAyXG59O1xuIl0sIm5hbWVzIjpbInRscyIsInJlcXVpcmUiLCJodHRwIiwiaHR0cHMiLCJKU1N0cmVhbVNvY2tldCIsImdsb2JhbEFnZW50IiwiVW5leHBlY3RlZFN0YXR1c0NvZGVFcnJvciIsImluaXRpYWxpemUiLCJnZXRBdXRob3JpemF0aW9uSGVhZGVycyIsImNyZWF0ZUNvbm5lY3Rpb24iLCJzZWxmIiwib3B0aW9ucyIsImNhbGxiYWNrIiwicHJveHlPcHRpb25zIiwidXJsIiwiaGVhZGVycyIsInJhdyIsInN0cmVhbSIsInJlcXVlc3QiLCJob3N0IiwicG9ydCIsIm9uY2UiLCJzdGF0dXNDb2RlIiwiZW5jcnlwdGVkIiwiQWdlbnQiLCJzb2NrZXQiLCJzZWN1cmVTdHJlYW0iLCJjb25uZWN0IiwiZGVzdHJveSIsIl9oYW5kbGUiLCJnZXRwZWVybmFtZSIsIm91dCIsImZhbWlseSIsInVuZGVmaW5lZCIsImFkZHJlc3MiLCJlcnJvciIsIkh0dHBPdmVySHR0cDIiLCJjb25zdHJ1Y3RvciIsIkh0dHBzT3Zlckh0dHAyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http2-wrapper/source/proxies/h1-over-h2.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/http2-wrapper/source/proxies/h2-over-h1.js":
/*!*****************************************************************!*\
  !*** ./node_modules/http2-wrapper/source/proxies/h2-over-h1.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst Http2OverHttpX = __webpack_require__(/*! ./h2-over-hx.js */ \"(rsc)/./node_modules/http2-wrapper/source/proxies/h2-over-hx.js\");\nconst getAuthorizationHeaders = __webpack_require__(/*! ./get-auth-headers.js */ \"(rsc)/./node_modules/http2-wrapper/source/proxies/get-auth-headers.js\");\nconst getStream = (request)=>new Promise((resolve, reject)=>{\n        const onConnect = (response, socket, head)=>{\n            socket.unshift(head);\n            request.off(\"error\", reject);\n            resolve([\n                socket,\n                response.statusCode\n            ]);\n        };\n        request.once(\"error\", reject);\n        request.once(\"connect\", onConnect);\n    });\nclass Http2OverHttp extends Http2OverHttpX {\n    async _getProxyStream(authority) {\n        const { proxyOptions } = this;\n        const { url, headers } = this.proxyOptions;\n        const network = url.protocol === \"https:\" ? https : http;\n        // `new URL('https://localhost/httpbin.org:443')` results in\n        // a `/httpbin.org:443` path, which has an invalid leading slash.\n        const request = network.request({\n            ...proxyOptions,\n            hostname: url.hostname,\n            port: url.port,\n            path: authority,\n            headers: {\n                ...getAuthorizationHeaders(this),\n                ...headers,\n                host: authority\n            },\n            method: \"CONNECT\"\n        }).end();\n        return getStream(request);\n    }\n}\nmodule.exports = {\n    Http2OverHttp,\n    Http2OverHttps: Http2OverHttp\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvcHJveGllcy9oMi1vdmVyLWgxLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsTUFBTUEsT0FBT0MsbUJBQU9BLENBQUM7QUFDckIsTUFBTUMsUUFBUUQsbUJBQU9BLENBQUM7QUFDdEIsTUFBTUUsaUJBQWlCRixtQkFBT0EsQ0FBQztBQUMvQixNQUFNRywwQkFBMEJILG1CQUFPQSxDQUFDO0FBRXhDLE1BQU1JLFlBQVlDLENBQUFBLFVBQVcsSUFBSUMsUUFBUSxDQUFDQyxTQUFTQztRQUNsRCxNQUFNQyxZQUFZLENBQUNDLFVBQVVDLFFBQVFDO1lBQ3BDRCxPQUFPRSxPQUFPLENBQUNEO1lBRWZQLFFBQVFTLEdBQUcsQ0FBQyxTQUFTTjtZQUNyQkQsUUFBUTtnQkFBQ0k7Z0JBQVFELFNBQVNLLFVBQVU7YUFBQztRQUN0QztRQUVBVixRQUFRVyxJQUFJLENBQUMsU0FBU1I7UUFDdEJILFFBQVFXLElBQUksQ0FBQyxXQUFXUDtJQUN6QjtBQUVBLE1BQU1RLHNCQUFzQmY7SUFDM0IsTUFBTWdCLGdCQUFnQkMsU0FBUyxFQUFFO1FBQ2hDLE1BQU0sRUFBQ0MsWUFBWSxFQUFDLEdBQUcsSUFBSTtRQUMzQixNQUFNLEVBQUNDLEdBQUcsRUFBRUMsT0FBTyxFQUFDLEdBQUcsSUFBSSxDQUFDRixZQUFZO1FBRXhDLE1BQU1HLFVBQVVGLElBQUlHLFFBQVEsS0FBSyxXQUFXdkIsUUFBUUY7UUFFcEQsNERBQTREO1FBQzVELGlFQUFpRTtRQUNqRSxNQUFNTSxVQUFVa0IsUUFBUWxCLE9BQU8sQ0FBQztZQUMvQixHQUFHZSxZQUFZO1lBQ2ZLLFVBQVVKLElBQUlJLFFBQVE7WUFDdEJDLE1BQU1MLElBQUlLLElBQUk7WUFDZEMsTUFBTVI7WUFDTkcsU0FBUztnQkFDUixHQUFHbkIsd0JBQXdCLElBQUksQ0FBQztnQkFDaEMsR0FBR21CLE9BQU87Z0JBQ1ZNLE1BQU1UO1lBQ1A7WUFDQVUsUUFBUTtRQUNULEdBQUdDLEdBQUc7UUFFTixPQUFPMUIsVUFBVUM7SUFDbEI7QUFDRDtBQUVBMEIsT0FBT0MsT0FBTyxHQUFHO0lBQ2hCZjtJQUNBZ0IsZ0JBQWdCaEI7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1leGFtcGxlLWZ1bGwvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvcHJveGllcy9oMi1vdmVyLWgxLmpzPzA3ZTMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKTtcbmNvbnN0IGh0dHBzID0gcmVxdWlyZSgnaHR0cHMnKTtcbmNvbnN0IEh0dHAyT3Zlckh0dHBYID0gcmVxdWlyZSgnLi9oMi1vdmVyLWh4LmpzJyk7XG5jb25zdCBnZXRBdXRob3JpemF0aW9uSGVhZGVycyA9IHJlcXVpcmUoJy4vZ2V0LWF1dGgtaGVhZGVycy5qcycpO1xuXG5jb25zdCBnZXRTdHJlYW0gPSByZXF1ZXN0ID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0Y29uc3Qgb25Db25uZWN0ID0gKHJlc3BvbnNlLCBzb2NrZXQsIGhlYWQpID0+IHtcblx0XHRzb2NrZXQudW5zaGlmdChoZWFkKTtcblxuXHRcdHJlcXVlc3Qub2ZmKCdlcnJvcicsIHJlamVjdCk7XG5cdFx0cmVzb2x2ZShbc29ja2V0LCByZXNwb25zZS5zdGF0dXNDb2RlXSk7XG5cdH07XG5cblx0cmVxdWVzdC5vbmNlKCdlcnJvcicsIHJlamVjdCk7XG5cdHJlcXVlc3Qub25jZSgnY29ubmVjdCcsIG9uQ29ubmVjdCk7XG59KTtcblxuY2xhc3MgSHR0cDJPdmVySHR0cCBleHRlbmRzIEh0dHAyT3Zlckh0dHBYIHtcblx0YXN5bmMgX2dldFByb3h5U3RyZWFtKGF1dGhvcml0eSkge1xuXHRcdGNvbnN0IHtwcm94eU9wdGlvbnN9ID0gdGhpcztcblx0XHRjb25zdCB7dXJsLCBoZWFkZXJzfSA9IHRoaXMucHJveHlPcHRpb25zO1xuXG5cdFx0Y29uc3QgbmV0d29yayA9IHVybC5wcm90b2NvbCA9PT0gJ2h0dHBzOicgPyBodHRwcyA6IGh0dHA7XG5cblx0XHQvLyBgbmV3IFVSTCgnaHR0cHM6Ly9sb2NhbGhvc3QvaHR0cGJpbi5vcmc6NDQzJylgIHJlc3VsdHMgaW5cblx0XHQvLyBhIGAvaHR0cGJpbi5vcmc6NDQzYCBwYXRoLCB3aGljaCBoYXMgYW4gaW52YWxpZCBsZWFkaW5nIHNsYXNoLlxuXHRcdGNvbnN0IHJlcXVlc3QgPSBuZXR3b3JrLnJlcXVlc3Qoe1xuXHRcdFx0Li4ucHJveHlPcHRpb25zLFxuXHRcdFx0aG9zdG5hbWU6IHVybC5ob3N0bmFtZSxcblx0XHRcdHBvcnQ6IHVybC5wb3J0LFxuXHRcdFx0cGF0aDogYXV0aG9yaXR5LFxuXHRcdFx0aGVhZGVyczoge1xuXHRcdFx0XHQuLi5nZXRBdXRob3JpemF0aW9uSGVhZGVycyh0aGlzKSxcblx0XHRcdFx0Li4uaGVhZGVycyxcblx0XHRcdFx0aG9zdDogYXV0aG9yaXR5XG5cdFx0XHR9LFxuXHRcdFx0bWV0aG9kOiAnQ09OTkVDVCdcblx0XHR9KS5lbmQoKTtcblxuXHRcdHJldHVybiBnZXRTdHJlYW0ocmVxdWVzdCk7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdEh0dHAyT3Zlckh0dHAsXG5cdEh0dHAyT3Zlckh0dHBzOiBIdHRwMk92ZXJIdHRwXG59O1xuIl0sIm5hbWVzIjpbImh0dHAiLCJyZXF1aXJlIiwiaHR0cHMiLCJIdHRwMk92ZXJIdHRwWCIsImdldEF1dGhvcml6YXRpb25IZWFkZXJzIiwiZ2V0U3RyZWFtIiwicmVxdWVzdCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwib25Db25uZWN0IiwicmVzcG9uc2UiLCJzb2NrZXQiLCJoZWFkIiwidW5zaGlmdCIsIm9mZiIsInN0YXR1c0NvZGUiLCJvbmNlIiwiSHR0cDJPdmVySHR0cCIsIl9nZXRQcm94eVN0cmVhbSIsImF1dGhvcml0eSIsInByb3h5T3B0aW9ucyIsInVybCIsImhlYWRlcnMiLCJuZXR3b3JrIiwicHJvdG9jb2wiLCJob3N0bmFtZSIsInBvcnQiLCJwYXRoIiwiaG9zdCIsIm1ldGhvZCIsImVuZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJIdHRwMk92ZXJIdHRwcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http2-wrapper/source/proxies/h2-over-h1.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/http2-wrapper/source/proxies/h2-over-h2.js":
/*!*****************************************************************!*\
  !*** ./node_modules/http2-wrapper/source/proxies/h2-over-h2.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { globalAgent } = __webpack_require__(/*! ../agent.js */ \"(rsc)/./node_modules/http2-wrapper/source/agent.js\");\nconst Http2OverHttpX = __webpack_require__(/*! ./h2-over-hx.js */ \"(rsc)/./node_modules/http2-wrapper/source/proxies/h2-over-hx.js\");\nconst getAuthorizationHeaders = __webpack_require__(/*! ./get-auth-headers.js */ \"(rsc)/./node_modules/http2-wrapper/source/proxies/get-auth-headers.js\");\nconst getStatusCode = (stream)=>new Promise((resolve, reject)=>{\n        stream.once(\"error\", reject);\n        stream.once(\"response\", (headers)=>{\n            stream.off(\"error\", reject);\n            resolve(headers[\":status\"]);\n        });\n    });\nclass Http2OverHttp2 extends Http2OverHttpX {\n    async _getProxyStream(authority) {\n        const { proxyOptions } = this;\n        const headers = {\n            ...getAuthorizationHeaders(this),\n            ...proxyOptions.headers,\n            \":method\": \"CONNECT\",\n            \":authority\": authority\n        };\n        const stream = await globalAgent.request(proxyOptions.url, proxyOptions, headers);\n        const statusCode = await getStatusCode(stream);\n        return [\n            stream,\n            statusCode\n        ];\n    }\n}\nmodule.exports = Http2OverHttp2;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvcHJveGllcy9oMi1vdmVyLWgyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsTUFBTSxFQUFDQSxXQUFXLEVBQUMsR0FBR0MsbUJBQU9BLENBQUM7QUFDOUIsTUFBTUMsaUJBQWlCRCxtQkFBT0EsQ0FBQztBQUMvQixNQUFNRSwwQkFBMEJGLG1CQUFPQSxDQUFDO0FBRXhDLE1BQU1HLGdCQUFnQkMsQ0FBQUEsU0FBVSxJQUFJQyxRQUFRLENBQUNDLFNBQVNDO1FBQ3JESCxPQUFPSSxJQUFJLENBQUMsU0FBU0Q7UUFDckJILE9BQU9JLElBQUksQ0FBQyxZQUFZQyxDQUFBQTtZQUN2QkwsT0FBT00sR0FBRyxDQUFDLFNBQVNIO1lBQ3BCRCxRQUFRRyxPQUFPLENBQUMsVUFBVTtRQUMzQjtJQUNEO0FBRUEsTUFBTUUsdUJBQXVCVjtJQUM1QixNQUFNVyxnQkFBZ0JDLFNBQVMsRUFBRTtRQUNoQyxNQUFNLEVBQUNDLFlBQVksRUFBQyxHQUFHLElBQUk7UUFFM0IsTUFBTUwsVUFBVTtZQUNmLEdBQUdQLHdCQUF3QixJQUFJLENBQUM7WUFDaEMsR0FBR1ksYUFBYUwsT0FBTztZQUN2QixXQUFXO1lBQ1gsY0FBY0k7UUFDZjtRQUVBLE1BQU1ULFNBQVMsTUFBTUwsWUFBWWdCLE9BQU8sQ0FBQ0QsYUFBYUUsR0FBRyxFQUFFRixjQUFjTDtRQUN6RSxNQUFNUSxhQUFhLE1BQU1kLGNBQWNDO1FBRXZDLE9BQU87WUFBQ0E7WUFBUWE7U0FBVztJQUM1QjtBQUNEO0FBRUFDLE9BQU9DLE9BQU8sR0FBR1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1leGFtcGxlLWZ1bGwvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvcHJveGllcy9oMi1vdmVyLWgyLmpzPzAxMzYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3Qge2dsb2JhbEFnZW50fSA9IHJlcXVpcmUoJy4uL2FnZW50LmpzJyk7XG5jb25zdCBIdHRwMk92ZXJIdHRwWCA9IHJlcXVpcmUoJy4vaDItb3Zlci1oeC5qcycpO1xuY29uc3QgZ2V0QXV0aG9yaXphdGlvbkhlYWRlcnMgPSByZXF1aXJlKCcuL2dldC1hdXRoLWhlYWRlcnMuanMnKTtcblxuY29uc3QgZ2V0U3RhdHVzQ29kZSA9IHN0cmVhbSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdHN0cmVhbS5vbmNlKCdlcnJvcicsIHJlamVjdCk7XG5cdHN0cmVhbS5vbmNlKCdyZXNwb25zZScsIGhlYWRlcnMgPT4ge1xuXHRcdHN0cmVhbS5vZmYoJ2Vycm9yJywgcmVqZWN0KTtcblx0XHRyZXNvbHZlKGhlYWRlcnNbJzpzdGF0dXMnXSk7XG5cdH0pO1xufSk7XG5cbmNsYXNzIEh0dHAyT3Zlckh0dHAyIGV4dGVuZHMgSHR0cDJPdmVySHR0cFgge1xuXHRhc3luYyBfZ2V0UHJveHlTdHJlYW0oYXV0aG9yaXR5KSB7XG5cdFx0Y29uc3Qge3Byb3h5T3B0aW9uc30gPSB0aGlzO1xuXG5cdFx0Y29uc3QgaGVhZGVycyA9IHtcblx0XHRcdC4uLmdldEF1dGhvcml6YXRpb25IZWFkZXJzKHRoaXMpLFxuXHRcdFx0Li4ucHJveHlPcHRpb25zLmhlYWRlcnMsXG5cdFx0XHQnOm1ldGhvZCc6ICdDT05ORUNUJyxcblx0XHRcdCc6YXV0aG9yaXR5JzogYXV0aG9yaXR5XG5cdFx0fTtcblxuXHRcdGNvbnN0IHN0cmVhbSA9IGF3YWl0IGdsb2JhbEFnZW50LnJlcXVlc3QocHJveHlPcHRpb25zLnVybCwgcHJveHlPcHRpb25zLCBoZWFkZXJzKTtcblx0XHRjb25zdCBzdGF0dXNDb2RlID0gYXdhaXQgZ2V0U3RhdHVzQ29kZShzdHJlYW0pO1xuXG5cdFx0cmV0dXJuIFtzdHJlYW0sIHN0YXR1c0NvZGVdO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gSHR0cDJPdmVySHR0cDI7XG4iXSwibmFtZXMiOlsiZ2xvYmFsQWdlbnQiLCJyZXF1aXJlIiwiSHR0cDJPdmVySHR0cFgiLCJnZXRBdXRob3JpemF0aW9uSGVhZGVycyIsImdldFN0YXR1c0NvZGUiLCJzdHJlYW0iLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9uY2UiLCJoZWFkZXJzIiwib2ZmIiwiSHR0cDJPdmVySHR0cDIiLCJfZ2V0UHJveHlTdHJlYW0iLCJhdXRob3JpdHkiLCJwcm94eU9wdGlvbnMiLCJyZXF1ZXN0IiwidXJsIiwic3RhdHVzQ29kZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http2-wrapper/source/proxies/h2-over-h2.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/http2-wrapper/source/proxies/h2-over-hx.js":
/*!*****************************************************************!*\
  !*** ./node_modules/http2-wrapper/source/proxies/h2-over-hx.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { Agent } = __webpack_require__(/*! ../agent.js */ \"(rsc)/./node_modules/http2-wrapper/source/agent.js\");\nconst JSStreamSocket = __webpack_require__(/*! ../utils/js-stream-socket.js */ \"(rsc)/./node_modules/http2-wrapper/source/utils/js-stream-socket.js\");\nconst UnexpectedStatusCodeError = __webpack_require__(/*! ./unexpected-status-code-error.js */ \"(rsc)/./node_modules/http2-wrapper/source/proxies/unexpected-status-code-error.js\");\nconst initialize = __webpack_require__(/*! ./initialize.js */ \"(rsc)/./node_modules/http2-wrapper/source/proxies/initialize.js\");\nclass Http2OverHttpX extends Agent {\n    constructor(options){\n        super(options);\n        initialize(this, options.proxyOptions);\n    }\n    async createConnection(origin, options) {\n        const authority = `${origin.hostname}:${origin.port || 443}`;\n        const [stream, statusCode] = await this._getProxyStream(authority);\n        if (statusCode !== 200) {\n            throw new UnexpectedStatusCodeError(statusCode);\n        }\n        if (this.proxyOptions.raw) {\n            options.socket = stream;\n        } else {\n            const socket = new JSStreamSocket(stream);\n            socket.encrypted = false;\n            socket._handle.getpeername = (out)=>{\n                out.family = undefined;\n                out.address = undefined;\n                out.port = undefined;\n            };\n            return socket;\n        }\n        return super.createConnection(origin, options);\n    }\n}\nmodule.exports = Http2OverHttpX;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvcHJveGllcy9oMi1vdmVyLWh4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsTUFBTSxFQUFDQSxLQUFLLEVBQUMsR0FBR0MsbUJBQU9BLENBQUM7QUFDeEIsTUFBTUMsaUJBQWlCRCxtQkFBT0EsQ0FBQztBQUMvQixNQUFNRSw0QkFBNEJGLG1CQUFPQSxDQUFDO0FBQzFDLE1BQU1HLGFBQWFILG1CQUFPQSxDQUFDO0FBRTNCLE1BQU1JLHVCQUF1Qkw7SUFDNUJNLFlBQVlDLE9BQU8sQ0FBRTtRQUNwQixLQUFLLENBQUNBO1FBRU5ILFdBQVcsSUFBSSxFQUFFRyxRQUFRQyxZQUFZO0lBQ3RDO0lBRUEsTUFBTUMsaUJBQWlCQyxNQUFNLEVBQUVILE9BQU8sRUFBRTtRQUN2QyxNQUFNSSxZQUFZLENBQUMsRUFBRUQsT0FBT0UsUUFBUSxDQUFDLENBQUMsRUFBRUYsT0FBT0csSUFBSSxJQUFJLElBQUksQ0FBQztRQUU1RCxNQUFNLENBQUNDLFFBQVFDLFdBQVcsR0FBRyxNQUFNLElBQUksQ0FBQ0MsZUFBZSxDQUFDTDtRQUN4RCxJQUFJSSxlQUFlLEtBQUs7WUFDdkIsTUFBTSxJQUFJWiwwQkFBMEJZO1FBQ3JDO1FBRUEsSUFBSSxJQUFJLENBQUNQLFlBQVksQ0FBQ1MsR0FBRyxFQUFFO1lBQzFCVixRQUFRVyxNQUFNLEdBQUdKO1FBQ2xCLE9BQU87WUFDTixNQUFNSSxTQUFTLElBQUloQixlQUFlWTtZQUNsQ0ksT0FBT0MsU0FBUyxHQUFHO1lBQ25CRCxPQUFPRSxPQUFPLENBQUNDLFdBQVcsR0FBR0MsQ0FBQUE7Z0JBQzVCQSxJQUFJQyxNQUFNLEdBQUdDO2dCQUNiRixJQUFJRyxPQUFPLEdBQUdEO2dCQUNkRixJQUFJVCxJQUFJLEdBQUdXO1lBQ1o7WUFFQSxPQUFPTjtRQUNSO1FBRUEsT0FBTyxLQUFLLENBQUNULGlCQUFpQkMsUUFBUUg7SUFDdkM7QUFDRDtBQUVBbUIsT0FBT0MsT0FBTyxHQUFHdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1leGFtcGxlLWZ1bGwvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvcHJveGllcy9oMi1vdmVyLWh4LmpzPzJhYTgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3Qge0FnZW50fSA9IHJlcXVpcmUoJy4uL2FnZW50LmpzJyk7XG5jb25zdCBKU1N0cmVhbVNvY2tldCA9IHJlcXVpcmUoJy4uL3V0aWxzL2pzLXN0cmVhbS1zb2NrZXQuanMnKTtcbmNvbnN0IFVuZXhwZWN0ZWRTdGF0dXNDb2RlRXJyb3IgPSByZXF1aXJlKCcuL3VuZXhwZWN0ZWQtc3RhdHVzLWNvZGUtZXJyb3IuanMnKTtcbmNvbnN0IGluaXRpYWxpemUgPSByZXF1aXJlKCcuL2luaXRpYWxpemUuanMnKTtcblxuY2xhc3MgSHR0cDJPdmVySHR0cFggZXh0ZW5kcyBBZ2VudCB7XG5cdGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcblx0XHRzdXBlcihvcHRpb25zKTtcblxuXHRcdGluaXRpYWxpemUodGhpcywgb3B0aW9ucy5wcm94eU9wdGlvbnMpO1xuXHR9XG5cblx0YXN5bmMgY3JlYXRlQ29ubmVjdGlvbihvcmlnaW4sIG9wdGlvbnMpIHtcblx0XHRjb25zdCBhdXRob3JpdHkgPSBgJHtvcmlnaW4uaG9zdG5hbWV9OiR7b3JpZ2luLnBvcnQgfHwgNDQzfWA7XG5cblx0XHRjb25zdCBbc3RyZWFtLCBzdGF0dXNDb2RlXSA9IGF3YWl0IHRoaXMuX2dldFByb3h5U3RyZWFtKGF1dGhvcml0eSk7XG5cdFx0aWYgKHN0YXR1c0NvZGUgIT09IDIwMCkge1xuXHRcdFx0dGhyb3cgbmV3IFVuZXhwZWN0ZWRTdGF0dXNDb2RlRXJyb3Ioc3RhdHVzQ29kZSk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMucHJveHlPcHRpb25zLnJhdykge1xuXHRcdFx0b3B0aW9ucy5zb2NrZXQgPSBzdHJlYW07XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnN0IHNvY2tldCA9IG5ldyBKU1N0cmVhbVNvY2tldChzdHJlYW0pO1xuXHRcdFx0c29ja2V0LmVuY3J5cHRlZCA9IGZhbHNlO1xuXHRcdFx0c29ja2V0Ll9oYW5kbGUuZ2V0cGVlcm5hbWUgPSBvdXQgPT4ge1xuXHRcdFx0XHRvdXQuZmFtaWx5ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRvdXQuYWRkcmVzcyA9IHVuZGVmaW5lZDtcblx0XHRcdFx0b3V0LnBvcnQgPSB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXG5cdFx0XHRyZXR1cm4gc29ja2V0O1xuXHRcdH1cblxuXHRcdHJldHVybiBzdXBlci5jcmVhdGVDb25uZWN0aW9uKG9yaWdpbiwgb3B0aW9ucyk7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBIdHRwMk92ZXJIdHRwWDtcbiJdLCJuYW1lcyI6WyJBZ2VudCIsInJlcXVpcmUiLCJKU1N0cmVhbVNvY2tldCIsIlVuZXhwZWN0ZWRTdGF0dXNDb2RlRXJyb3IiLCJpbml0aWFsaXplIiwiSHR0cDJPdmVySHR0cFgiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJwcm94eU9wdGlvbnMiLCJjcmVhdGVDb25uZWN0aW9uIiwib3JpZ2luIiwiYXV0aG9yaXR5IiwiaG9zdG5hbWUiLCJwb3J0Iiwic3RyZWFtIiwic3RhdHVzQ29kZSIsIl9nZXRQcm94eVN0cmVhbSIsInJhdyIsInNvY2tldCIsImVuY3J5cHRlZCIsIl9oYW5kbGUiLCJnZXRwZWVybmFtZSIsIm91dCIsImZhbWlseSIsInVuZGVmaW5lZCIsImFkZHJlc3MiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http2-wrapper/source/proxies/h2-over-hx.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/http2-wrapper/source/proxies/initialize.js":
/*!*****************************************************************!*\
  !*** ./node_modules/http2-wrapper/source/proxies/initialize.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// See https://github.com/facebook/jest/issues/2549\n// eslint-disable-next-line node/prefer-global/url\nconst { URL } = __webpack_require__(/*! url */ \"url\");\nconst checkType = __webpack_require__(/*! ../utils/check-type.js */ \"(rsc)/./node_modules/http2-wrapper/source/utils/check-type.js\");\nmodule.exports = (self, proxyOptions)=>{\n    checkType(\"proxyOptions\", proxyOptions, [\n        \"object\"\n    ]);\n    checkType(\"proxyOptions.headers\", proxyOptions.headers, [\n        \"object\",\n        \"undefined\"\n    ]);\n    checkType(\"proxyOptions.raw\", proxyOptions.raw, [\n        \"boolean\",\n        \"undefined\"\n    ]);\n    checkType(\"proxyOptions.url\", proxyOptions.url, [\n        URL,\n        \"string\"\n    ]);\n    const url = new URL(proxyOptions.url);\n    self.proxyOptions = {\n        raw: true,\n        ...proxyOptions,\n        headers: {\n            ...proxyOptions.headers\n        },\n        url\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvcHJveGllcy9pbml0aWFsaXplLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsbURBQW1EO0FBQ25ELGtEQUFrRDtBQUNsRCxNQUFNLEVBQUNBLEdBQUcsRUFBQyxHQUFHQyxtQkFBT0EsQ0FBQztBQUN0QixNQUFNQyxZQUFZRCxtQkFBT0EsQ0FBQztBQUUxQkUsT0FBT0MsT0FBTyxHQUFHLENBQUNDLE1BQU1DO0lBQ3ZCSixVQUFVLGdCQUFnQkksY0FBYztRQUFDO0tBQVM7SUFDbERKLFVBQVUsd0JBQXdCSSxhQUFhQyxPQUFPLEVBQUU7UUFBQztRQUFVO0tBQVk7SUFDL0VMLFVBQVUsb0JBQW9CSSxhQUFhRSxHQUFHLEVBQUU7UUFBQztRQUFXO0tBQVk7SUFDeEVOLFVBQVUsb0JBQW9CSSxhQUFhRyxHQUFHLEVBQUU7UUFBQ1Q7UUFBSztLQUFTO0lBRS9ELE1BQU1TLE1BQU0sSUFBSVQsSUFBSU0sYUFBYUcsR0FBRztJQUVwQ0osS0FBS0MsWUFBWSxHQUFHO1FBQ25CRSxLQUFLO1FBQ0wsR0FBR0YsWUFBWTtRQUNmQyxTQUFTO1lBQUMsR0FBR0QsYUFBYUMsT0FBTztRQUFBO1FBQ2pDRTtJQUNEO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1leGFtcGxlLWZ1bGwvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvcHJveGllcy9pbml0aWFsaXplLmpzP2ZhZmQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9qZXN0L2lzc3Vlcy8yNTQ5XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9wcmVmZXItZ2xvYmFsL3VybFxuY29uc3Qge1VSTH0gPSByZXF1aXJlKCd1cmwnKTtcbmNvbnN0IGNoZWNrVHlwZSA9IHJlcXVpcmUoJy4uL3V0aWxzL2NoZWNrLXR5cGUuanMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoc2VsZiwgcHJveHlPcHRpb25zKSA9PiB7XG5cdGNoZWNrVHlwZSgncHJveHlPcHRpb25zJywgcHJveHlPcHRpb25zLCBbJ29iamVjdCddKTtcblx0Y2hlY2tUeXBlKCdwcm94eU9wdGlvbnMuaGVhZGVycycsIHByb3h5T3B0aW9ucy5oZWFkZXJzLCBbJ29iamVjdCcsICd1bmRlZmluZWQnXSk7XG5cdGNoZWNrVHlwZSgncHJveHlPcHRpb25zLnJhdycsIHByb3h5T3B0aW9ucy5yYXcsIFsnYm9vbGVhbicsICd1bmRlZmluZWQnXSk7XG5cdGNoZWNrVHlwZSgncHJveHlPcHRpb25zLnVybCcsIHByb3h5T3B0aW9ucy51cmwsIFtVUkwsICdzdHJpbmcnXSk7XG5cblx0Y29uc3QgdXJsID0gbmV3IFVSTChwcm94eU9wdGlvbnMudXJsKTtcblxuXHRzZWxmLnByb3h5T3B0aW9ucyA9IHtcblx0XHRyYXc6IHRydWUsXG5cdFx0Li4ucHJveHlPcHRpb25zLFxuXHRcdGhlYWRlcnM6IHsuLi5wcm94eU9wdGlvbnMuaGVhZGVyc30sXG5cdFx0dXJsXG5cdH07XG59O1xuIl0sIm5hbWVzIjpbIlVSTCIsInJlcXVpcmUiLCJjaGVja1R5cGUiLCJtb2R1bGUiLCJleHBvcnRzIiwic2VsZiIsInByb3h5T3B0aW9ucyIsImhlYWRlcnMiLCJyYXciLCJ1cmwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http2-wrapper/source/proxies/initialize.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/http2-wrapper/source/proxies/unexpected-status-code-error.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/http2-wrapper/source/proxies/unexpected-status-code-error.js ***!
  \***********************************************************************************/
/***/ ((module) => {

eval("\nclass UnexpectedStatusCodeError extends Error {\n    constructor(statusCode){\n        super(`The proxy server rejected the request with status code ${statusCode}`);\n        this.statusCode = statusCode;\n    }\n}\nmodule.exports = UnexpectedStatusCodeError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvcHJveGllcy91bmV4cGVjdGVkLXN0YXR1cy1jb2RlLWVycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsa0NBQWtDQztJQUN2Q0MsWUFBWUMsVUFBVSxDQUFFO1FBQ3ZCLEtBQUssQ0FBQyxDQUFDLHVEQUF1RCxFQUFFQSxXQUFXLENBQUM7UUFDNUUsSUFBSSxDQUFDQSxVQUFVLEdBQUdBO0lBQ25CO0FBQ0Q7QUFFQUMsT0FBT0MsT0FBTyxHQUFHTCIsInNvdXJjZXMiOlsid2VicGFjazovL25vdGlvbi14LWV4YW1wbGUtZnVsbC8uL25vZGVfbW9kdWxlcy9odHRwMi13cmFwcGVyL3NvdXJjZS9wcm94aWVzL3VuZXhwZWN0ZWQtc3RhdHVzLWNvZGUtZXJyb3IuanM/OWMxNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNsYXNzIFVuZXhwZWN0ZWRTdGF0dXNDb2RlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG5cdGNvbnN0cnVjdG9yKHN0YXR1c0NvZGUpIHtcblx0XHRzdXBlcihgVGhlIHByb3h5IHNlcnZlciByZWplY3RlZCB0aGUgcmVxdWVzdCB3aXRoIHN0YXR1cyBjb2RlICR7c3RhdHVzQ29kZX1gKTtcblx0XHR0aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVW5leHBlY3RlZFN0YXR1c0NvZGVFcnJvcjtcbiJdLCJuYW1lcyI6WyJVbmV4cGVjdGVkU3RhdHVzQ29kZUVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsInN0YXR1c0NvZGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http2-wrapper/source/proxies/unexpected-status-code-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/http2-wrapper/source/utils/calculate-server-name.js":
/*!**************************************************************************!*\
  !*** ./node_modules/http2-wrapper/source/utils/calculate-server-name.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { isIP } = __webpack_require__(/*! net */ \"net\");\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst getHost = (host)=>{\n    if (host[0] === \"[\") {\n        const idx = host.indexOf(\"]\");\n        assert(idx !== -1);\n        return host.slice(1, idx);\n    }\n    const idx = host.indexOf(\":\");\n    if (idx === -1) {\n        return host;\n    }\n    return host.slice(0, idx);\n};\nmodule.exports = (host)=>{\n    const servername = getHost(host);\n    if (isIP(servername)) {\n        return \"\";\n    }\n    return servername;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvY2FsY3VsYXRlLXNlcnZlci1uYW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsTUFBTSxFQUFDQSxJQUFJLEVBQUMsR0FBR0MsbUJBQU9BLENBQUM7QUFDdkIsTUFBTUMsU0FBU0QsbUJBQU9BLENBQUM7QUFFdkIsTUFBTUUsVUFBVUMsQ0FBQUE7SUFDZixJQUFJQSxJQUFJLENBQUMsRUFBRSxLQUFLLEtBQUs7UUFDcEIsTUFBTUMsTUFBTUQsS0FBS0UsT0FBTyxDQUFDO1FBRXpCSixPQUFPRyxRQUFRLENBQUM7UUFDaEIsT0FBT0QsS0FBS0csS0FBSyxDQUFDLEdBQUdGO0lBQ3RCO0lBRUEsTUFBTUEsTUFBTUQsS0FBS0UsT0FBTyxDQUFDO0lBQ3pCLElBQUlELFFBQVEsQ0FBQyxHQUFHO1FBQ2YsT0FBT0Q7SUFDUjtJQUVBLE9BQU9BLEtBQUtHLEtBQUssQ0FBQyxHQUFHRjtBQUN0QjtBQUVBRyxPQUFPQyxPQUFPLEdBQUdMLENBQUFBO0lBQ2hCLE1BQU1NLGFBQWFQLFFBQVFDO0lBRTNCLElBQUlKLEtBQUtVLGFBQWE7UUFDckIsT0FBTztJQUNSO0lBRUEsT0FBT0E7QUFDUiIsInNvdXJjZXMiOlsid2VicGFjazovL25vdGlvbi14LWV4YW1wbGUtZnVsbC8uL25vZGVfbW9kdWxlcy9odHRwMi13cmFwcGVyL3NvdXJjZS91dGlscy9jYWxjdWxhdGUtc2VydmVyLW5hbWUuanM/YTMwZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCB7aXNJUH0gPSByZXF1aXJlKCduZXQnKTtcbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuXG5jb25zdCBnZXRIb3N0ID0gaG9zdCA9PiB7XG5cdGlmIChob3N0WzBdID09PSAnWycpIHtcblx0XHRjb25zdCBpZHggPSBob3N0LmluZGV4T2YoJ10nKTtcblxuXHRcdGFzc2VydChpZHggIT09IC0xKTtcblx0XHRyZXR1cm4gaG9zdC5zbGljZSgxLCBpZHgpO1xuXHR9XG5cblx0Y29uc3QgaWR4ID0gaG9zdC5pbmRleE9mKCc6Jyk7XG5cdGlmIChpZHggPT09IC0xKSB7XG5cdFx0cmV0dXJuIGhvc3Q7XG5cdH1cblxuXHRyZXR1cm4gaG9zdC5zbGljZSgwLCBpZHgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBob3N0ID0+IHtcblx0Y29uc3Qgc2VydmVybmFtZSA9IGdldEhvc3QoaG9zdCk7XG5cblx0aWYgKGlzSVAoc2VydmVybmFtZSkpIHtcblx0XHRyZXR1cm4gJyc7XG5cdH1cblxuXHRyZXR1cm4gc2VydmVybmFtZTtcbn07XG4iXSwibmFtZXMiOlsiaXNJUCIsInJlcXVpcmUiLCJhc3NlcnQiLCJnZXRIb3N0IiwiaG9zdCIsImlkeCIsImluZGV4T2YiLCJzbGljZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZXJ2ZXJuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http2-wrapper/source/utils/calculate-server-name.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/http2-wrapper/source/utils/check-type.js":
/*!***************************************************************!*\
  !*** ./node_modules/http2-wrapper/source/utils/check-type.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("\nconst checkType = (name, value, types)=>{\n    const valid = types.some((type)=>{\n        const typeofType = typeof type;\n        if (typeofType === \"string\") {\n            return typeof value === type;\n        }\n        return value instanceof type;\n    });\n    if (!valid) {\n        const names = types.map((type)=>typeof type === \"string\" ? type : type.name);\n        throw new TypeError(`Expected '${name}' to be a type of ${names.join(\" or \")}, got ${typeof value}`);\n    }\n};\nmodule.exports = checkType;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvY2hlY2stdHlwZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFlBQVksQ0FBQ0MsTUFBTUMsT0FBT0M7SUFDL0IsTUFBTUMsUUFBUUQsTUFBTUUsSUFBSSxDQUFDQyxDQUFBQTtRQUN4QixNQUFNQyxhQUFhLE9BQU9EO1FBQzFCLElBQUlDLGVBQWUsVUFBVTtZQUM1QixPQUFPLE9BQU9MLFVBQVVJO1FBQ3pCO1FBRUEsT0FBT0osaUJBQWlCSTtJQUN6QjtJQUVBLElBQUksQ0FBQ0YsT0FBTztRQUNYLE1BQU1JLFFBQVFMLE1BQU1NLEdBQUcsQ0FBQ0gsQ0FBQUEsT0FBUSxPQUFPQSxTQUFTLFdBQVdBLE9BQU9BLEtBQUtMLElBQUk7UUFFM0UsTUFBTSxJQUFJUyxVQUFVLENBQUMsVUFBVSxFQUFFVCxLQUFLLGtCQUFrQixFQUFFTyxNQUFNRyxJQUFJLENBQUMsUUFBUSxNQUFNLEVBQUUsT0FBT1QsTUFBTSxDQUFDO0lBQ3BHO0FBQ0Q7QUFFQVUsT0FBT0MsT0FBTyxHQUFHYiIsInNvdXJjZXMiOlsid2VicGFjazovL25vdGlvbi14LWV4YW1wbGUtZnVsbC8uL25vZGVfbW9kdWxlcy9odHRwMi13cmFwcGVyL3NvdXJjZS91dGlscy9jaGVjay10eXBlLmpzPzYwNDciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjaGVja1R5cGUgPSAobmFtZSwgdmFsdWUsIHR5cGVzKSA9PiB7XG5cdGNvbnN0IHZhbGlkID0gdHlwZXMuc29tZSh0eXBlID0+IHtcblx0XHRjb25zdCB0eXBlb2ZUeXBlID0gdHlwZW9mIHR5cGU7XG5cdFx0aWYgKHR5cGVvZlR5cGUgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRyZXR1cm4gdHlwZW9mIHZhbHVlID09PSB0eXBlO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG5cdH0pO1xuXG5cdGlmICghdmFsaWQpIHtcblx0XHRjb25zdCBuYW1lcyA9IHR5cGVzLm1hcCh0eXBlID0+IHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyA/IHR5cGUgOiB0eXBlLm5hbWUpO1xuXG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgJyR7bmFtZX0nIHRvIGJlIGEgdHlwZSBvZiAke25hbWVzLmpvaW4oJyBvciAnKX0sIGdvdCAke3R5cGVvZiB2YWx1ZX1gKTtcblx0fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjaGVja1R5cGU7XG4iXSwibmFtZXMiOlsiY2hlY2tUeXBlIiwibmFtZSIsInZhbHVlIiwidHlwZXMiLCJ2YWxpZCIsInNvbWUiLCJ0eXBlIiwidHlwZW9mVHlwZSIsIm5hbWVzIiwibWFwIiwiVHlwZUVycm9yIiwiam9pbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http2-wrapper/source/utils/check-type.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/http2-wrapper/source/utils/delay-async-destroy.js":
/*!************************************************************************!*\
  !*** ./node_modules/http2-wrapper/source/utils/delay-async-destroy.js ***!
  \************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = (stream)=>{\n    if (stream.listenerCount(\"error\") !== 0) {\n        return;\n    }\n    stream.__destroy = stream._destroy;\n    stream._destroy = (...args)=>{\n        const callback = args.pop();\n        stream.__destroy(...args, async (error)=>{\n            await Promise.resolve();\n            callback(error);\n        });\n    };\n    const onError = (error)=>{\n        // eslint-disable-next-line promise/prefer-await-to-then\n        Promise.resolve().then(()=>{\n            stream.emit(\"error\", error);\n        });\n    };\n    stream.once(\"error\", onError);\n    // eslint-disable-next-line promise/prefer-await-to-then\n    Promise.resolve().then(()=>{\n        stream.off(\"error\", onError);\n    });\n    return stream;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvZGVsYXktYXN5bmMtZGVzdHJveS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxPQUFPLEdBQUdDLENBQUFBO0lBQ2hCLElBQUlBLE9BQU9DLGFBQWEsQ0FBQyxhQUFhLEdBQUc7UUFDeEM7SUFDRDtJQUVBRCxPQUFPRSxTQUFTLEdBQUdGLE9BQU9HLFFBQVE7SUFDbENILE9BQU9HLFFBQVEsR0FBRyxDQUFDLEdBQUdDO1FBQ3JCLE1BQU1DLFdBQVdELEtBQUtFLEdBQUc7UUFFekJOLE9BQU9FLFNBQVMsSUFBSUUsTUFBTSxPQUFNRztZQUMvQixNQUFNQyxRQUFRQyxPQUFPO1lBQ3JCSixTQUFTRTtRQUNWO0lBQ0Q7SUFFQSxNQUFNRyxVQUFVSCxDQUFBQTtRQUNmLHdEQUF3RDtRQUN4REMsUUFBUUMsT0FBTyxHQUFHRSxJQUFJLENBQUM7WUFDdEJYLE9BQU9ZLElBQUksQ0FBQyxTQUFTTDtRQUN0QjtJQUNEO0lBRUFQLE9BQU9hLElBQUksQ0FBQyxTQUFTSDtJQUVyQix3REFBd0Q7SUFDeERGLFFBQVFDLE9BQU8sR0FBR0UsSUFBSSxDQUFDO1FBQ3RCWCxPQUFPYyxHQUFHLENBQUMsU0FBU0o7SUFDckI7SUFFQSxPQUFPVjtBQUNSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZXhhbXBsZS1mdWxsLy4vbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL3V0aWxzL2RlbGF5LWFzeW5jLWRlc3Ryb3kuanM/N2VlMCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyZWFtID0+IHtcblx0aWYgKHN0cmVhbS5saXN0ZW5lckNvdW50KCdlcnJvcicpICE9PSAwKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0c3RyZWFtLl9fZGVzdHJveSA9IHN0cmVhbS5fZGVzdHJveTtcblx0c3RyZWFtLl9kZXN0cm95ID0gKC4uLmFyZ3MpID0+IHtcblx0XHRjb25zdCBjYWxsYmFjayA9IGFyZ3MucG9wKCk7XG5cblx0XHRzdHJlYW0uX19kZXN0cm95KC4uLmFyZ3MsIGFzeW5jIGVycm9yID0+IHtcblx0XHRcdGF3YWl0IFByb21pc2UucmVzb2x2ZSgpO1xuXHRcdFx0Y2FsbGJhY2soZXJyb3IpO1xuXHRcdH0pO1xuXHR9O1xuXG5cdGNvbnN0IG9uRXJyb3IgPSBlcnJvciA9PiB7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByb21pc2UvcHJlZmVyLWF3YWl0LXRvLXRoZW5cblx0XHRQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcblx0XHRcdHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycm9yKTtcblx0XHR9KTtcblx0fTtcblxuXHRzdHJlYW0ub25jZSgnZXJyb3InLCBvbkVycm9yKTtcblxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJvbWlzZS9wcmVmZXItYXdhaXQtdG8tdGhlblxuXHRQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcblx0XHRzdHJlYW0ub2ZmKCdlcnJvcicsIG9uRXJyb3IpO1xuXHR9KTtcblxuXHRyZXR1cm4gc3RyZWFtO1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic3RyZWFtIiwibGlzdGVuZXJDb3VudCIsIl9fZGVzdHJveSIsIl9kZXN0cm95IiwiYXJncyIsImNhbGxiYWNrIiwicG9wIiwiZXJyb3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsIm9uRXJyb3IiLCJ0aGVuIiwiZW1pdCIsIm9uY2UiLCJvZmYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http2-wrapper/source/utils/delay-async-destroy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/http2-wrapper/source/utils/errors.js":
/*!***********************************************************!*\
  !*** ./node_modules/http2-wrapper/source/utils/errors.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("\n/* istanbul ignore file: https://github.com/nodejs/node/blob/master/lib/internal/errors.js */ const makeError = (Base, key, getMessage)=>{\n    module.exports[key] = class NodeError extends Base {\n        constructor(...args){\n            super(typeof getMessage === \"string\" ? getMessage : getMessage(args));\n            this.name = `${super.name} [${key}]`;\n            this.code = key;\n        }\n    };\n};\nmakeError(TypeError, \"ERR_INVALID_ARG_TYPE\", (args)=>{\n    const type = args[0].includes(\".\") ? \"property\" : \"argument\";\n    let valid = args[1];\n    const isManyTypes = Array.isArray(valid);\n    if (isManyTypes) {\n        valid = `${valid.slice(0, -1).join(\", \")} or ${valid.slice(-1)}`;\n    }\n    return `The \"${args[0]}\" ${type} must be ${isManyTypes ? \"one of\" : \"of\"} type ${valid}. Received ${typeof args[2]}`;\n});\nmakeError(TypeError, \"ERR_INVALID_PROTOCOL\", (args)=>`Protocol \"${args[0]}\" not supported. Expected \"${args[1]}\"`);\nmakeError(Error, \"ERR_HTTP_HEADERS_SENT\", (args)=>`Cannot ${args[0]} headers after they are sent to the client`);\nmakeError(TypeError, \"ERR_INVALID_HTTP_TOKEN\", (args)=>`${args[0]} must be a valid HTTP token [${args[1]}]`);\nmakeError(TypeError, \"ERR_HTTP_INVALID_HEADER_VALUE\", (args)=>`Invalid value \"${args[0]} for header \"${args[1]}\"`);\nmakeError(TypeError, \"ERR_INVALID_CHAR\", (args)=>`Invalid character in ${args[0]} [${args[1]}]`);\nmakeError(Error, \"ERR_HTTP2_NO_SOCKET_MANIPULATION\", \"HTTP/2 sockets should not be directly manipulated (e.g. read and written)\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvZXJyb3JzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsMkZBQTJGLEdBRTNGLE1BQU1BLFlBQVksQ0FBQ0MsTUFBTUMsS0FBS0M7SUFDN0JDLE9BQU9DLE9BQU8sQ0FBQ0gsSUFBSSxHQUFHLE1BQU1JLGtCQUFrQkw7UUFDN0NNLFlBQVksR0FBR0MsSUFBSSxDQUFFO1lBQ3BCLEtBQUssQ0FBQyxPQUFPTCxlQUFlLFdBQVdBLGFBQWFBLFdBQVdLO1lBQy9ELElBQUksQ0FBQ0MsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUNBLEtBQUssRUFBRSxFQUFFUCxJQUFJLENBQUMsQ0FBQztZQUNwQyxJQUFJLENBQUNRLElBQUksR0FBR1I7UUFDYjtJQUNEO0FBQ0Q7QUFFQUYsVUFBVVcsV0FBVyx3QkFBd0JILENBQUFBO0lBQzVDLE1BQU1JLE9BQU9KLElBQUksQ0FBQyxFQUFFLENBQUNLLFFBQVEsQ0FBQyxPQUFPLGFBQWE7SUFFbEQsSUFBSUMsUUFBUU4sSUFBSSxDQUFDLEVBQUU7SUFDbkIsTUFBTU8sY0FBY0MsTUFBTUMsT0FBTyxDQUFDSDtJQUVsQyxJQUFJQyxhQUFhO1FBQ2hCRCxRQUFRLENBQUMsRUFBRUEsTUFBTUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHQyxJQUFJLENBQUMsTUFBTSxJQUFJLEVBQUVMLE1BQU1JLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUNqRTtJQUVBLE9BQU8sQ0FBQyxLQUFLLEVBQUVWLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFSSxLQUFLLFNBQVMsRUFBRUcsY0FBYyxXQUFXLEtBQUssTUFBTSxFQUFFRCxNQUFNLFdBQVcsRUFBRSxPQUFPTixJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDckg7QUFFQVIsVUFBVVcsV0FBVyx3QkFBd0JILENBQUFBLE9BQzVDLENBQUMsVUFBVSxFQUFFQSxJQUFJLENBQUMsRUFBRSxDQUFDLDJCQUEyQixFQUFFQSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUc3RFIsVUFBVW9CLE9BQU8seUJBQXlCWixDQUFBQSxPQUN6QyxDQUFDLE9BQU8sRUFBRUEsSUFBSSxDQUFDLEVBQUUsQ0FBQywwQ0FBMEMsQ0FBQztBQUc5RFIsVUFBVVcsV0FBVywwQkFBMEJILENBQUFBLE9BQzlDLENBQUMsRUFBRUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyw2QkFBNkIsRUFBRUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFHckRSLFVBQVVXLFdBQVcsaUNBQWlDSCxDQUFBQSxPQUNyRCxDQUFDLGVBQWUsRUFBRUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUVBLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBR3BEUixVQUFVVyxXQUFXLG9CQUFvQkgsQ0FBQUEsT0FDeEMsQ0FBQyxxQkFBcUIsRUFBRUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUVBLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBRy9DUixVQUNDb0IsT0FDQSxvQ0FDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25vdGlvbi14LWV4YW1wbGUtZnVsbC8uL25vZGVfbW9kdWxlcy9odHRwMi13cmFwcGVyL3NvdXJjZS91dGlscy9lcnJvcnMuanM/NmJjNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgZmlsZTogaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvbWFzdGVyL2xpYi9pbnRlcm5hbC9lcnJvcnMuanMgKi9cblxuY29uc3QgbWFrZUVycm9yID0gKEJhc2UsIGtleSwgZ2V0TWVzc2FnZSkgPT4ge1xuXHRtb2R1bGUuZXhwb3J0c1trZXldID0gY2xhc3MgTm9kZUVycm9yIGV4dGVuZHMgQmFzZSB7XG5cdFx0Y29uc3RydWN0b3IoLi4uYXJncykge1xuXHRcdFx0c3VwZXIodHlwZW9mIGdldE1lc3NhZ2UgPT09ICdzdHJpbmcnID8gZ2V0TWVzc2FnZSA6IGdldE1lc3NhZ2UoYXJncykpO1xuXHRcdFx0dGhpcy5uYW1lID0gYCR7c3VwZXIubmFtZX0gWyR7a2V5fV1gO1xuXHRcdFx0dGhpcy5jb2RlID0ga2V5O1xuXHRcdH1cblx0fTtcbn07XG5cbm1ha2VFcnJvcihUeXBlRXJyb3IsICdFUlJfSU5WQUxJRF9BUkdfVFlQRScsIGFyZ3MgPT4ge1xuXHRjb25zdCB0eXBlID0gYXJnc1swXS5pbmNsdWRlcygnLicpID8gJ3Byb3BlcnR5JyA6ICdhcmd1bWVudCc7XG5cblx0bGV0IHZhbGlkID0gYXJnc1sxXTtcblx0Y29uc3QgaXNNYW55VHlwZXMgPSBBcnJheS5pc0FycmF5KHZhbGlkKTtcblxuXHRpZiAoaXNNYW55VHlwZXMpIHtcblx0XHR2YWxpZCA9IGAke3ZhbGlkLnNsaWNlKDAsIC0xKS5qb2luKCcsICcpfSBvciAke3ZhbGlkLnNsaWNlKC0xKX1gO1xuXHR9XG5cblx0cmV0dXJuIGBUaGUgXCIke2FyZ3NbMF19XCIgJHt0eXBlfSBtdXN0IGJlICR7aXNNYW55VHlwZXMgPyAnb25lIG9mJyA6ICdvZid9IHR5cGUgJHt2YWxpZH0uIFJlY2VpdmVkICR7dHlwZW9mIGFyZ3NbMl19YDtcbn0pO1xuXG5tYWtlRXJyb3IoVHlwZUVycm9yLCAnRVJSX0lOVkFMSURfUFJPVE9DT0wnLCBhcmdzID0+XG5cdGBQcm90b2NvbCBcIiR7YXJnc1swXX1cIiBub3Qgc3VwcG9ydGVkLiBFeHBlY3RlZCBcIiR7YXJnc1sxXX1cImBcbik7XG5cbm1ha2VFcnJvcihFcnJvciwgJ0VSUl9IVFRQX0hFQURFUlNfU0VOVCcsIGFyZ3MgPT5cblx0YENhbm5vdCAke2FyZ3NbMF19IGhlYWRlcnMgYWZ0ZXIgdGhleSBhcmUgc2VudCB0byB0aGUgY2xpZW50YFxuKTtcblxubWFrZUVycm9yKFR5cGVFcnJvciwgJ0VSUl9JTlZBTElEX0hUVFBfVE9LRU4nLCBhcmdzID0+XG5cdGAke2FyZ3NbMF19IG11c3QgYmUgYSB2YWxpZCBIVFRQIHRva2VuIFske2FyZ3NbMV19XWBcbik7XG5cbm1ha2VFcnJvcihUeXBlRXJyb3IsICdFUlJfSFRUUF9JTlZBTElEX0hFQURFUl9WQUxVRScsIGFyZ3MgPT5cblx0YEludmFsaWQgdmFsdWUgXCIke2FyZ3NbMF19IGZvciBoZWFkZXIgXCIke2FyZ3NbMV19XCJgXG4pO1xuXG5tYWtlRXJyb3IoVHlwZUVycm9yLCAnRVJSX0lOVkFMSURfQ0hBUicsIGFyZ3MgPT5cblx0YEludmFsaWQgY2hhcmFjdGVyIGluICR7YXJnc1swXX0gWyR7YXJnc1sxXX1dYFxuKTtcblxubWFrZUVycm9yKFxuXHRFcnJvcixcblx0J0VSUl9IVFRQMl9OT19TT0NLRVRfTUFOSVBVTEFUSU9OJyxcblx0J0hUVFAvMiBzb2NrZXRzIHNob3VsZCBub3QgYmUgZGlyZWN0bHkgbWFuaXB1bGF0ZWQgKGUuZy4gcmVhZCBhbmQgd3JpdHRlbiknXG4pO1xuIl0sIm5hbWVzIjpbIm1ha2VFcnJvciIsIkJhc2UiLCJrZXkiLCJnZXRNZXNzYWdlIiwibW9kdWxlIiwiZXhwb3J0cyIsIk5vZGVFcnJvciIsImNvbnN0cnVjdG9yIiwiYXJncyIsIm5hbWUiLCJjb2RlIiwiVHlwZUVycm9yIiwidHlwZSIsImluY2x1ZGVzIiwidmFsaWQiLCJpc01hbnlUeXBlcyIsIkFycmF5IiwiaXNBcnJheSIsInNsaWNlIiwiam9pbiIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http2-wrapper/source/utils/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/http2-wrapper/source/utils/is-request-pseudo-header.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/http2-wrapper/source/utils/is-request-pseudo-header.js ***!
  \*****************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = (header)=>{\n    switch(header){\n        case \":method\":\n        case \":scheme\":\n        case \":authority\":\n        case \":path\":\n            return true;\n        default:\n            return false;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvaXMtcmVxdWVzdC1wc2V1ZG8taGVhZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBR0MsQ0FBQUE7SUFDaEIsT0FBUUE7UUFDUCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1lBQ0osT0FBTztRQUNSO1lBQ0MsT0FBTztJQUNUO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1leGFtcGxlLWZ1bGwvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvaXMtcmVxdWVzdC1wc2V1ZG8taGVhZGVyLmpzPzVkNjEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGhlYWRlciA9PiB7XG5cdHN3aXRjaCAoaGVhZGVyKSB7XG5cdFx0Y2FzZSAnOm1ldGhvZCc6XG5cdFx0Y2FzZSAnOnNjaGVtZSc6XG5cdFx0Y2FzZSAnOmF1dGhvcml0eSc6XG5cdFx0Y2FzZSAnOnBhdGgnOlxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiaGVhZGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http2-wrapper/source/utils/is-request-pseudo-header.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/http2-wrapper/source/utils/js-stream-socket.js":
/*!*********************************************************************!*\
  !*** ./node_modules/http2-wrapper/source/utils/js-stream-socket.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\n// Really awesome hack.\nconst JSStreamSocket = new tls.TLSSocket(new stream.PassThrough())._handle._parentWrap.constructor;\nmodule.exports = JSStreamSocket;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvanMtc3RyZWFtLXNvY2tldC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU1BLFNBQVNDLG1CQUFPQSxDQUFDO0FBQ3ZCLE1BQU1DLE1BQU1ELG1CQUFPQSxDQUFDO0FBRXBCLHVCQUF1QjtBQUN2QixNQUFNRSxpQkFBaUIsSUFBS0QsSUFBSUUsU0FBUyxDQUFDLElBQUlKLE9BQU9LLFdBQVcsSUFBS0MsT0FBTyxDQUFDQyxXQUFXLENBQUNDLFdBQVc7QUFFcEdDLE9BQU9DLE9BQU8sR0FBR1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1leGFtcGxlLWZ1bGwvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvanMtc3RyZWFtLXNvY2tldC5qcz9hM2MzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IHN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuY29uc3QgdGxzID0gcmVxdWlyZSgndGxzJyk7XG5cbi8vIFJlYWxseSBhd2Vzb21lIGhhY2suXG5jb25zdCBKU1N0cmVhbVNvY2tldCA9IChuZXcgdGxzLlRMU1NvY2tldChuZXcgc3RyZWFtLlBhc3NUaHJvdWdoKCkpKS5faGFuZGxlLl9wYXJlbnRXcmFwLmNvbnN0cnVjdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEpTU3RyZWFtU29ja2V0O1xuIl0sIm5hbWVzIjpbInN0cmVhbSIsInJlcXVpcmUiLCJ0bHMiLCJKU1N0cmVhbVNvY2tldCIsIlRMU1NvY2tldCIsIlBhc3NUaHJvdWdoIiwiX2hhbmRsZSIsIl9wYXJlbnRXcmFwIiwiY29uc3RydWN0b3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http2-wrapper/source/utils/js-stream-socket.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/http2-wrapper/source/utils/proxy-events.js":
/*!*****************************************************************!*\
  !*** ./node_modules/http2-wrapper/source/utils/proxy-events.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = (from, to, events)=>{\n    for (const event of events){\n        from.on(event, (...args)=>to.emit(event, ...args));\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvcHJveHktZXZlbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBRyxDQUFDQyxNQUFNQyxJQUFJQztJQUMzQixLQUFLLE1BQU1DLFNBQVNELE9BQVE7UUFDM0JGLEtBQUtJLEVBQUUsQ0FBQ0QsT0FBTyxDQUFDLEdBQUdFLE9BQVNKLEdBQUdLLElBQUksQ0FBQ0gsVUFBVUU7SUFDL0M7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25vdGlvbi14LWV4YW1wbGUtZnVsbC8uL25vZGVfbW9kdWxlcy9odHRwMi13cmFwcGVyL3NvdXJjZS91dGlscy9wcm94eS1ldmVudHMuanM/MGE3OSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gKGZyb20sIHRvLCBldmVudHMpID0+IHtcblx0Zm9yIChjb25zdCBldmVudCBvZiBldmVudHMpIHtcblx0XHRmcm9tLm9uKGV2ZW50LCAoLi4uYXJncykgPT4gdG8uZW1pdChldmVudCwgLi4uYXJncykpO1xuXHR9XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJmcm9tIiwidG8iLCJldmVudHMiLCJldmVudCIsIm9uIiwiYXJncyIsImVtaXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http2-wrapper/source/utils/proxy-events.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/http2-wrapper/source/utils/proxy-socket-handler.js":
/*!*************************************************************************!*\
  !*** ./node_modules/http2-wrapper/source/utils/proxy-socket-handler.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { ERR_HTTP2_NO_SOCKET_MANIPULATION } = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/http2-wrapper/source/utils/errors.js\");\n/* istanbul ignore file */ /* https://github.com/nodejs/node/blob/6eec858f34a40ffa489c1ec54bb24da72a28c781/lib/internal/http2/compat.js#L195-L272 */ const proxySocketHandler = {\n    has (stream, property) {\n        // Replaced [kSocket] with .socket\n        const reference = stream.session === undefined ? stream : stream.session.socket;\n        return property in stream || property in reference;\n    },\n    get (stream, property) {\n        switch(property){\n            case \"on\":\n            case \"once\":\n            case \"end\":\n            case \"emit\":\n            case \"destroy\":\n                return stream[property].bind(stream);\n            case \"writable\":\n            case \"destroyed\":\n                return stream[property];\n            case \"readable\":\n                if (stream.destroyed) {\n                    return false;\n                }\n                return stream.readable;\n            case \"setTimeout\":\n                {\n                    const { session } = stream;\n                    if (session !== undefined) {\n                        return session.setTimeout.bind(session);\n                    }\n                    return stream.setTimeout.bind(stream);\n                }\n            case \"write\":\n            case \"read\":\n            case \"pause\":\n            case \"resume\":\n                throw new ERR_HTTP2_NO_SOCKET_MANIPULATION();\n            default:\n                {\n                    // Replaced [kSocket] with .socket\n                    const reference = stream.session === undefined ? stream : stream.session.socket;\n                    const value = reference[property];\n                    return typeof value === \"function\" ? value.bind(reference) : value;\n                }\n        }\n    },\n    getPrototypeOf (stream) {\n        if (stream.session !== undefined) {\n            // Replaced [kSocket] with .socket\n            return Reflect.getPrototypeOf(stream.session.socket);\n        }\n        return Reflect.getPrototypeOf(stream);\n    },\n    set (stream, property, value) {\n        switch(property){\n            case \"writable\":\n            case \"readable\":\n            case \"destroyed\":\n            case \"on\":\n            case \"once\":\n            case \"end\":\n            case \"emit\":\n            case \"destroy\":\n                stream[property] = value;\n                return true;\n            case \"setTimeout\":\n                {\n                    const { session } = stream;\n                    if (session === undefined) {\n                        stream.setTimeout = value;\n                    } else {\n                        session.setTimeout = value;\n                    }\n                    return true;\n                }\n            case \"write\":\n            case \"read\":\n            case \"pause\":\n            case \"resume\":\n                throw new ERR_HTTP2_NO_SOCKET_MANIPULATION();\n            default:\n                {\n                    // Replaced [kSocket] with .socket\n                    const reference = stream.session === undefined ? stream : stream.session.socket;\n                    reference[property] = value;\n                    return true;\n                }\n        }\n    }\n};\nmodule.exports = proxySocketHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvcHJveHktc29ja2V0LWhhbmRsZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxNQUFNLEVBQUNBLGdDQUFnQyxFQUFDLEdBQUdDLG1CQUFPQSxDQUFDO0FBRW5ELHdCQUF3QixHQUN4Qix1SEFBdUgsR0FFdkgsTUFBTUMscUJBQXFCO0lBQzFCQyxLQUFJQyxNQUFNLEVBQUVDLFFBQVE7UUFDbkIsa0NBQWtDO1FBQ2xDLE1BQU1DLFlBQVlGLE9BQU9HLE9BQU8sS0FBS0MsWUFBWUosU0FBU0EsT0FBT0csT0FBTyxDQUFDRSxNQUFNO1FBQy9FLE9BQU8sWUFBYUwsVUFBWUMsWUFBWUM7SUFDN0M7SUFFQUksS0FBSU4sTUFBTSxFQUFFQyxRQUFRO1FBQ25CLE9BQVFBO1lBQ1AsS0FBSztZQUNMLEtBQUs7WUFDTCxLQUFLO1lBQ0wsS0FBSztZQUNMLEtBQUs7Z0JBQ0osT0FBT0QsTUFBTSxDQUFDQyxTQUFTLENBQUNNLElBQUksQ0FBQ1A7WUFDOUIsS0FBSztZQUNMLEtBQUs7Z0JBQ0osT0FBT0EsTUFBTSxDQUFDQyxTQUFTO1lBQ3hCLEtBQUs7Z0JBQ0osSUFBSUQsT0FBT1EsU0FBUyxFQUFFO29CQUNyQixPQUFPO2dCQUNSO2dCQUVBLE9BQU9SLE9BQU9TLFFBQVE7WUFDdkIsS0FBSztnQkFBYztvQkFDbEIsTUFBTSxFQUFDTixPQUFPLEVBQUMsR0FBR0g7b0JBQ2xCLElBQUlHLFlBQVlDLFdBQVc7d0JBQzFCLE9BQU9ELFFBQVFPLFVBQVUsQ0FBQ0gsSUFBSSxDQUFDSjtvQkFDaEM7b0JBRUEsT0FBT0gsT0FBT1UsVUFBVSxDQUFDSCxJQUFJLENBQUNQO2dCQUMvQjtZQUVBLEtBQUs7WUFDTCxLQUFLO1lBQ0wsS0FBSztZQUNMLEtBQUs7Z0JBQ0osTUFBTSxJQUFJSjtZQUNYO2dCQUFTO29CQUNSLGtDQUFrQztvQkFDbEMsTUFBTU0sWUFBWUYsT0FBT0csT0FBTyxLQUFLQyxZQUFZSixTQUFTQSxPQUFPRyxPQUFPLENBQUNFLE1BQU07b0JBQy9FLE1BQU1NLFFBQVFULFNBQVMsQ0FBQ0QsU0FBUztvQkFFakMsT0FBTyxPQUFPVSxVQUFVLGFBQWFBLE1BQU1KLElBQUksQ0FBQ0wsYUFBYVM7Z0JBQzlEO1FBQ0Q7SUFDRDtJQUVBQyxnQkFBZVosTUFBTTtRQUNwQixJQUFJQSxPQUFPRyxPQUFPLEtBQUtDLFdBQVc7WUFDakMsa0NBQWtDO1lBQ2xDLE9BQU9TLFFBQVFELGNBQWMsQ0FBQ1osT0FBT0csT0FBTyxDQUFDRSxNQUFNO1FBQ3BEO1FBRUEsT0FBT1EsUUFBUUQsY0FBYyxDQUFDWjtJQUMvQjtJQUVBYyxLQUFJZCxNQUFNLEVBQUVDLFFBQVEsRUFBRVUsS0FBSztRQUMxQixPQUFRVjtZQUNQLEtBQUs7WUFDTCxLQUFLO1lBQ0wsS0FBSztZQUNMLEtBQUs7WUFDTCxLQUFLO1lBQ0wsS0FBSztZQUNMLEtBQUs7WUFDTCxLQUFLO2dCQUNKRCxNQUFNLENBQUNDLFNBQVMsR0FBR1U7Z0JBQ25CLE9BQU87WUFDUixLQUFLO2dCQUFjO29CQUNsQixNQUFNLEVBQUNSLE9BQU8sRUFBQyxHQUFHSDtvQkFDbEIsSUFBSUcsWUFBWUMsV0FBVzt3QkFDMUJKLE9BQU9VLFVBQVUsR0FBR0M7b0JBQ3JCLE9BQU87d0JBQ05SLFFBQVFPLFVBQVUsR0FBR0M7b0JBQ3RCO29CQUVBLE9BQU87Z0JBQ1I7WUFFQSxLQUFLO1lBQ0wsS0FBSztZQUNMLEtBQUs7WUFDTCxLQUFLO2dCQUNKLE1BQU0sSUFBSWY7WUFDWDtnQkFBUztvQkFDUixrQ0FBa0M7b0JBQ2xDLE1BQU1NLFlBQVlGLE9BQU9HLE9BQU8sS0FBS0MsWUFBWUosU0FBU0EsT0FBT0csT0FBTyxDQUFDRSxNQUFNO29CQUMvRUgsU0FBUyxDQUFDRCxTQUFTLEdBQUdVO29CQUN0QixPQUFPO2dCQUNSO1FBQ0Q7SUFDRDtBQUNEO0FBRUFJLE9BQU9DLE9BQU8sR0FBR2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZXhhbXBsZS1mdWxsLy4vbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL3V0aWxzL3Byb3h5LXNvY2tldC1oYW5kbGVyLmpzPzU4ODAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3Qge0VSUl9IVFRQMl9OT19TT0NLRVRfTUFOSVBVTEFUSU9OfSA9IHJlcXVpcmUoJy4vZXJyb3JzLmpzJyk7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBmaWxlICovXG4vKiBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi82ZWVjODU4ZjM0YTQwZmZhNDg5YzFlYzU0YmIyNGRhNzJhMjhjNzgxL2xpYi9pbnRlcm5hbC9odHRwMi9jb21wYXQuanMjTDE5NS1MMjcyICovXG5cbmNvbnN0IHByb3h5U29ja2V0SGFuZGxlciA9IHtcblx0aGFzKHN0cmVhbSwgcHJvcGVydHkpIHtcblx0XHQvLyBSZXBsYWNlZCBba1NvY2tldF0gd2l0aCAuc29ja2V0XG5cdFx0Y29uc3QgcmVmZXJlbmNlID0gc3RyZWFtLnNlc3Npb24gPT09IHVuZGVmaW5lZCA/IHN0cmVhbSA6IHN0cmVhbS5zZXNzaW9uLnNvY2tldDtcblx0XHRyZXR1cm4gKHByb3BlcnR5IGluIHN0cmVhbSkgfHwgKHByb3BlcnR5IGluIHJlZmVyZW5jZSk7XG5cdH0sXG5cblx0Z2V0KHN0cmVhbSwgcHJvcGVydHkpIHtcblx0XHRzd2l0Y2ggKHByb3BlcnR5KSB7XG5cdFx0XHRjYXNlICdvbic6XG5cdFx0XHRjYXNlICdvbmNlJzpcblx0XHRcdGNhc2UgJ2VuZCc6XG5cdFx0XHRjYXNlICdlbWl0Jzpcblx0XHRcdGNhc2UgJ2Rlc3Ryb3knOlxuXHRcdFx0XHRyZXR1cm4gc3RyZWFtW3Byb3BlcnR5XS5iaW5kKHN0cmVhbSk7XG5cdFx0XHRjYXNlICd3cml0YWJsZSc6XG5cdFx0XHRjYXNlICdkZXN0cm95ZWQnOlxuXHRcdFx0XHRyZXR1cm4gc3RyZWFtW3Byb3BlcnR5XTtcblx0XHRcdGNhc2UgJ3JlYWRhYmxlJzpcblx0XHRcdFx0aWYgKHN0cmVhbS5kZXN0cm95ZWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gc3RyZWFtLnJlYWRhYmxlO1xuXHRcdFx0Y2FzZSAnc2V0VGltZW91dCc6IHtcblx0XHRcdFx0Y29uc3Qge3Nlc3Npb259ID0gc3RyZWFtO1xuXHRcdFx0XHRpZiAoc2Vzc2lvbiAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHNlc3Npb24uc2V0VGltZW91dC5iaW5kKHNlc3Npb24pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHN0cmVhbS5zZXRUaW1lb3V0LmJpbmQoc3RyZWFtKTtcblx0XHRcdH1cblxuXHRcdFx0Y2FzZSAnd3JpdGUnOlxuXHRcdFx0Y2FzZSAncmVhZCc6XG5cdFx0XHRjYXNlICdwYXVzZSc6XG5cdFx0XHRjYXNlICdyZXN1bWUnOlxuXHRcdFx0XHR0aHJvdyBuZXcgRVJSX0hUVFAyX05PX1NPQ0tFVF9NQU5JUFVMQVRJT04oKTtcblx0XHRcdGRlZmF1bHQ6IHtcblx0XHRcdFx0Ly8gUmVwbGFjZWQgW2tTb2NrZXRdIHdpdGggLnNvY2tldFxuXHRcdFx0XHRjb25zdCByZWZlcmVuY2UgPSBzdHJlYW0uc2Vzc2lvbiA9PT0gdW5kZWZpbmVkID8gc3RyZWFtIDogc3RyZWFtLnNlc3Npb24uc29ja2V0O1xuXHRcdFx0XHRjb25zdCB2YWx1ZSA9IHJlZmVyZW5jZVtwcm9wZXJ0eV07XG5cblx0XHRcdFx0cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLmJpbmQocmVmZXJlbmNlKSA6IHZhbHVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRnZXRQcm90b3R5cGVPZihzdHJlYW0pIHtcblx0XHRpZiAoc3RyZWFtLnNlc3Npb24gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Ly8gUmVwbGFjZWQgW2tTb2NrZXRdIHdpdGggLnNvY2tldFxuXHRcdFx0cmV0dXJuIFJlZmxlY3QuZ2V0UHJvdG90eXBlT2Yoc3RyZWFtLnNlc3Npb24uc29ja2V0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gUmVmbGVjdC5nZXRQcm90b3R5cGVPZihzdHJlYW0pO1xuXHR9LFxuXG5cdHNldChzdHJlYW0sIHByb3BlcnR5LCB2YWx1ZSkge1xuXHRcdHN3aXRjaCAocHJvcGVydHkpIHtcblx0XHRcdGNhc2UgJ3dyaXRhYmxlJzpcblx0XHRcdGNhc2UgJ3JlYWRhYmxlJzpcblx0XHRcdGNhc2UgJ2Rlc3Ryb3llZCc6XG5cdFx0XHRjYXNlICdvbic6XG5cdFx0XHRjYXNlICdvbmNlJzpcblx0XHRcdGNhc2UgJ2VuZCc6XG5cdFx0XHRjYXNlICdlbWl0Jzpcblx0XHRcdGNhc2UgJ2Rlc3Ryb3knOlxuXHRcdFx0XHRzdHJlYW1bcHJvcGVydHldID0gdmFsdWU7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0Y2FzZSAnc2V0VGltZW91dCc6IHtcblx0XHRcdFx0Y29uc3Qge3Nlc3Npb259ID0gc3RyZWFtO1xuXHRcdFx0XHRpZiAoc2Vzc2lvbiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0c3RyZWFtLnNldFRpbWVvdXQgPSB2YWx1ZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZXNzaW9uLnNldFRpbWVvdXQgPSB2YWx1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRjYXNlICd3cml0ZSc6XG5cdFx0XHRjYXNlICdyZWFkJzpcblx0XHRcdGNhc2UgJ3BhdXNlJzpcblx0XHRcdGNhc2UgJ3Jlc3VtZSc6XG5cdFx0XHRcdHRocm93IG5ldyBFUlJfSFRUUDJfTk9fU09DS0VUX01BTklQVUxBVElPTigpO1xuXHRcdFx0ZGVmYXVsdDoge1xuXHRcdFx0XHQvLyBSZXBsYWNlZCBba1NvY2tldF0gd2l0aCAuc29ja2V0XG5cdFx0XHRcdGNvbnN0IHJlZmVyZW5jZSA9IHN0cmVhbS5zZXNzaW9uID09PSB1bmRlZmluZWQgPyBzdHJlYW0gOiBzdHJlYW0uc2Vzc2lvbi5zb2NrZXQ7XG5cdFx0XHRcdHJlZmVyZW5jZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHByb3h5U29ja2V0SGFuZGxlcjtcbiJdLCJuYW1lcyI6WyJFUlJfSFRUUDJfTk9fU09DS0VUX01BTklQVUxBVElPTiIsInJlcXVpcmUiLCJwcm94eVNvY2tldEhhbmRsZXIiLCJoYXMiLCJzdHJlYW0iLCJwcm9wZXJ0eSIsInJlZmVyZW5jZSIsInNlc3Npb24iLCJ1bmRlZmluZWQiLCJzb2NrZXQiLCJnZXQiLCJiaW5kIiwiZGVzdHJveWVkIiwicmVhZGFibGUiLCJzZXRUaW1lb3V0IiwidmFsdWUiLCJnZXRQcm90b3R5cGVPZiIsIlJlZmxlY3QiLCJzZXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http2-wrapper/source/utils/proxy-socket-handler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/http2-wrapper/source/utils/validate-header-name.js":
/*!*************************************************************************!*\
  !*** ./node_modules/http2-wrapper/source/utils/validate-header-name.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { ERR_INVALID_HTTP_TOKEN } = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/http2-wrapper/source/utils/errors.js\");\nconst isRequestPseudoHeader = __webpack_require__(/*! ./is-request-pseudo-header.js */ \"(rsc)/./node_modules/http2-wrapper/source/utils/is-request-pseudo-header.js\");\nconst isValidHttpToken = /^[\\^`\\-\\w!#$%&*+.|~]+$/;\nmodule.exports = (name)=>{\n    if (typeof name !== \"string\" || !isValidHttpToken.test(name) && !isRequestPseudoHeader(name)) {\n        throw new ERR_INVALID_HTTP_TOKEN(\"Header name\", name);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvdmFsaWRhdGUtaGVhZGVyLW5hbWUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxNQUFNLEVBQUNBLHNCQUFzQixFQUFDLEdBQUdDLG1CQUFPQSxDQUFDO0FBQ3pDLE1BQU1DLHdCQUF3QkQsbUJBQU9BLENBQUM7QUFFdEMsTUFBTUUsbUJBQW1CO0FBRXpCQyxPQUFPQyxPQUFPLEdBQUdDLENBQUFBO0lBQ2hCLElBQUksT0FBT0EsU0FBUyxZQUFhLENBQUNILGlCQUFpQkksSUFBSSxDQUFDRCxTQUFTLENBQUNKLHNCQUFzQkksT0FBUTtRQUMvRixNQUFNLElBQUlOLHVCQUF1QixlQUFlTTtJQUNqRDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZXhhbXBsZS1mdWxsLy4vbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL3V0aWxzL3ZhbGlkYXRlLWhlYWRlci1uYW1lLmpzPzllZWUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3Qge0VSUl9JTlZBTElEX0hUVFBfVE9LRU59ID0gcmVxdWlyZSgnLi9lcnJvcnMuanMnKTtcbmNvbnN0IGlzUmVxdWVzdFBzZXVkb0hlYWRlciA9IHJlcXVpcmUoJy4vaXMtcmVxdWVzdC1wc2V1ZG8taGVhZGVyLmpzJyk7XG5cbmNvbnN0IGlzVmFsaWRIdHRwVG9rZW4gPSAvXltcXF5gXFwtXFx3ISMkJSYqKy58fl0rJC87XG5cbm1vZHVsZS5leHBvcnRzID0gbmFtZSA9PiB7XG5cdGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycgfHwgKCFpc1ZhbGlkSHR0cFRva2VuLnRlc3QobmFtZSkgJiYgIWlzUmVxdWVzdFBzZXVkb0hlYWRlcihuYW1lKSkpIHtcblx0XHR0aHJvdyBuZXcgRVJSX0lOVkFMSURfSFRUUF9UT0tFTignSGVhZGVyIG5hbWUnLCBuYW1lKTtcblx0fVxufTtcbiJdLCJuYW1lcyI6WyJFUlJfSU5WQUxJRF9IVFRQX1RPS0VOIiwicmVxdWlyZSIsImlzUmVxdWVzdFBzZXVkb0hlYWRlciIsImlzVmFsaWRIdHRwVG9rZW4iLCJtb2R1bGUiLCJleHBvcnRzIiwibmFtZSIsInRlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http2-wrapper/source/utils/validate-header-name.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/http2-wrapper/source/utils/validate-header-value.js":
/*!**************************************************************************!*\
  !*** ./node_modules/http2-wrapper/source/utils/validate-header-value.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { ERR_HTTP_INVALID_HEADER_VALUE, ERR_INVALID_CHAR } = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/http2-wrapper/source/utils/errors.js\");\nconst isInvalidHeaderValue = /[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/;\nmodule.exports = (name, value)=>{\n    if (typeof value === \"undefined\") {\n        throw new ERR_HTTP_INVALID_HEADER_VALUE(value, name);\n    }\n    if (isInvalidHeaderValue.test(value)) {\n        throw new ERR_INVALID_CHAR(\"header content\", name);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvdmFsaWRhdGUtaGVhZGVyLXZhbHVlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsTUFBTSxFQUNMQSw2QkFBNkIsRUFDN0JDLGdCQUFnQixFQUNoQixHQUFHQyxtQkFBT0EsQ0FBQztBQUVaLE1BQU1DLHVCQUF1QjtBQUU3QkMsT0FBT0MsT0FBTyxHQUFHLENBQUNDLE1BQU1DO0lBQ3ZCLElBQUksT0FBT0EsVUFBVSxhQUFhO1FBQ2pDLE1BQU0sSUFBSVAsOEJBQThCTyxPQUFPRDtJQUNoRDtJQUVBLElBQUlILHFCQUFxQkssSUFBSSxDQUFDRCxRQUFRO1FBQ3JDLE1BQU0sSUFBSU4saUJBQWlCLGtCQUFrQks7SUFDOUM7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25vdGlvbi14LWV4YW1wbGUtZnVsbC8uL25vZGVfbW9kdWxlcy9odHRwMi13cmFwcGVyL3NvdXJjZS91dGlscy92YWxpZGF0ZS1oZWFkZXItdmFsdWUuanM/NjI1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCB7XG5cdEVSUl9IVFRQX0lOVkFMSURfSEVBREVSX1ZBTFVFLFxuXHRFUlJfSU5WQUxJRF9DSEFSXG59ID0gcmVxdWlyZSgnLi9lcnJvcnMuanMnKTtcblxuY29uc3QgaXNJbnZhbGlkSGVhZGVyVmFsdWUgPSAvW15cXHRcXHUwMDIwLVxcdTAwN0VcXHUwMDgwLVxcdTAwRkZdLztcblxubW9kdWxlLmV4cG9ydHMgPSAobmFtZSwgdmFsdWUpID0+IHtcblx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHR0aHJvdyBuZXcgRVJSX0hUVFBfSU5WQUxJRF9IRUFERVJfVkFMVUUodmFsdWUsIG5hbWUpO1xuXHR9XG5cblx0aWYgKGlzSW52YWxpZEhlYWRlclZhbHVlLnRlc3QodmFsdWUpKSB7XG5cdFx0dGhyb3cgbmV3IEVSUl9JTlZBTElEX0NIQVIoJ2hlYWRlciBjb250ZW50JywgbmFtZSk7XG5cdH1cbn07XG4iXSwibmFtZXMiOlsiRVJSX0hUVFBfSU5WQUxJRF9IRUFERVJfVkFMVUUiLCJFUlJfSU5WQUxJRF9DSEFSIiwicmVxdWlyZSIsImlzSW52YWxpZEhlYWRlclZhbHVlIiwibW9kdWxlIiwiZXhwb3J0cyIsIm5hbWUiLCJ2YWx1ZSIsInRlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http2-wrapper/source/utils/validate-header-value.js\n");

/***/ })

};
;