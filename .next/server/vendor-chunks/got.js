"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/got";
exports.ids = ["vendor-chunks/got"];
exports.modules = {

/***/ "(rsc)/./node_modules/got/dist/source/as-promise/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/got/dist/source/as-promise/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ asPromise)\n/* harmony export */ });\n/* harmony import */ var node_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:events */ \"node:events\");\n/* harmony import */ var _sindresorhus_is__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\n/* harmony import */ var p_cancelable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! p-cancelable */ \"(rsc)/./node_modules/p-cancelable/index.js\");\n/* harmony import */ var _core_errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/errors.js */ \"(rsc)/./node_modules/got/dist/source/core/errors.js\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/index.js */ \"(rsc)/./node_modules/got/dist/source/core/index.js\");\n/* harmony import */ var _core_response_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/response.js */ \"(rsc)/./node_modules/got/dist/source/core/response.js\");\n/* harmony import */ var _core_utils_proxy_events_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../core/utils/proxy-events.js */ \"(rsc)/./node_modules/got/dist/source/core/utils/proxy-events.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/got/dist/source/as-promise/types.js\");\n\n\n\n\n\n\n\n\nconst proxiedRequestEvents = [\n    \"request\",\n    \"response\",\n    \"redirect\",\n    \"uploadProgress\",\n    \"downloadProgress\"\n];\nfunction asPromise(firstRequest) {\n    let globalRequest;\n    let globalResponse;\n    let normalizedOptions;\n    const emitter = new node_events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();\n    const promise = new p_cancelable__WEBPACK_IMPORTED_MODULE_1__[\"default\"]((resolve, reject, onCancel)=>{\n        onCancel(()=>{\n            globalRequest.destroy();\n        });\n        onCancel.shouldReject = false;\n        onCancel(()=>{\n            reject(new _types_js__WEBPACK_IMPORTED_MODULE_2__.CancelError(globalRequest));\n        });\n        const makeRequest = (retryCount)=>{\n            // Errors when a new request is made after the promise settles.\n            // Used to detect a race condition.\n            // See https://github.com/sindresorhus/got/issues/1489\n            onCancel(()=>{});\n            const request = firstRequest ?? new _core_index_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](undefined, undefined, normalizedOptions);\n            request.retryCount = retryCount;\n            request._noPipe = true;\n            globalRequest = request;\n            request.once(\"response\", async (response)=>{\n                // Parse body\n                const contentEncoding = (response.headers[\"content-encoding\"] ?? \"\").toLowerCase();\n                const isCompressed = contentEncoding === \"gzip\" || contentEncoding === \"deflate\" || contentEncoding === \"br\";\n                const { options } = request;\n                if (isCompressed && !options.decompress) {\n                    response.body = response.rawBody;\n                } else {\n                    try {\n                        response.body = (0,_core_response_js__WEBPACK_IMPORTED_MODULE_4__.parseBody)(response, options.responseType, options.parseJson, options.encoding);\n                    } catch (error) {\n                        // Fall back to `utf8`\n                        response.body = response.rawBody.toString();\n                        if ((0,_core_response_js__WEBPACK_IMPORTED_MODULE_4__.isResponseOk)(response)) {\n                            request._beforeError(error);\n                            return;\n                        }\n                    }\n                }\n                try {\n                    const hooks = options.hooks.afterResponse;\n                    for (const [index, hook] of hooks.entries()){\n                        // @ts-expect-error TS doesn't notice that CancelableRequest is a Promise\n                        // eslint-disable-next-line no-await-in-loop\n                        response = await hook(response, async (updatedOptions)=>{\n                            options.merge(updatedOptions);\n                            options.prefixUrl = \"\";\n                            if (updatedOptions.url) {\n                                options.url = updatedOptions.url;\n                            }\n                            // Remove any further hooks for that request, because we'll call them anyway.\n                            // The loop continues. We don't want duplicates (asPromise recursion).\n                            options.hooks.afterResponse = options.hooks.afterResponse.slice(0, index);\n                            throw new _core_errors_js__WEBPACK_IMPORTED_MODULE_5__.RetryError(request);\n                        });\n                        if (!(_sindresorhus_is__WEBPACK_IMPORTED_MODULE_6__.object(response) && _sindresorhus_is__WEBPACK_IMPORTED_MODULE_6__.number(response.statusCode) && !_sindresorhus_is__WEBPACK_IMPORTED_MODULE_6__.nullOrUndefined(response.body))) {\n                            throw new TypeError(\"The `afterResponse` hook returned an invalid value\");\n                        }\n                    }\n                } catch (error) {\n                    request._beforeError(error);\n                    return;\n                }\n                globalResponse = response;\n                if (!(0,_core_response_js__WEBPACK_IMPORTED_MODULE_4__.isResponseOk)(response)) {\n                    request._beforeError(new _core_errors_js__WEBPACK_IMPORTED_MODULE_5__.HTTPError(response));\n                    return;\n                }\n                request.destroy();\n                resolve(request.options.resolveBodyOnly ? response.body : response);\n            });\n            const onError = (error)=>{\n                if (promise.isCanceled) {\n                    return;\n                }\n                const { options } = request;\n                if (error instanceof _core_errors_js__WEBPACK_IMPORTED_MODULE_5__.HTTPError && !options.throwHttpErrors) {\n                    const { response } = error;\n                    request.destroy();\n                    resolve(request.options.resolveBodyOnly ? response.body : response);\n                    return;\n                }\n                reject(error);\n            };\n            request.once(\"error\", onError);\n            const previousBody = request.options?.body;\n            request.once(\"retry\", (newRetryCount, error)=>{\n                firstRequest = undefined;\n                const newBody = request.options.body;\n                if (previousBody === newBody && _sindresorhus_is__WEBPACK_IMPORTED_MODULE_6__.nodeStream(newBody)) {\n                    error.message = \"Cannot retry with consumed body stream\";\n                    onError(error);\n                    return;\n                }\n                // This is needed! We need to reuse `request.options` because they can get modified!\n                // For example, by calling `promise.json()`.\n                normalizedOptions = request.options;\n                makeRequest(newRetryCount);\n            });\n            (0,_core_utils_proxy_events_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(request, emitter, proxiedRequestEvents);\n            if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_6__.undefined(firstRequest)) {\n                void request.flush();\n            }\n        };\n        makeRequest(0);\n    });\n    promise.on = (event, fn)=>{\n        emitter.on(event, fn);\n        return promise;\n    };\n    const shortcut = (responseType)=>{\n        const newPromise = (async ()=>{\n            // Wait until downloading has ended\n            await promise;\n            const { options } = globalResponse.request;\n            return (0,_core_response_js__WEBPACK_IMPORTED_MODULE_4__.parseBody)(globalResponse, responseType, options.parseJson, options.encoding);\n        })();\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        Object.defineProperties(newPromise, Object.getOwnPropertyDescriptors(promise));\n        return newPromise;\n    };\n    promise.json = ()=>{\n        if (globalRequest.options) {\n            const { headers } = globalRequest.options;\n            if (!globalRequest.writableFinished && !(\"accept\" in headers)) {\n                headers.accept = \"application/json\";\n            }\n        }\n        return shortcut(\"json\");\n    };\n    promise.buffer = ()=>shortcut(\"buffer\");\n    promise.text = ()=>shortcut(\"text\");\n    return promise;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/as-promise/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/as-promise/types.js":
/*!**********************************************************!*\
  !*** ./node_modules/got/dist/source/as-promise/types.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CancelError: () => (/* binding */ CancelError)\n/* harmony export */ });\n/* harmony import */ var _core_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/errors.js */ \"(rsc)/./node_modules/got/dist/source/core/errors.js\");\n\n/**\nAn error to be thrown when the request is aborted with `.cancel()`.\n*/ class CancelError extends _core_errors_js__WEBPACK_IMPORTED_MODULE_0__.RequestError {\n    constructor(request){\n        super(\"Promise was canceled\", {}, request);\n        this.name = \"CancelError\";\n        this.code = \"ERR_CANCELED\";\n    }\n    /**\n    Whether the promise is canceled.\n    */ get isCanceled() {\n        return true;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2FzLXByb21pc2UvdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBaUQ7QUFDakQ7O0FBRUEsR0FDTyxNQUFNQyxvQkFBb0JELHlEQUFZQTtJQUN6Q0UsWUFBWUMsT0FBTyxDQUFFO1FBQ2pCLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHQTtRQUNsQyxJQUFJLENBQUNDLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0MsSUFBSSxHQUFHO0lBQ2hCO0lBQ0E7O0lBRUEsR0FDQSxJQUFJQyxhQUFhO1FBQ2IsT0FBTztJQUNYO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1leGFtcGxlLWZ1bGwvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2FzLXByb21pc2UvdHlwZXMuanM/MTJlOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0RXJyb3IgfSBmcm9tICcuLi9jb3JlL2Vycm9ycy5qcyc7XG4vKipcbkFuIGVycm9yIHRvIGJlIHRocm93biB3aGVuIHRoZSByZXF1ZXN0IGlzIGFib3J0ZWQgd2l0aCBgLmNhbmNlbCgpYC5cbiovXG5leHBvcnQgY2xhc3MgQ2FuY2VsRXJyb3IgZXh0ZW5kcyBSZXF1ZXN0RXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHJlcXVlc3QpIHtcbiAgICAgICAgc3VwZXIoJ1Byb21pc2Ugd2FzIGNhbmNlbGVkJywge30sIHJlcXVlc3QpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnQ2FuY2VsRXJyb3InO1xuICAgICAgICB0aGlzLmNvZGUgPSAnRVJSX0NBTkNFTEVEJztcbiAgICB9XG4gICAgLyoqXG4gICAgV2hldGhlciB0aGUgcHJvbWlzZSBpcyBjYW5jZWxlZC5cbiAgICAqL1xuICAgIGdldCBpc0NhbmNlbGVkKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiUmVxdWVzdEVycm9yIiwiQ2FuY2VsRXJyb3IiLCJjb25zdHJ1Y3RvciIsInJlcXVlc3QiLCJuYW1lIiwiY29kZSIsImlzQ2FuY2VsZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/as-promise/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/calculate-retry-delay.js":
/*!********************************************************************!*\
  !*** ./node_modules/got/dist/source/core/calculate-retry-delay.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst calculateRetryDelay = ({ attemptCount, retryOptions, error, retryAfter, computedValue })=>{\n    if (error.name === \"RetryError\") {\n        return 1;\n    }\n    if (attemptCount > retryOptions.limit) {\n        return 0;\n    }\n    const hasMethod = retryOptions.methods.includes(error.options.method);\n    const hasErrorCode = retryOptions.errorCodes.includes(error.code);\n    const hasStatusCode = error.response && retryOptions.statusCodes.includes(error.response.statusCode);\n    if (!hasMethod || !hasErrorCode && !hasStatusCode) {\n        return 0;\n    }\n    if (error.response) {\n        if (retryAfter) {\n            // In this case `computedValue` is `options.request.timeout`\n            if (retryAfter > computedValue) {\n                return 0;\n            }\n            return retryAfter;\n        }\n        if (error.response.statusCode === 413) {\n            return 0;\n        }\n    }\n    const noise = Math.random() * retryOptions.noise;\n    return Math.min(2 ** (attemptCount - 1) * 1000, retryOptions.backoffLimit) + noise;\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (calculateRetryDelay);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvY2FsY3VsYXRlLXJldHJ5LWRlbGF5LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxzQkFBc0IsQ0FBQyxFQUFFQyxZQUFZLEVBQUVDLFlBQVksRUFBRUMsS0FBSyxFQUFFQyxVQUFVLEVBQUVDLGFBQWEsRUFBRztJQUMxRixJQUFJRixNQUFNRyxJQUFJLEtBQUssY0FBYztRQUM3QixPQUFPO0lBQ1g7SUFDQSxJQUFJTCxlQUFlQyxhQUFhSyxLQUFLLEVBQUU7UUFDbkMsT0FBTztJQUNYO0lBQ0EsTUFBTUMsWUFBWU4sYUFBYU8sT0FBTyxDQUFDQyxRQUFRLENBQUNQLE1BQU1RLE9BQU8sQ0FBQ0MsTUFBTTtJQUNwRSxNQUFNQyxlQUFlWCxhQUFhWSxVQUFVLENBQUNKLFFBQVEsQ0FBQ1AsTUFBTVksSUFBSTtJQUNoRSxNQUFNQyxnQkFBZ0JiLE1BQU1jLFFBQVEsSUFBSWYsYUFBYWdCLFdBQVcsQ0FBQ1IsUUFBUSxDQUFDUCxNQUFNYyxRQUFRLENBQUNFLFVBQVU7SUFDbkcsSUFBSSxDQUFDWCxhQUFjLENBQUNLLGdCQUFnQixDQUFDRyxlQUFnQjtRQUNqRCxPQUFPO0lBQ1g7SUFDQSxJQUFJYixNQUFNYyxRQUFRLEVBQUU7UUFDaEIsSUFBSWIsWUFBWTtZQUNaLDREQUE0RDtZQUM1RCxJQUFJQSxhQUFhQyxlQUFlO2dCQUM1QixPQUFPO1lBQ1g7WUFDQSxPQUFPRDtRQUNYO1FBQ0EsSUFBSUQsTUFBTWMsUUFBUSxDQUFDRSxVQUFVLEtBQUssS0FBSztZQUNuQyxPQUFPO1FBQ1g7SUFDSjtJQUNBLE1BQU1DLFFBQVFDLEtBQUtDLE1BQU0sS0FBS3BCLGFBQWFrQixLQUFLO0lBQ2hELE9BQU9DLEtBQUtFLEdBQUcsQ0FBRSxLQUFPdEIsQ0FBQUEsZUFBZSxLQUFNLE1BQU9DLGFBQWFzQixZQUFZLElBQUlKO0FBQ3JGO0FBQ0EsaUVBQWVwQixtQkFBbUJBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3Rpb24teC1leGFtcGxlLWZ1bGwvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvY2FsY3VsYXRlLXJldHJ5LWRlbGF5LmpzPzhlMDUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY2FsY3VsYXRlUmV0cnlEZWxheSA9ICh7IGF0dGVtcHRDb3VudCwgcmV0cnlPcHRpb25zLCBlcnJvciwgcmV0cnlBZnRlciwgY29tcHV0ZWRWYWx1ZSwgfSkgPT4ge1xuICAgIGlmIChlcnJvci5uYW1lID09PSAnUmV0cnlFcnJvcicpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIGlmIChhdHRlbXB0Q291bnQgPiByZXRyeU9wdGlvbnMubGltaXQpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGNvbnN0IGhhc01ldGhvZCA9IHJldHJ5T3B0aW9ucy5tZXRob2RzLmluY2x1ZGVzKGVycm9yLm9wdGlvbnMubWV0aG9kKTtcbiAgICBjb25zdCBoYXNFcnJvckNvZGUgPSByZXRyeU9wdGlvbnMuZXJyb3JDb2Rlcy5pbmNsdWRlcyhlcnJvci5jb2RlKTtcbiAgICBjb25zdCBoYXNTdGF0dXNDb2RlID0gZXJyb3IucmVzcG9uc2UgJiYgcmV0cnlPcHRpb25zLnN0YXR1c0NvZGVzLmluY2x1ZGVzKGVycm9yLnJlc3BvbnNlLnN0YXR1c0NvZGUpO1xuICAgIGlmICghaGFzTWV0aG9kIHx8ICghaGFzRXJyb3JDb2RlICYmICFoYXNTdGF0dXNDb2RlKSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKGVycm9yLnJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXRyeUFmdGVyKSB7XG4gICAgICAgICAgICAvLyBJbiB0aGlzIGNhc2UgYGNvbXB1dGVkVmFsdWVgIGlzIGBvcHRpb25zLnJlcXVlc3QudGltZW91dGBcbiAgICAgICAgICAgIGlmIChyZXRyeUFmdGVyID4gY29tcHV0ZWRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJldHJ5QWZ0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yLnJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDQxMykge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgbm9pc2UgPSBNYXRoLnJhbmRvbSgpICogcmV0cnlPcHRpb25zLm5vaXNlO1xuICAgIHJldHVybiBNYXRoLm1pbigoKDIgKiogKGF0dGVtcHRDb3VudCAtIDEpKSAqIDEwMDApLCByZXRyeU9wdGlvbnMuYmFja29mZkxpbWl0KSArIG5vaXNlO1xufTtcbmV4cG9ydCBkZWZhdWx0IGNhbGN1bGF0ZVJldHJ5RGVsYXk7XG4iXSwibmFtZXMiOlsiY2FsY3VsYXRlUmV0cnlEZWxheSIsImF0dGVtcHRDb3VudCIsInJldHJ5T3B0aW9ucyIsImVycm9yIiwicmV0cnlBZnRlciIsImNvbXB1dGVkVmFsdWUiLCJuYW1lIiwibGltaXQiLCJoYXNNZXRob2QiLCJtZXRob2RzIiwiaW5jbHVkZXMiLCJvcHRpb25zIiwibWV0aG9kIiwiaGFzRXJyb3JDb2RlIiwiZXJyb3JDb2RlcyIsImNvZGUiLCJoYXNTdGF0dXNDb2RlIiwicmVzcG9uc2UiLCJzdGF0dXNDb2RlcyIsInN0YXR1c0NvZGUiLCJub2lzZSIsIk1hdGgiLCJyYW5kb20iLCJtaW4iLCJiYWNrb2ZmTGltaXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/calculate-retry-delay.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/errors.js":
/*!*****************************************************!*\
  !*** ./node_modules/got/dist/source/core/errors.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CacheError: () => (/* binding */ CacheError),\n/* harmony export */   HTTPError: () => (/* binding */ HTTPError),\n/* harmony export */   MaxRedirectsError: () => (/* binding */ MaxRedirectsError),\n/* harmony export */   ReadError: () => (/* binding */ ReadError),\n/* harmony export */   RequestError: () => (/* binding */ RequestError),\n/* harmony export */   RetryError: () => (/* binding */ RetryError),\n/* harmony export */   TimeoutError: () => (/* binding */ TimeoutError),\n/* harmony export */   UploadError: () => (/* binding */ UploadError)\n/* harmony export */ });\n/* harmony import */ var _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\n\n// A hacky check to prevent circular references.\nfunction isRequest(x) {\n    return _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.object(x) && \"_onResponse\" in x;\n}\n/**\nAn error to be thrown when a request fails.\nContains a `code` property with error class code, like `ECONNREFUSED`.\n*/ class RequestError extends Error {\n    constructor(message, error, self){\n        super(message);\n        Object.defineProperty(this, \"input\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stack\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"response\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"request\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"timings\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Error.captureStackTrace(this, this.constructor);\n        this.name = \"RequestError\";\n        this.code = error.code ?? \"ERR_GOT_REQUEST_ERROR\";\n        this.input = error.input;\n        if (isRequest(self)) {\n            Object.defineProperty(this, \"request\", {\n                enumerable: false,\n                value: self\n            });\n            Object.defineProperty(this, \"response\", {\n                enumerable: false,\n                value: self.response\n            });\n            this.options = self.options;\n        } else {\n            this.options = self;\n        }\n        this.timings = this.request?.timings;\n        // Recover the original stacktrace\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.string(error.stack) && _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.string(this.stack)) {\n            const indexOfMessage = this.stack.indexOf(this.message) + this.message.length;\n            const thisStackTrace = this.stack.slice(indexOfMessage).split(\"\\n\").reverse();\n            const errorStackTrace = error.stack.slice(error.stack.indexOf(error.message) + error.message.length).split(\"\\n\").reverse();\n            // Remove duplicated traces\n            while(errorStackTrace.length > 0 && errorStackTrace[0] === thisStackTrace[0]){\n                thisStackTrace.shift();\n            }\n            this.stack = `${this.stack.slice(0, indexOfMessage)}${thisStackTrace.reverse().join(\"\\n\")}${errorStackTrace.reverse().join(\"\\n\")}`;\n        }\n    }\n}\n/**\nAn error to be thrown when the server redirects you more than ten times.\nIncludes a `response` property.\n*/ class MaxRedirectsError extends RequestError {\n    constructor(request){\n        super(`Redirected ${request.options.maxRedirects} times. Aborting.`, {}, request);\n        this.name = \"MaxRedirectsError\";\n        this.code = \"ERR_TOO_MANY_REDIRECTS\";\n    }\n}\n/**\nAn error to be thrown when the server response code is not 2xx nor 3xx if `options.followRedirect` is `true`, but always except for 304.\nIncludes a `response` property.\n*/ // eslint-disable-next-line @typescript-eslint/naming-convention\nclass HTTPError extends RequestError {\n    constructor(response){\n        super(`Response code ${response.statusCode} (${response.statusMessage})`, {}, response.request);\n        this.name = \"HTTPError\";\n        this.code = \"ERR_NON_2XX_3XX_RESPONSE\";\n    }\n}\n/**\nAn error to be thrown when a cache method fails.\nFor example, if the database goes down or there's a filesystem error.\n*/ class CacheError extends RequestError {\n    constructor(error, request){\n        super(error.message, error, request);\n        this.name = \"CacheError\";\n        this.code = this.code === \"ERR_GOT_REQUEST_ERROR\" ? \"ERR_CACHE_ACCESS\" : this.code;\n    }\n}\n/**\nAn error to be thrown when the request body is a stream and an error occurs while reading from that stream.\n*/ class UploadError extends RequestError {\n    constructor(error, request){\n        super(error.message, error, request);\n        this.name = \"UploadError\";\n        this.code = this.code === \"ERR_GOT_REQUEST_ERROR\" ? \"ERR_UPLOAD\" : this.code;\n    }\n}\n/**\nAn error to be thrown when the request is aborted due to a timeout.\nIncludes an `event` and `timings` property.\n*/ class TimeoutError extends RequestError {\n    constructor(error, timings, request){\n        super(error.message, error, request);\n        Object.defineProperty(this, \"timings\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"event\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = \"TimeoutError\";\n        this.event = error.event;\n        this.timings = timings;\n    }\n}\n/**\nAn error to be thrown when reading from response stream fails.\n*/ class ReadError extends RequestError {\n    constructor(error, request){\n        super(error.message, error, request);\n        this.name = \"ReadError\";\n        this.code = this.code === \"ERR_GOT_REQUEST_ERROR\" ? \"ERR_READING_RESPONSE_STREAM\" : this.code;\n    }\n}\n/**\nAn error which always triggers a new retry when thrown.\n*/ class RetryError extends RequestError {\n    constructor(request){\n        super(\"Retrying\", {}, request);\n        this.name = \"RetryError\";\n        this.code = \"ERR_RETRYING\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/index.js":
/*!****************************************************!*\
  !*** ./node_modules/got/dist/source/core/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Request)\n/* harmony export */ });\n/* harmony import */ var node_process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:process */ \"node:process\");\n/* harmony import */ var node_buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:buffer */ \"node:buffer\");\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var node_url__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:url */ \"node:url\");\n/* harmony import */ var node_http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! node:http */ \"node:http\");\n/* harmony import */ var _szmarczak_http_timer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @szmarczak/http-timer */ \"(rsc)/./node_modules/@szmarczak/http-timer/dist/source/index.js\");\n/* harmony import */ var cacheable_request__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! cacheable-request */ \"(rsc)/./node_modules/cacheable-request/src/index.js\");\n/* harmony import */ var decompress_response__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! decompress-response */ \"(rsc)/./node_modules/decompress-response/index.js\");\n/* harmony import */ var _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\n/* harmony import */ var get_stream__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! get-stream */ \"(rsc)/./node_modules/get-stream/index.js\");\n/* harmony import */ var form_data_encoder__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! form-data-encoder */ \"(rsc)/./node_modules/form-data-encoder/lib/esm/index.js\");\n/* harmony import */ var _utils_get_body_size_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./utils/get-body-size.js */ \"(rsc)/./node_modules/got/dist/source/core/utils/get-body-size.js\");\n/* harmony import */ var _utils_is_form_data_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils/is-form-data.js */ \"(rsc)/./node_modules/got/dist/source/core/utils/is-form-data.js\");\n/* harmony import */ var _utils_proxy_events_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./utils/proxy-events.js */ \"(rsc)/./node_modules/got/dist/source/core/utils/proxy-events.js\");\n/* harmony import */ var _timed_out_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./timed-out.js */ \"(rsc)/./node_modules/got/dist/source/core/timed-out.js\");\n/* harmony import */ var _utils_url_to_options_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./utils/url-to-options.js */ \"(rsc)/./node_modules/got/dist/source/core/utils/url-to-options.js\");\n/* harmony import */ var _utils_weakable_map_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils/weakable-map.js */ \"(rsc)/./node_modules/got/dist/source/core/utils/weakable-map.js\");\n/* harmony import */ var _calculate_retry_delay_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./calculate-retry-delay.js */ \"(rsc)/./node_modules/got/dist/source/core/calculate-retry-delay.js\");\n/* harmony import */ var _options_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./options.js */ \"(rsc)/./node_modules/got/dist/source/core/options.js\");\n/* harmony import */ var _response_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./response.js */ \"(rsc)/./node_modules/got/dist/source/core/response.js\");\n/* harmony import */ var _utils_is_client_request_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./utils/is-client-request.js */ \"(rsc)/./node_modules/got/dist/source/core/utils/is-client-request.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/got/dist/source/core/errors.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst supportsBrotli = _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.string(node_process__WEBPACK_IMPORTED_MODULE_0__.versions.brotli);\nconst methodsWithoutBody = new Set([\n    \"GET\",\n    \"HEAD\"\n]);\nconst cacheableStore = new _utils_weakable_map_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"]();\nconst redirectCodes = new Set([\n    300,\n    301,\n    302,\n    303,\n    304,\n    307,\n    308\n]);\nconst proxiedRequestEvents = [\n    \"socket\",\n    \"connect\",\n    \"continue\",\n    \"information\",\n    \"upgrade\"\n];\nconst noop = ()=>{};\nvar Request;\nRequest = class Request extends node_stream__WEBPACK_IMPORTED_MODULE_2__.Duplex {\n    constructor(url, options, defaults){\n        super({\n            // Don't destroy immediately, as the error may be emitted on unsuccessful retry\n            autoDestroy: false,\n            // It needs to be zero because we're just proxying the data to another stream\n            highWaterMark: 0\n        });\n        Object.defineProperty(this, \"constructor\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_noPipe\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // @ts-expect-error https://github.com/microsoft/TypeScript/issues/9568\n        Object.defineProperty(this, \"options\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"response\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"requestUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"redirectUrls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"retryCount\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_stopRetry\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_downloadedSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_uploadedSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_stopReading\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_pipedServerResponses\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_request\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_responseSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_bodySize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_unproxyEvents\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_isFromCache\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_cannotHaveBody\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_triggerRead\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_cancelTimeouts\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_nativeResponse\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_flushed\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_aborted\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // We need this because `this._request` if `undefined` when using cache\n        Object.defineProperty(this, \"_requestInitialized\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this._downloadedSize = 0;\n        this._uploadedSize = 0;\n        this._stopReading = false;\n        this._pipedServerResponses = new Set();\n        this._cannotHaveBody = false;\n        this._unproxyEvents = noop;\n        this._triggerRead = false;\n        this._cancelTimeouts = noop;\n        this._jobs = [];\n        this._flushed = false;\n        this._requestInitialized = false;\n        this._aborted = false;\n        this.redirectUrls = [];\n        this.retryCount = 0;\n        this._stopRetry = noop;\n        const unlockWrite = ()=>{\n            this._unlockWrite();\n        };\n        const lockWrite = ()=>{\n            this._lockWrite();\n        };\n        this.on(\"pipe\", (source)=>{\n            source.prependListener(\"data\", unlockWrite);\n            source.on(\"data\", lockWrite);\n            source.prependListener(\"end\", unlockWrite);\n            source.on(\"end\", lockWrite);\n        });\n        this.on(\"unpipe\", (source)=>{\n            source.off(\"data\", unlockWrite);\n            source.off(\"data\", lockWrite);\n            source.off(\"end\", unlockWrite);\n            source.off(\"end\", lockWrite);\n        });\n        this.on(\"pipe\", (source)=>{\n            if (source.headers) {\n                Object.assign(this.options.headers, source.headers);\n            }\n        });\n        this.on(\"newListener\", (event)=>{\n            if (event === \"retry\" && this.listenerCount(\"retry\") > 0) {\n                throw new Error(\"A retry listener has been attached already.\");\n            }\n        });\n        try {\n            this.options = new _options_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"](url, options, defaults);\n            if (!this.options.url) {\n                if (this.options.prefixUrl === \"\") {\n                    throw new TypeError(\"Missing `url` property\");\n                }\n                this.options.url = \"\";\n            }\n            this.requestUrl = this.options.url;\n        } catch (error) {\n            const { options } = error;\n            if (options) {\n                this.options = options;\n            }\n            this.flush = async ()=>{\n                this.flush = async ()=>{};\n                this.destroy(error);\n            };\n            return;\n        }\n        const { json, body, form } = this.options;\n        if (json || body || form) {\n            this._lockWrite();\n        }\n        // Important! If you replace `body` in a handler with another stream, make sure it's readable first.\n        // The below is run only once.\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.nodeStream(body)) {\n            body.once(\"error\", (error)=>{\n                if (this._flushed) {\n                    this._beforeError(new _errors_js__WEBPACK_IMPORTED_MODULE_13__.UploadError(error, this));\n                } else {\n                    this.flush = async ()=>{\n                        this.flush = async ()=>{};\n                        this._beforeError(new _errors_js__WEBPACK_IMPORTED_MODULE_13__.UploadError(error, this));\n                    };\n                }\n            });\n        }\n    }\n    async flush() {\n        if (this._flushed) {\n            return;\n        }\n        this._flushed = true;\n        try {\n            await this._finalizeBody();\n            if (this.destroyed) {\n                return;\n            }\n            await this._makeRequest();\n            if (this.destroyed) {\n                this._request?.destroy();\n                return;\n            }\n            // Queued writes etc.\n            for (const job of this._jobs){\n                job();\n            }\n            // Prevent memory leak\n            this._jobs.length = 0;\n            this._requestInitialized = true;\n        } catch (error) {\n            this._beforeError(error);\n        }\n    }\n    _beforeError(error) {\n        if (this._stopReading) {\n            return;\n        }\n        const { response, options } = this;\n        const attemptCount = this.retryCount + (error.name === \"RetryError\" ? 0 : 1);\n        this._stopReading = true;\n        if (!(error instanceof _errors_js__WEBPACK_IMPORTED_MODULE_13__.RequestError)) {\n            error = new _errors_js__WEBPACK_IMPORTED_MODULE_13__.RequestError(error.message, error, this);\n        }\n        const typedError = error;\n        void (async ()=>{\n            // Node.js parser is really weird.\n            // It emits post-request Parse Errors on the same instance as previous request. WTF.\n            // Therefore we need to check if it has been destroyed as well.\n            //\n            // Furthermore, Node.js 16 `response.destroy()` doesn't immediately destroy the socket,\n            // but makes the response unreadable. So we additionally need to check `response.readable`.\n            if (response?.readable && !response.rawBody && !this._request?.socket?.destroyed) {\n                // @types/node has incorrect typings. `setEncoding` accepts `null` as well.\n                response.setEncoding(this.readableEncoding);\n                const success = await this._setRawBody(response);\n                if (success) {\n                    response.body = response.rawBody.toString();\n                }\n            }\n            if (this.listenerCount(\"retry\") !== 0) {\n                let backoff;\n                try {\n                    let retryAfter;\n                    if (response && \"retry-after\" in response.headers) {\n                        retryAfter = Number(response.headers[\"retry-after\"]);\n                        if (Number.isNaN(retryAfter)) {\n                            retryAfter = Date.parse(response.headers[\"retry-after\"]) - Date.now();\n                            if (retryAfter <= 0) {\n                                retryAfter = 1;\n                            }\n                        } else {\n                            retryAfter *= 1000;\n                        }\n                    }\n                    const retryOptions = options.retry;\n                    backoff = await retryOptions.calculateDelay({\n                        attemptCount,\n                        retryOptions,\n                        error: typedError,\n                        retryAfter,\n                        computedValue: (0,_calculate_retry_delay_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"])({\n                            attemptCount,\n                            retryOptions,\n                            error: typedError,\n                            retryAfter,\n                            computedValue: retryOptions.maxRetryAfter ?? options.timeout.request ?? Number.POSITIVE_INFINITY\n                        })\n                    });\n                } catch (error_) {\n                    void this._error(new _errors_js__WEBPACK_IMPORTED_MODULE_13__.RequestError(error_.message, error_, this));\n                    return;\n                }\n                if (backoff) {\n                    await new Promise((resolve)=>{\n                        const timeout = setTimeout(resolve, backoff);\n                        this._stopRetry = ()=>{\n                            clearTimeout(timeout);\n                            resolve();\n                        };\n                    });\n                    // Something forced us to abort the retry\n                    if (this.destroyed) {\n                        return;\n                    }\n                    try {\n                        for (const hook of this.options.hooks.beforeRetry){\n                            // eslint-disable-next-line no-await-in-loop\n                            await hook(typedError, this.retryCount + 1);\n                        }\n                    } catch (error_) {\n                        void this._error(new _errors_js__WEBPACK_IMPORTED_MODULE_13__.RequestError(error_.message, error, this));\n                        return;\n                    }\n                    // Something forced us to abort the retry\n                    if (this.destroyed) {\n                        return;\n                    }\n                    this.destroy();\n                    this.emit(\"retry\", this.retryCount + 1, error, (updatedOptions)=>{\n                        const request = new Request(options.url, updatedOptions, options);\n                        request.retryCount = this.retryCount + 1;\n                        node_process__WEBPACK_IMPORTED_MODULE_0__.nextTick(()=>{\n                            void request.flush();\n                        });\n                        return request;\n                    });\n                    return;\n                }\n            }\n            void this._error(typedError);\n        })();\n    }\n    _read() {\n        this._triggerRead = true;\n        const { response } = this;\n        if (response && !this._stopReading) {\n            // We cannot put this in the `if` above\n            // because `.read()` also triggers the `end` event\n            if (response.readableLength) {\n                this._triggerRead = false;\n            }\n            let data;\n            while((data = response.read()) !== null){\n                this._downloadedSize += data.length; // eslint-disable-line @typescript-eslint/restrict-plus-operands\n                const progress = this.downloadProgress;\n                if (progress.percent < 1) {\n                    this.emit(\"downloadProgress\", progress);\n                }\n                this.push(data);\n            }\n        }\n    }\n    _write(chunk, encoding, callback) {\n        const write = ()=>{\n            this._writeRequest(chunk, encoding, callback);\n        };\n        if (this._requestInitialized) {\n            write();\n        } else {\n            this._jobs.push(write);\n        }\n    }\n    _final(callback) {\n        const endRequest = ()=>{\n            // We need to check if `this._request` is present,\n            // because it isn't when we use cache.\n            if (!this._request || this._request.destroyed) {\n                callback();\n                return;\n            }\n            this._request.end((error)=>{\n                // The request has been destroyed before `_final` finished.\n                // See https://github.com/nodejs/node/issues/39356\n                if (this._request._writableState?.errored) {\n                    return;\n                }\n                if (!error) {\n                    this._bodySize = this._uploadedSize;\n                    this.emit(\"uploadProgress\", this.uploadProgress);\n                    this._request.emit(\"upload-complete\");\n                }\n                callback(error);\n            });\n        };\n        if (this._requestInitialized) {\n            endRequest();\n        } else {\n            this._jobs.push(endRequest);\n        }\n    }\n    _destroy(error, callback) {\n        this._stopReading = true;\n        this.flush = async ()=>{};\n        // Prevent further retries\n        this._stopRetry();\n        this._cancelTimeouts();\n        if (this.options) {\n            const { body } = this.options;\n            if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.nodeStream(body)) {\n                body.destroy();\n            }\n        }\n        if (this._request) {\n            this._request.destroy();\n        }\n        if (error !== null && !_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined(error) && !(error instanceof _errors_js__WEBPACK_IMPORTED_MODULE_13__.RequestError)) {\n            error = new _errors_js__WEBPACK_IMPORTED_MODULE_13__.RequestError(error.message, error, this);\n        }\n        callback(error);\n    }\n    pipe(destination, options) {\n        if (destination instanceof node_http__WEBPACK_IMPORTED_MODULE_4__.ServerResponse) {\n            this._pipedServerResponses.add(destination);\n        }\n        return super.pipe(destination, options);\n    }\n    unpipe(destination) {\n        if (destination instanceof node_http__WEBPACK_IMPORTED_MODULE_4__.ServerResponse) {\n            this._pipedServerResponses.delete(destination);\n        }\n        super.unpipe(destination);\n        return this;\n    }\n    _lockWrite() {\n        const onLockedWrite = ()=>{\n            throw new TypeError(\"The payload has been already provided\");\n        };\n        this.write = onLockedWrite;\n        this.end = onLockedWrite;\n    }\n    _unlockWrite() {\n        this.write = super.write;\n        this.end = super.end;\n    }\n    async _finalizeBody() {\n        const { options } = this;\n        const { headers } = options;\n        const isForm = !_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined(options.form);\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        const isJSON = !_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined(options.json);\n        const isBody = !_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined(options.body);\n        const cannotHaveBody = methodsWithoutBody.has(options.method) && !(options.method === \"GET\" && options.allowGetBody);\n        this._cannotHaveBody = cannotHaveBody;\n        if (isForm || isJSON || isBody) {\n            if (cannotHaveBody) {\n                throw new TypeError(`The \\`${options.method}\\` method cannot be used with a body`);\n            }\n            // Serialize body\n            const noContentType = !_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.string(headers[\"content-type\"]);\n            if (isBody) {\n                // Body is spec-compliant FormData\n                if ((0,form_data_encoder__WEBPACK_IMPORTED_MODULE_9__.isFormDataLike)(options.body)) {\n                    const encoder = new form_data_encoder__WEBPACK_IMPORTED_MODULE_9__.FormDataEncoder(options.body);\n                    if (noContentType) {\n                        headers[\"content-type\"] = encoder.headers[\"Content-Type\"];\n                    }\n                    headers[\"content-length\"] = encoder.headers[\"Content-Length\"];\n                    options.body = encoder.encode();\n                }\n                // Special case for https://github.com/form-data/form-data\n                if ((0,_utils_is_form_data_js__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(options.body) && noContentType) {\n                    headers[\"content-type\"] = `multipart/form-data; boundary=${options.body.getBoundary()}`;\n                }\n            } else if (isForm) {\n                if (noContentType) {\n                    headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\n                }\n                const { form } = options;\n                options.form = undefined;\n                options.body = new node_url__WEBPACK_IMPORTED_MODULE_3__.URLSearchParams(form).toString();\n            } else {\n                if (noContentType) {\n                    headers[\"content-type\"] = \"application/json\";\n                }\n                const { json } = options;\n                options.json = undefined;\n                options.body = options.stringifyJson(json);\n            }\n            const uploadBodySize = await (0,_utils_get_body_size_js__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(options.body, options.headers);\n            // See https://tools.ietf.org/html/rfc7230#section-3.3.2\n            // A user agent SHOULD send a Content-Length in a request message when\n            // no Transfer-Encoding is sent and the request method defines a meaning\n            // for an enclosed payload body.  For example, a Content-Length header\n            // field is normally sent in a POST request even when the value is 0\n            // (indicating an empty payload body).  A user agent SHOULD NOT send a\n            // Content-Length header field when the request message does not contain\n            // a payload body and the method semantics do not anticipate such a\n            // body.\n            if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined(headers[\"content-length\"]) && _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined(headers[\"transfer-encoding\"]) && !cannotHaveBody && !_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined(uploadBodySize)) {\n                headers[\"content-length\"] = String(uploadBodySize);\n            }\n        } else if (cannotHaveBody) {\n            this._lockWrite();\n        } else {\n            this._unlockWrite();\n        }\n        if (options.responseType === \"json\" && !(\"accept\" in options.headers)) {\n            options.headers.accept = \"application/json\";\n        }\n        this._bodySize = Number(headers[\"content-length\"]) || undefined;\n    }\n    async _onResponseBase(response) {\n        // This will be called e.g. when using cache so we need to check if this request has been aborted.\n        if (this.isAborted) {\n            return;\n        }\n        const { options } = this;\n        const { url } = options;\n        this._nativeResponse = response;\n        if (options.decompress) {\n            response = decompress_response__WEBPACK_IMPORTED_MODULE_7__(response);\n        }\n        const statusCode = response.statusCode;\n        const typedResponse = response;\n        typedResponse.statusMessage = typedResponse.statusMessage ? typedResponse.statusMessage : node_http__WEBPACK_IMPORTED_MODULE_4__.STATUS_CODES[statusCode];\n        typedResponse.url = options.url.toString();\n        typedResponse.requestUrl = this.requestUrl;\n        typedResponse.redirectUrls = this.redirectUrls;\n        typedResponse.request = this;\n        typedResponse.isFromCache = this._nativeResponse.fromCache ?? false;\n        typedResponse.ip = this.ip;\n        typedResponse.retryCount = this.retryCount;\n        this._isFromCache = typedResponse.isFromCache;\n        this._responseSize = Number(response.headers[\"content-length\"]) || undefined;\n        this.response = typedResponse;\n        response.once(\"end\", ()=>{\n            this._responseSize = this._downloadedSize;\n            this.emit(\"downloadProgress\", this.downloadProgress);\n        });\n        response.once(\"error\", (error)=>{\n            this._aborted = true;\n            // Force clean-up, because some packages don't do this.\n            // TODO: Fix decompress-response\n            response.destroy();\n            this._beforeError(new _errors_js__WEBPACK_IMPORTED_MODULE_13__.ReadError(error, this));\n        });\n        response.once(\"aborted\", ()=>{\n            this._aborted = true;\n            this._beforeError(new _errors_js__WEBPACK_IMPORTED_MODULE_13__.ReadError({\n                name: \"Error\",\n                message: \"The server aborted pending request\",\n                code: \"ECONNRESET\"\n            }, this));\n        });\n        this.emit(\"downloadProgress\", this.downloadProgress);\n        const rawCookies = response.headers[\"set-cookie\"];\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.object(options.cookieJar) && rawCookies) {\n            let promises = rawCookies.map(async (rawCookie)=>options.cookieJar.setCookie(rawCookie, url.toString()));\n            if (options.ignoreInvalidCookies) {\n                promises = promises.map(async (promise)=>{\n                    try {\n                        await promise;\n                    } catch  {}\n                });\n            }\n            try {\n                await Promise.all(promises);\n            } catch (error) {\n                this._beforeError(error);\n                return;\n            }\n        }\n        // The above is running a promise, therefore we need to check if this request has been aborted yet again.\n        if (this.isAborted) {\n            return;\n        }\n        if (options.followRedirect && response.headers.location && redirectCodes.has(statusCode)) {\n            // We're being redirected, we don't care about the response.\n            // It'd be best to abort the request, but we can't because\n            // we would have to sacrifice the TCP connection. We don't want that.\n            response.resume();\n            this._cancelTimeouts();\n            this._unproxyEvents();\n            if (this.redirectUrls.length >= options.maxRedirects) {\n                this._beforeError(new _errors_js__WEBPACK_IMPORTED_MODULE_13__.MaxRedirectsError(this));\n                return;\n            }\n            this._request = undefined;\n            const updatedOptions = new _options_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"](undefined, undefined, this.options);\n            const shouldBeGet = statusCode === 303 && updatedOptions.method !== \"GET\" && updatedOptions.method !== \"HEAD\";\n            if (shouldBeGet || updatedOptions.methodRewriting) {\n                // Server responded with \"see other\", indicating that the resource exists at another location,\n                // and the client should request it from that location via GET or HEAD.\n                updatedOptions.method = \"GET\";\n                updatedOptions.body = undefined;\n                updatedOptions.json = undefined;\n                updatedOptions.form = undefined;\n                delete updatedOptions.headers[\"content-length\"];\n            }\n            try {\n                // We need this in order to support UTF-8\n                const redirectBuffer = node_buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(response.headers.location, \"binary\").toString();\n                const redirectUrl = new node_url__WEBPACK_IMPORTED_MODULE_3__.URL(redirectBuffer, url);\n                // Redirecting to a different site, clear sensitive data.\n                if (redirectUrl.hostname !== url.hostname || redirectUrl.port !== url.port) {\n                    if (\"host\" in updatedOptions.headers) {\n                        delete updatedOptions.headers.host;\n                    }\n                    if (\"cookie\" in updatedOptions.headers) {\n                        delete updatedOptions.headers.cookie;\n                    }\n                    if (\"authorization\" in updatedOptions.headers) {\n                        delete updatedOptions.headers.authorization;\n                    }\n                    if (updatedOptions.username || updatedOptions.password) {\n                        updatedOptions.username = \"\";\n                        updatedOptions.password = \"\";\n                    }\n                } else {\n                    redirectUrl.username = updatedOptions.username;\n                    redirectUrl.password = updatedOptions.password;\n                }\n                this.redirectUrls.push(redirectUrl);\n                updatedOptions.prefixUrl = \"\";\n                updatedOptions.url = redirectUrl;\n                for (const hook of updatedOptions.hooks.beforeRedirect){\n                    // eslint-disable-next-line no-await-in-loop\n                    await hook(updatedOptions, typedResponse);\n                }\n                this.emit(\"redirect\", updatedOptions, typedResponse);\n                this.options = updatedOptions;\n                await this._makeRequest();\n            } catch (error) {\n                this._beforeError(error);\n                return;\n            }\n            return;\n        }\n        if (options.isStream && options.throwHttpErrors && !(0,_response_js__WEBPACK_IMPORTED_MODULE_17__.isResponseOk)(typedResponse)) {\n            this._beforeError(new _errors_js__WEBPACK_IMPORTED_MODULE_13__.HTTPError(typedResponse));\n            return;\n        }\n        response.on(\"readable\", ()=>{\n            if (this._triggerRead) {\n                this._read();\n            }\n        });\n        this.on(\"resume\", ()=>{\n            response.resume();\n        });\n        this.on(\"pause\", ()=>{\n            response.pause();\n        });\n        response.once(\"end\", ()=>{\n            this.push(null);\n        });\n        if (this._noPipe) {\n            const success = await this._setRawBody();\n            if (success) {\n                this.emit(\"response\", response);\n            }\n            return;\n        }\n        this.emit(\"response\", response);\n        for (const destination of this._pipedServerResponses){\n            if (destination.headersSent) {\n                continue;\n            }\n            // eslint-disable-next-line guard-for-in\n            for(const key in response.headers){\n                const isAllowed = options.decompress ? key !== \"content-encoding\" : true;\n                const value = response.headers[key];\n                if (isAllowed) {\n                    destination.setHeader(key, value);\n                }\n            }\n            destination.statusCode = statusCode;\n        }\n    }\n    async _setRawBody(from = this) {\n        if (from.readableEnded) {\n            return false;\n        }\n        try {\n            // Errors are emitted via the `error` event\n            const rawBody = await (0,get_stream__WEBPACK_IMPORTED_MODULE_8__.buffer)(from);\n            // On retry Request is destroyed with no error, therefore the above will successfully resolve.\n            // So in order to check if this was really successfull, we need to check if it has been properly ended.\n            if (!this.isAborted) {\n                this.response.rawBody = rawBody;\n                return true;\n            }\n        } catch  {}\n        return false;\n    }\n    async _onResponse(response) {\n        try {\n            await this._onResponseBase(response);\n        } catch (error) {\n            /* istanbul ignore next: better safe than sorry */ this._beforeError(error);\n        }\n    }\n    _onRequest(request) {\n        const { options } = this;\n        const { timeout, url } = options;\n        (0,_szmarczak_http_timer__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(request);\n        if (this.options.http2) {\n            // Unset stream timeout, as the `timeout` option was used only for connection timeout.\n            request.setTimeout(0);\n        }\n        this._cancelTimeouts = (0,_timed_out_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(request, timeout, url);\n        const responseEventName = options.cache ? \"cacheableResponse\" : \"response\";\n        request.once(responseEventName, (response)=>{\n            void this._onResponse(response);\n        });\n        request.once(\"error\", (error)=>{\n            this._aborted = true;\n            // Force clean-up, because some packages (e.g. nock) don't do this.\n            request.destroy();\n            error = error instanceof _timed_out_js__WEBPACK_IMPORTED_MODULE_18__.TimeoutError ? new _errors_js__WEBPACK_IMPORTED_MODULE_13__.TimeoutError(error, this.timings, this) : new _errors_js__WEBPACK_IMPORTED_MODULE_13__.RequestError(error.message, error, this);\n            this._beforeError(error);\n        });\n        this._unproxyEvents = (0,_utils_proxy_events_js__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(request, this, proxiedRequestEvents);\n        this._request = request;\n        this.emit(\"uploadProgress\", this.uploadProgress);\n        this._sendBody();\n        this.emit(\"request\", request);\n    }\n    async _asyncWrite(chunk) {\n        return new Promise((resolve, reject)=>{\n            super.write(chunk, (error)=>{\n                if (error) {\n                    reject(error);\n                    return;\n                }\n                resolve();\n            });\n        });\n    }\n    _sendBody() {\n        // Send body\n        const { body } = this.options;\n        const currentRequest = this.redirectUrls.length === 0 ? this : this._request ?? this;\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.nodeStream(body)) {\n            body.pipe(currentRequest);\n        } else if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.generator(body) || _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.asyncGenerator(body)) {\n            (async ()=>{\n                try {\n                    for await (const chunk of body){\n                        await this._asyncWrite(chunk);\n                    }\n                    super.end();\n                } catch (error) {\n                    this._beforeError(error);\n                }\n            })();\n        } else {\n            this._unlockWrite();\n            if (!_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined(body)) {\n                this._writeRequest(body, undefined, ()=>{});\n                currentRequest.end();\n                this._lockWrite();\n            } else if (this._cannotHaveBody || this._noPipe) {\n                currentRequest.end();\n                this._lockWrite();\n            }\n        }\n    }\n    _prepareCache(cache) {\n        if (!cacheableStore.has(cache)) {\n            cacheableStore.set(cache, new cacheable_request__WEBPACK_IMPORTED_MODULE_6__((requestOptions, handler)=>{\n                const result = requestOptions._request(requestOptions, handler);\n                // TODO: remove this when `cacheable-request` supports async request functions.\n                if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.promise(result)) {\n                    // We only need to implement the error handler in order to support HTTP2 caching.\n                    // The result will be a promise anyway.\n                    // @ts-expect-error ignore\n                    // eslint-disable-next-line @typescript-eslint/promise-function-async\n                    result.once = (event, handler)=>{\n                        if (event === \"error\") {\n                            (async ()=>{\n                                try {\n                                    await result;\n                                } catch (error) {\n                                    handler(error);\n                                }\n                            })();\n                        } else if (event === \"abort\") {\n                            // The empty catch is needed here in case when\n                            // it rejects before it's `await`ed in `_makeRequest`.\n                            (async ()=>{\n                                try {\n                                    const request = await result;\n                                    request.once(\"abort\", handler);\n                                } catch  {}\n                            })();\n                        } else {\n                            /* istanbul ignore next: safety check */ throw new Error(`Unknown HTTP2 promise event: ${event}`);\n                        }\n                        return result;\n                    };\n                }\n                return result;\n            }, cache));\n        }\n    }\n    async _createCacheableRequest(url, options) {\n        return new Promise((resolve, reject)=>{\n            // TODO: Remove `utils/url-to-options.ts` when `cacheable-request` is fixed\n            Object.assign(options, (0,_utils_url_to_options_js__WEBPACK_IMPORTED_MODULE_20__[\"default\"])(url));\n            let request;\n            // TODO: Fix `cacheable-response`. This is ugly.\n            const cacheRequest = cacheableStore.get(options.cache)(options, async (response)=>{\n                response._readableState.autoDestroy = false;\n                if (request) {\n                    const fix = ()=>{\n                        if (response.req) {\n                            response.complete = response.req.res.complete;\n                        }\n                    };\n                    response.prependOnceListener(\"end\", fix);\n                    fix();\n                    (await request).emit(\"cacheableResponse\", response);\n                }\n                resolve(response);\n            });\n            cacheRequest.once(\"error\", reject);\n            cacheRequest.once(\"request\", async (requestOrPromise)=>{\n                request = requestOrPromise;\n                resolve(request);\n            });\n        });\n    }\n    async _makeRequest() {\n        const { options } = this;\n        const { headers, username, password } = options;\n        const cookieJar = options.cookieJar;\n        for(const key in headers){\n            if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined(headers[key])) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete headers[key];\n            } else if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.null_(headers[key])) {\n                throw new TypeError(`Use \\`undefined\\` instead of \\`null\\` to delete the \\`${key}\\` header`);\n            }\n        }\n        if (options.decompress && _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined(headers[\"accept-encoding\"])) {\n            headers[\"accept-encoding\"] = supportsBrotli ? \"gzip, deflate, br\" : \"gzip, deflate\";\n        }\n        if (username || password) {\n            const credentials = node_buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(`${username}:${password}`).toString(\"base64\");\n            headers.authorization = `Basic ${credentials}`;\n        }\n        // Set cookies\n        if (cookieJar) {\n            const cookieString = await cookieJar.getCookieString(options.url.toString());\n            if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.nonEmptyString(cookieString)) {\n                headers.cookie = cookieString;\n            }\n        }\n        // Reset `prefixUrl`\n        options.prefixUrl = \"\";\n        let request;\n        for (const hook of options.hooks.beforeRequest){\n            // eslint-disable-next-line no-await-in-loop\n            const result = await hook(options);\n            if (!_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined(result)) {\n                // @ts-expect-error Skip the type mismatch to support abstract responses\n                request = ()=>result;\n                break;\n            }\n        }\n        if (!request) {\n            request = options.getRequestFunction();\n        }\n        const url = options.url;\n        this._requestOptions = options.createNativeRequestOptions();\n        if (options.cache) {\n            this._requestOptions._request = request;\n            this._requestOptions.cache = options.cache;\n            this._prepareCache(options.cache);\n        }\n        // Cache support\n        const fn = options.cache ? this._createCacheableRequest : request;\n        try {\n            // We can't do `await fn(...)`,\n            // because stream `error` event can be emitted before `Promise.resolve()`.\n            let requestOrResponse = fn(url, this._requestOptions);\n            if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.promise(requestOrResponse)) {\n                requestOrResponse = await requestOrResponse;\n            }\n            // Fallback\n            if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined(requestOrResponse)) {\n                requestOrResponse = options.getFallbackRequestFunction()(url, this._requestOptions);\n                if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.promise(requestOrResponse)) {\n                    requestOrResponse = await requestOrResponse;\n                }\n            }\n            if ((0,_utils_is_client_request_js__WEBPACK_IMPORTED_MODULE_21__[\"default\"])(requestOrResponse)) {\n                this._onRequest(requestOrResponse);\n            } else if (this.writable) {\n                this.once(\"finish\", ()=>{\n                    void this._onResponse(requestOrResponse);\n                });\n                this._sendBody();\n            } else {\n                void this._onResponse(requestOrResponse);\n            }\n        } catch (error) {\n            if (error instanceof cacheable_request__WEBPACK_IMPORTED_MODULE_6__.CacheError) {\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_13__.CacheError(error, this);\n            }\n            throw error;\n        }\n    }\n    async _error(error) {\n        try {\n            for (const hook of this.options.hooks.beforeError){\n                // eslint-disable-next-line no-await-in-loop\n                error = await hook(error);\n            }\n        } catch (error_) {\n            error = new _errors_js__WEBPACK_IMPORTED_MODULE_13__.RequestError(error_.message, error_, this);\n        }\n        this.destroy(error);\n    }\n    _writeRequest(chunk, encoding, callback) {\n        if (!this._request || this._request.destroyed) {\n            // Probably the `ClientRequest` instance will throw\n            return;\n        }\n        this._request.write(chunk, encoding, (error)=>{\n            if (!error) {\n                this._uploadedSize += node_buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.byteLength(chunk, encoding);\n                const progress = this.uploadProgress;\n                if (progress.percent < 1) {\n                    this.emit(\"uploadProgress\", progress);\n                }\n            }\n            callback(error);\n        });\n    }\n    /**\n    The remote IP address.\n    */ get ip() {\n        return this.socket?.remoteAddress;\n    }\n    /**\n    Indicates whether the request has been aborted or not.\n    */ get isAborted() {\n        return this._aborted;\n    }\n    get socket() {\n        return this._request?.socket ?? undefined;\n    }\n    /**\n    Progress event for downloading (receiving a response).\n    */ get downloadProgress() {\n        let percent;\n        if (this._responseSize) {\n            percent = this._downloadedSize / this._responseSize;\n        } else if (this._responseSize === this._downloadedSize) {\n            percent = 1;\n        } else {\n            percent = 0;\n        }\n        return {\n            percent,\n            transferred: this._downloadedSize,\n            total: this._responseSize\n        };\n    }\n    /**\n    Progress event for uploading (sending a request).\n    */ get uploadProgress() {\n        let percent;\n        if (this._bodySize) {\n            percent = this._uploadedSize / this._bodySize;\n        } else if (this._bodySize === this._uploadedSize) {\n            percent = 1;\n        } else {\n            percent = 0;\n        }\n        return {\n            percent,\n            transferred: this._uploadedSize,\n            total: this._bodySize\n        };\n    }\n    /**\n    The object contains the following properties:\n\n    - `start` - Time when the request started.\n    - `socket` - Time when a socket was assigned to the request.\n    - `lookup` - Time when the DNS lookup finished.\n    - `connect` - Time when the socket successfully connected.\n    - `secureConnect` - Time when the socket securely connected.\n    - `upload` - Time when the request finished uploading.\n    - `response` - Time when the request fired `response` event.\n    - `end` - Time when the response fired `end` event.\n    - `error` - Time when the request fired `error` event.\n    - `abort` - Time when the request fired `abort` event.\n    - `phases`\n        - `wait` - `timings.socket - timings.start`\n        - `dns` - `timings.lookup - timings.socket`\n        - `tcp` - `timings.connect - timings.lookup`\n        - `tls` - `timings.secureConnect - timings.connect`\n        - `request` - `timings.upload - (timings.secureConnect || timings.connect)`\n        - `firstByte` - `timings.response - timings.upload`\n        - `download` - `timings.end - timings.response`\n        - `total` - `(timings.end || timings.error || timings.abort) - timings.start`\n\n    If something has not been measured yet, it will be `undefined`.\n\n    __Note__: The time is a `number` representing the milliseconds elapsed since the UNIX epoch.\n    */ get timings() {\n        return this._request?.timings;\n    }\n    /**\n    Whether the response was retrieved from the cache.\n    */ get isFromCache() {\n        return this._isFromCache;\n    }\n    get reusedSocket() {\n        return this._request?.reusedSocket;\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/options.js":
/*!******************************************************!*\
  !*** ./node_modules/got/dist/source/core/options.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Options)\n/* harmony export */ });\n/* harmony import */ var node_process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:process */ \"node:process\");\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:util */ \"node:util\");\n/* harmony import */ var node_url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:url */ \"node:url\");\n/* harmony import */ var node_tls__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:tls */ \"node:tls\");\n/* harmony import */ var node_http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! node:http */ \"node:http\");\n/* harmony import */ var node_https__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! node:https */ \"node:https\");\n/* harmony import */ var _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\n/* harmony import */ var lowercase_keys__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lowercase-keys */ \"(rsc)/./node_modules/lowercase-keys/index.js\");\n/* harmony import */ var cacheable_lookup__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! cacheable-lookup */ \"(rsc)/./node_modules/cacheable-lookup/source/index.js\");\n/* harmony import */ var http2_wrapper__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! http2-wrapper */ \"(rsc)/./node_modules/http2-wrapper/source/index.js\");\n/* harmony import */ var form_data_encoder__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! form-data-encoder */ \"(rsc)/./node_modules/form-data-encoder/lib/esm/index.js\");\n/* harmony import */ var _parse_link_header_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./parse-link-header.js */ \"(rsc)/./node_modules/got/dist/source/core/parse-link-header.js\");\n\n\n\n\n// DO NOT use destructuring for `https.request` and `http.request` as it's not compatible with `nock`.\n\n\n\n\n\n\n\n\nconst [major, minor] = node_process__WEBPACK_IMPORTED_MODULE_0__.versions.node.split(\".\").map((v)=>Number(v));\nfunction validateSearchParameters(searchParameters) {\n    // eslint-disable-next-line guard-for-in\n    for(const key in searchParameters){\n        const value = searchParameters[key];\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.string,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.number,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.boolean,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.null_,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value);\n    }\n}\nconst globalCache = new Map();\nlet globalDnsCache;\nconst getGlobalDnsCache = ()=>{\n    if (globalDnsCache) {\n        return globalDnsCache;\n    }\n    globalDnsCache = new cacheable_lookup__WEBPACK_IMPORTED_MODULE_7__();\n    return globalDnsCache;\n};\nconst defaultInternals = {\n    request: undefined,\n    agent: {\n        http: undefined,\n        https: undefined,\n        http2: undefined\n    },\n    h2session: undefined,\n    decompress: true,\n    timeout: {\n        connect: undefined,\n        lookup: undefined,\n        read: undefined,\n        request: undefined,\n        response: undefined,\n        secureConnect: undefined,\n        send: undefined,\n        socket: undefined\n    },\n    prefixUrl: \"\",\n    body: undefined,\n    form: undefined,\n    json: undefined,\n    cookieJar: undefined,\n    ignoreInvalidCookies: false,\n    searchParams: undefined,\n    dnsLookup: undefined,\n    dnsCache: undefined,\n    context: {},\n    hooks: {\n        init: [],\n        beforeRequest: [],\n        beforeError: [],\n        beforeRedirect: [],\n        beforeRetry: [],\n        afterResponse: []\n    },\n    followRedirect: true,\n    maxRedirects: 10,\n    cache: undefined,\n    throwHttpErrors: true,\n    username: \"\",\n    password: \"\",\n    http2: false,\n    allowGetBody: false,\n    headers: {\n        \"user-agent\": \"got (https://github.com/sindresorhus/got)\"\n    },\n    methodRewriting: false,\n    dnsLookupIpVersion: undefined,\n    parseJson: JSON.parse,\n    stringifyJson: JSON.stringify,\n    retry: {\n        limit: 2,\n        methods: [\n            \"GET\",\n            \"PUT\",\n            \"HEAD\",\n            \"DELETE\",\n            \"OPTIONS\",\n            \"TRACE\"\n        ],\n        statusCodes: [\n            408,\n            413,\n            429,\n            500,\n            502,\n            503,\n            504,\n            521,\n            522,\n            524\n        ],\n        errorCodes: [\n            \"ETIMEDOUT\",\n            \"ECONNRESET\",\n            \"EADDRINUSE\",\n            \"ECONNREFUSED\",\n            \"EPIPE\",\n            \"ENOTFOUND\",\n            \"ENETUNREACH\",\n            \"EAI_AGAIN\"\n        ],\n        maxRetryAfter: undefined,\n        calculateDelay: ({ computedValue })=>computedValue,\n        backoffLimit: Number.POSITIVE_INFINITY,\n        noise: 100\n    },\n    localAddress: undefined,\n    method: \"GET\",\n    createConnection: undefined,\n    cacheOptions: {\n        shared: undefined,\n        cacheHeuristic: undefined,\n        immutableMinTimeToLive: undefined,\n        ignoreCargoCult: undefined\n    },\n    https: {\n        alpnProtocols: undefined,\n        rejectUnauthorized: undefined,\n        checkServerIdentity: undefined,\n        certificateAuthority: undefined,\n        key: undefined,\n        certificate: undefined,\n        passphrase: undefined,\n        pfx: undefined,\n        ciphers: undefined,\n        honorCipherOrder: undefined,\n        minVersion: undefined,\n        maxVersion: undefined,\n        signatureAlgorithms: undefined,\n        tlsSessionLifetime: undefined,\n        dhparam: undefined,\n        ecdhCurve: undefined,\n        certificateRevocationLists: undefined\n    },\n    encoding: undefined,\n    resolveBodyOnly: false,\n    isStream: false,\n    responseType: \"text\",\n    url: undefined,\n    pagination: {\n        transform (response) {\n            if (response.request.options.responseType === \"json\") {\n                return response.body;\n            }\n            return JSON.parse(response.body);\n        },\n        paginate ({ response }) {\n            const rawLinkHeader = response.headers.link;\n            if (typeof rawLinkHeader !== \"string\" || rawLinkHeader.trim() === \"\") {\n                return false;\n            }\n            const parsed = (0,_parse_link_header_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(rawLinkHeader);\n            const next = parsed.find((entry)=>entry.parameters.rel === \"next\" || entry.parameters.rel === '\"next\"');\n            if (next) {\n                return {\n                    url: new node_url__WEBPACK_IMPORTED_MODULE_2__.URL(next.reference, response.url)\n                };\n            }\n            return false;\n        },\n        filter: ()=>true,\n        shouldContinue: ()=>true,\n        countLimit: Number.POSITIVE_INFINITY,\n        backoff: 0,\n        requestLimit: 10000,\n        stackAllItems: false\n    },\n    setHost: true,\n    maxHeaderSize: undefined\n};\nconst cloneInternals = (internals)=>{\n    const { hooks, retry } = internals;\n    const result = {\n        ...internals,\n        context: {\n            ...internals.context\n        },\n        cacheOptions: {\n            ...internals.cacheOptions\n        },\n        https: {\n            ...internals.https\n        },\n        agent: {\n            ...internals.agent\n        },\n        headers: {\n            ...internals.headers\n        },\n        retry: {\n            ...retry,\n            errorCodes: [\n                ...retry.errorCodes\n            ],\n            methods: [\n                ...retry.methods\n            ],\n            statusCodes: [\n                ...retry.statusCodes\n            ]\n        },\n        timeout: {\n            ...internals.timeout\n        },\n        hooks: {\n            init: [\n                ...hooks.init\n            ],\n            beforeRequest: [\n                ...hooks.beforeRequest\n            ],\n            beforeError: [\n                ...hooks.beforeError\n            ],\n            beforeRedirect: [\n                ...hooks.beforeRedirect\n            ],\n            beforeRetry: [\n                ...hooks.beforeRetry\n            ],\n            afterResponse: [\n                ...hooks.afterResponse\n            ]\n        },\n        searchParams: internals.searchParams ? new node_url__WEBPACK_IMPORTED_MODULE_2__.URLSearchParams(internals.searchParams) : undefined,\n        pagination: {\n            ...internals.pagination\n        }\n    };\n    if (result.url !== undefined) {\n        result.prefixUrl = \"\";\n    }\n    return result;\n};\nconst cloneRaw = (raw)=>{\n    const { hooks, retry } = raw;\n    const result = {\n        ...raw\n    };\n    if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.object(raw.context)) {\n        result.context = {\n            ...raw.context\n        };\n    }\n    if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.object(raw.cacheOptions)) {\n        result.cacheOptions = {\n            ...raw.cacheOptions\n        };\n    }\n    if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.object(raw.https)) {\n        result.https = {\n            ...raw.https\n        };\n    }\n    if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.object(raw.cacheOptions)) {\n        result.cacheOptions = {\n            ...result.cacheOptions\n        };\n    }\n    if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.object(raw.agent)) {\n        result.agent = {\n            ...raw.agent\n        };\n    }\n    if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.object(raw.headers)) {\n        result.headers = {\n            ...raw.headers\n        };\n    }\n    if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.object(retry)) {\n        result.retry = {\n            ...retry\n        };\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.array(retry.errorCodes)) {\n            result.retry.errorCodes = [\n                ...retry.errorCodes\n            ];\n        }\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.array(retry.methods)) {\n            result.retry.methods = [\n                ...retry.methods\n            ];\n        }\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.array(retry.statusCodes)) {\n            result.retry.statusCodes = [\n                ...retry.statusCodes\n            ];\n        }\n    }\n    if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.object(raw.timeout)) {\n        result.timeout = {\n            ...raw.timeout\n        };\n    }\n    if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.object(hooks)) {\n        result.hooks = {\n            ...hooks\n        };\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.array(hooks.init)) {\n            result.hooks.init = [\n                ...hooks.init\n            ];\n        }\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.array(hooks.beforeRequest)) {\n            result.hooks.beforeRequest = [\n                ...hooks.beforeRequest\n            ];\n        }\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.array(hooks.beforeError)) {\n            result.hooks.beforeError = [\n                ...hooks.beforeError\n            ];\n        }\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.array(hooks.beforeRedirect)) {\n            result.hooks.beforeRedirect = [\n                ...hooks.beforeRedirect\n            ];\n        }\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.array(hooks.beforeRetry)) {\n            result.hooks.beforeRetry = [\n                ...hooks.beforeRetry\n            ];\n        }\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.array(hooks.afterResponse)) {\n            result.hooks.afterResponse = [\n                ...hooks.afterResponse\n            ];\n        }\n    }\n    // TODO: raw.searchParams\n    if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.object(raw.pagination)) {\n        result.pagination = {\n            ...raw.pagination\n        };\n    }\n    return result;\n};\nconst getHttp2TimeoutOption = (internals)=>{\n    const delays = [\n        internals.timeout.socket,\n        internals.timeout.connect,\n        internals.timeout.lookup,\n        internals.timeout.request,\n        internals.timeout.secureConnect\n    ].filter((delay)=>typeof delay === \"number\");\n    if (delays.length > 0) {\n        return Math.min(...delays);\n    }\n    return undefined;\n};\nconst init = (options, withOptions, self)=>{\n    const initHooks = options.hooks?.init;\n    if (initHooks) {\n        for (const hook of initHooks){\n            hook(withOptions, self);\n        }\n    }\n};\nvar Options;\nOptions = class Options {\n    constructor(input, options, defaults){\n        Object.defineProperty(this, \"_unixOptions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_internals\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_merging\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_init\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.string,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.urlInstance,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.object,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], input);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.object,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], options);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.object,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], defaults);\n        if (input instanceof Options || options instanceof Options) {\n            throw new TypeError(\"The defaults must be passed as the third argument\");\n        }\n        this._internals = cloneInternals(defaults?._internals ?? defaults ?? defaultInternals);\n        this._init = [\n            ...defaults?._init ?? []\n        ];\n        this._merging = false;\n        this._unixOptions = undefined;\n        // This rule allows `finally` to be considered more important.\n        // Meaning no matter the error thrown in the `try` block,\n        // if `finally` throws then the `finally` error will be thrown.\n        //\n        // Yes, we want this. If we set `url` first, then the `url.searchParams`\n        // would get merged. Instead we set the `searchParams` first, then\n        // `url.searchParams` is overwritten as expected.\n        //\n        /* eslint-disable no-unsafe-finally */ try {\n            if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.plainObject(input)) {\n                try {\n                    this.merge(input);\n                    this.merge(options);\n                } finally{\n                    this.url = input.url;\n                }\n            } else {\n                try {\n                    this.merge(options);\n                } finally{\n                    if (options?.url !== undefined) {\n                        if (input === undefined) {\n                            this.url = options.url;\n                        } else {\n                            throw new TypeError(\"The `url` option is mutually exclusive with the `input` argument\");\n                        }\n                    } else if (input !== undefined) {\n                        this.url = input;\n                    }\n                }\n            }\n        } catch (error) {\n            error.options = this;\n            throw error;\n        }\n    /* eslint-enable no-unsafe-finally */ }\n    merge(options) {\n        if (!options) {\n            return;\n        }\n        if (options instanceof Options) {\n            for (const init of options._init){\n                this.merge(init);\n            }\n            return;\n        }\n        options = cloneRaw(options);\n        init(this, options, this);\n        init(options, options, this);\n        this._merging = true;\n        // Always merge `isStream` first\n        if (\"isStream\" in options) {\n            this.isStream = options.isStream;\n        }\n        try {\n            let push = false;\n            for(const key in options){\n                // `got.extend()` options\n                if (key === \"mutableDefaults\" || key === \"handlers\") {\n                    continue;\n                }\n                // Never merge `url`\n                if (key === \"url\") {\n                    continue;\n                }\n                if (!(key in this)) {\n                    throw new Error(`Unexpected option: ${key}`);\n                }\n                // @ts-expect-error Type 'unknown' is not assignable to type 'never'.\n                this[key] = options[key];\n                push = true;\n            }\n            if (push) {\n                this._init.push(options);\n            }\n        } finally{\n            this._merging = false;\n        }\n    }\n    /**\n    Custom request function.\n    The main purpose of this is to [support HTTP2 using a wrapper](https://github.com/szmarczak/http2-wrapper).\n\n    @default http.request | https.request\n    */ get request() {\n        return this._internals.request;\n    }\n    set request(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.function_,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value);\n        this._internals.request = value;\n    }\n    /**\n    An object representing `http`, `https` and `http2` keys for [`http.Agent`](https://nodejs.org/api/http.html#http_class_http_agent), [`https.Agent`](https://nodejs.org/api/https.html#https_class_https_agent) and [`http2wrapper.Agent`](https://github.com/szmarczak/http2-wrapper#new-http2agentoptions) instance.\n    This is necessary because a request to one protocol might redirect to another.\n    In such a scenario, Got will switch over to the right protocol agent for you.\n\n    If a key is not present, it will default to a global agent.\n\n    @example\n    ```\n    import got from 'got';\n    import HttpAgent from 'agentkeepalive';\n\n    const {HttpsAgent} = HttpAgent;\n\n    await got('https://sindresorhus.com', {\n        agent: {\n            http: new HttpAgent(),\n            https: new HttpsAgent()\n        }\n    });\n    ```\n    */ get agent() {\n        return this._internals.agent;\n    }\n    set agent(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.plainObject(value);\n        // eslint-disable-next-line guard-for-in\n        for(const key in value){\n            if (!(key in this._internals.agent)) {\n                throw new TypeError(`Unexpected agent option: ${key}`);\n            }\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n                _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.object,\n                _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n            ], value[key]);\n        }\n        if (this._merging) {\n            Object.assign(this._internals.agent, value);\n        } else {\n            this._internals.agent = {\n                ...value\n            };\n        }\n    }\n    get h2session() {\n        return this._internals.h2session;\n    }\n    set h2session(value) {\n        this._internals.h2session = value;\n    }\n    /**\n    Decompress the response automatically.\n\n    This will set the `accept-encoding` header to `gzip, deflate, br` unless you set it yourself.\n\n    If this is disabled, a compressed response is returned as a `Buffer`.\n    This may be useful if you want to handle decompression yourself or stream the raw compressed data.\n\n    @default true\n    */ get decompress() {\n        return this._internals.decompress;\n    }\n    set decompress(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.boolean(value);\n        this._internals.decompress = value;\n    }\n    /**\n    Milliseconds to wait for the server to end the response before aborting the request with `got.TimeoutError` error (a.k.a. `request` property).\n    By default, there's no timeout.\n\n    This also accepts an `object` with the following fields to constrain the duration of each phase of the request lifecycle:\n\n    - `lookup` starts when a socket is assigned and ends when the hostname has been resolved.\n        Does not apply when using a Unix domain socket.\n    - `connect` starts when `lookup` completes (or when the socket is assigned if lookup does not apply to the request) and ends when the socket is connected.\n    - `secureConnect` starts when `connect` completes and ends when the handshaking process completes (HTTPS only).\n    - `socket` starts when the socket is connected. See [request.setTimeout](https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback).\n    - `response` starts when the request has been written to the socket and ends when the response headers are received.\n    - `send` starts when the socket is connected and ends with the request has been written to the socket.\n    - `request` starts when the request is initiated and ends when the response's end event fires.\n    */ get timeout() {\n        // We always return `Delays` here.\n        // It has to be `Delays | number`, otherwise TypeScript will error because the getter and the setter have incompatible types.\n        return this._internals.timeout;\n    }\n    set timeout(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.plainObject(value);\n        // eslint-disable-next-line guard-for-in\n        for(const key in value){\n            if (!(key in this._internals.timeout)) {\n                throw new Error(`Unexpected timeout option: ${key}`);\n            }\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n                _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.number,\n                _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n            ], value[key]);\n        }\n        if (this._merging) {\n            Object.assign(this._internals.timeout, value);\n        } else {\n            this._internals.timeout = {\n                ...value\n            };\n        }\n    }\n    /**\n    When specified, `prefixUrl` will be prepended to `url`.\n    The prefix can be any valid URL, either relative or absolute.\n    A trailing slash `/` is optional - one will be added automatically.\n\n    __Note__: `prefixUrl` will be ignored if the `url` argument is a URL instance.\n\n    __Note__: Leading slashes in `input` are disallowed when using this option to enforce consistency and avoid confusion.\n    For example, when the prefix URL is `https://example.com/foo` and the input is `/bar`, there's ambiguity whether the resulting URL would become `https://example.com/foo/bar` or `https://example.com/bar`.\n    The latter is used by browsers.\n\n    __Tip__: Useful when used with `got.extend()` to create niche-specific Got instances.\n\n    __Tip__: You can change `prefixUrl` using hooks as long as the URL still includes the `prefixUrl`.\n    If the URL doesn't include it anymore, it will throw.\n\n    @example\n    ```\n    import got from 'got';\n\n    await got('unicorn', {prefixUrl: 'https://cats.com'});\n    //=> 'https://cats.com/unicorn'\n\n    const instance = got.extend({\n        prefixUrl: 'https://google.com'\n    });\n\n    await instance('unicorn', {\n        hooks: {\n            beforeRequest: [\n                options => {\n                    options.prefixUrl = 'https://cats.com';\n                }\n            ]\n        }\n    });\n    //=> 'https://cats.com/unicorn'\n    ```\n    */ get prefixUrl() {\n        // We always return `string` here.\n        // It has to be `string | URL`, otherwise TypeScript will error because the getter and the setter have incompatible types.\n        return this._internals.prefixUrl;\n    }\n    set prefixUrl(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.string,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.urlInstance\n        ], value);\n        if (value === \"\") {\n            this._internals.prefixUrl = \"\";\n            return;\n        }\n        value = value.toString();\n        if (!value.endsWith(\"/\")) {\n            value += \"/\";\n        }\n        if (this._internals.prefixUrl && this._internals.url) {\n            const { href } = this._internals.url;\n            this._internals.url.href = value + href.slice(this._internals.prefixUrl.length);\n        }\n        this._internals.prefixUrl = value;\n    }\n    /**\n    __Note #1__: The `body` option cannot be used with the `json` or `form` option.\n\n    __Note #2__: If you provide this option, `got.stream()` will be read-only.\n\n    __Note #3__: If you provide a payload with the `GET` or `HEAD` method, it will throw a `TypeError` unless the method is `GET` and the `allowGetBody` option is set to `true`.\n\n    __Note #4__: This option is not enumerable and will not be merged with the instance defaults.\n\n    The `content-length` header will be automatically set if `body` is a `string` / `Buffer` / [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) / [`form-data` instance](https://github.com/form-data/form-data), and `content-length` and `transfer-encoding` are not manually set in `options.headers`.\n\n    Since Got 12, the `content-length` is not automatically set when `body` is a `fs.createReadStream`.\n    */ get body() {\n        return this._internals.body;\n    }\n    set body(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.string,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.buffer,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.nodeStream,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.generator,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.asyncGenerator,\n            form_data_encoder__WEBPACK_IMPORTED_MODULE_9__.isFormDataLike,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value);\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.nodeStream(value)) {\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.truthy(value.readable);\n        }\n        if (value !== undefined) {\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.undefined(this._internals.form);\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.undefined(this._internals.json);\n        }\n        this._internals.body = value;\n    }\n    /**\n    The form body is converted to a query string using [`(new URLSearchParams(object)).toString()`](https://nodejs.org/api/url.html#url_constructor_new_urlsearchparams_obj).\n\n    If the `Content-Type` header is not present, it will be set to `application/x-www-form-urlencoded`.\n\n    __Note #1__: If you provide this option, `got.stream()` will be read-only.\n\n    __Note #2__: This option is not enumerable and will not be merged with the instance defaults.\n    */ get form() {\n        return this._internals.form;\n    }\n    set form(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.plainObject,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value);\n        if (value !== undefined) {\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.undefined(this._internals.body);\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.undefined(this._internals.json);\n        }\n        this._internals.form = value;\n    }\n    /**\n    JSON body. If the `Content-Type` header is not set, it will be set to `application/json`.\n\n    __Note #1__: If you provide this option, `got.stream()` will be read-only.\n\n    __Note #2__: This option is not enumerable and will not be merged with the instance defaults.\n    */ get json() {\n        return this._internals.json;\n    }\n    set json(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.object,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value);\n        if (value !== undefined) {\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.undefined(this._internals.body);\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.undefined(this._internals.form);\n        }\n        this._internals.json = value;\n    }\n    /**\n    The URL to request, as a string, a [`https.request` options object](https://nodejs.org/api/https.html#https_https_request_options_callback), or a [WHATWG `URL`](https://nodejs.org/api/url.html#url_class_url).\n\n    Properties from `options` will override properties in the parsed `url`.\n\n    If no protocol is specified, it will throw a `TypeError`.\n\n    __Note__: The query string is **not** parsed as search params.\n\n    @example\n    ```\n    await got('https://example.com/?query=a b'); //=> https://example.com/?query=a%20b\n    await got('https://example.com/', {searchParams: {query: 'a b'}}); //=> https://example.com/?query=a+b\n\n    // The query string is overridden by `searchParams`\n    await got('https://example.com/?query=a b', {searchParams: {query: 'a b'}}); //=> https://example.com/?query=a+b\n    ```\n    */ get url() {\n        return this._internals.url;\n    }\n    set url(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.string,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.urlInstance,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value);\n        if (value === undefined) {\n            this._internals.url = undefined;\n            return;\n        }\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.string(value) && value.startsWith(\"/\")) {\n            throw new Error(\"`url` must not start with a slash\");\n        }\n        const urlString = `${this.prefixUrl}${value.toString()}`;\n        const url = new node_url__WEBPACK_IMPORTED_MODULE_2__.URL(urlString);\n        this._internals.url = url;\n        decodeURI(urlString);\n        if (url.protocol === \"unix:\") {\n            url.href = `http://unix${url.pathname}${url.search}`;\n        }\n        if (url.protocol !== \"http:\" && url.protocol !== \"https:\") {\n            const error = new Error(`Unsupported protocol: ${url.protocol}`);\n            error.code = \"ERR_UNSUPPORTED_PROTOCOL\";\n            throw error;\n        }\n        if (this._internals.username) {\n            url.username = this._internals.username;\n            this._internals.username = \"\";\n        }\n        if (this._internals.password) {\n            url.password = this._internals.password;\n            this._internals.password = \"\";\n        }\n        if (this._internals.searchParams) {\n            url.search = this._internals.searchParams.toString();\n            this._internals.searchParams = undefined;\n        }\n        if (url.hostname === \"unix\") {\n            const matches = /(?<socketPath>.+?):(?<path>.+)/.exec(`${url.pathname}${url.search}`);\n            if (matches?.groups) {\n                const { socketPath, path } = matches.groups;\n                this._unixOptions = {\n                    socketPath,\n                    path,\n                    host: \"\"\n                };\n            } else {\n                this._unixOptions = undefined;\n            }\n            return;\n        }\n        this._unixOptions = undefined;\n    }\n    /**\n    Cookie support. You don't have to care about parsing or how to store them.\n\n    __Note__: If you provide this option, `options.headers.cookie` will be overridden.\n    */ get cookieJar() {\n        return this._internals.cookieJar;\n    }\n    set cookieJar(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.object,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value);\n        if (value === undefined) {\n            this._internals.cookieJar = undefined;\n            return;\n        }\n        let { setCookie, getCookieString } = value;\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.function_(setCookie);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.function_(getCookieString);\n        /* istanbul ignore next: Horrible `tough-cookie` v3 check */ if (setCookie.length === 4 && getCookieString.length === 0) {\n            setCookie = (0,node_util__WEBPACK_IMPORTED_MODULE_1__.promisify)(setCookie.bind(value));\n            getCookieString = (0,node_util__WEBPACK_IMPORTED_MODULE_1__.promisify)(getCookieString.bind(value));\n            this._internals.cookieJar = {\n                setCookie,\n                getCookieString: getCookieString\n            };\n        } else {\n            this._internals.cookieJar = value;\n        }\n    }\n    /**\n    Ignore invalid cookies instead of throwing an error.\n    Only useful when the `cookieJar` option has been set. Not recommended.\n\n    @default false\n    */ get ignoreInvalidCookies() {\n        return this._internals.ignoreInvalidCookies;\n    }\n    set ignoreInvalidCookies(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.boolean(value);\n        this._internals.ignoreInvalidCookies = value;\n    }\n    /**\n    Query string that will be added to the request URL.\n    This will override the query string in `url`.\n\n    If you need to pass in an array, you can do it using a `URLSearchParams` instance.\n\n    @example\n    ```\n    import got from 'got';\n\n    const searchParams = new URLSearchParams([['key', 'a'], ['key', 'b']]);\n\n    await got('https://example.com', {searchParams});\n\n    console.log(searchParams.toString());\n    //=> 'key=a&key=b'\n    ```\n    */ get searchParams() {\n        if (this._internals.url) {\n            return this._internals.url.searchParams;\n        }\n        if (this._internals.searchParams === undefined) {\n            this._internals.searchParams = new node_url__WEBPACK_IMPORTED_MODULE_2__.URLSearchParams();\n        }\n        return this._internals.searchParams;\n    }\n    set searchParams(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.string,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.object,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value);\n        const url = this._internals.url;\n        if (value === undefined) {\n            this._internals.searchParams = undefined;\n            if (url) {\n                url.search = \"\";\n            }\n            return;\n        }\n        const searchParameters = this.searchParams;\n        let updated;\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.string(value)) {\n            updated = new node_url__WEBPACK_IMPORTED_MODULE_2__.URLSearchParams(value);\n        } else if (value instanceof node_url__WEBPACK_IMPORTED_MODULE_2__.URLSearchParams) {\n            updated = value;\n        } else {\n            validateSearchParameters(value);\n            updated = new node_url__WEBPACK_IMPORTED_MODULE_2__.URLSearchParams();\n            // eslint-disable-next-line guard-for-in\n            for(const key in value){\n                const entry = value[key];\n                if (entry === null) {\n                    updated.append(key, \"\");\n                } else if (entry === undefined) {\n                    searchParameters.delete(key);\n                } else {\n                    updated.append(key, entry);\n                }\n            }\n        }\n        if (this._merging) {\n            // These keys will be replaced\n            for (const key of updated.keys()){\n                searchParameters.delete(key);\n            }\n            for (const [key, value] of updated){\n                searchParameters.append(key, value);\n            }\n        } else if (url) {\n            url.search = searchParameters.toString();\n        } else {\n            this._internals.searchParams = searchParameters;\n        }\n    }\n    get searchParameters() {\n        throw new Error(\"The `searchParameters` option does not exist. Use `searchParams` instead.\");\n    }\n    set searchParameters(_value) {\n        throw new Error(\"The `searchParameters` option does not exist. Use `searchParams` instead.\");\n    }\n    get dnsLookup() {\n        return this._internals.dnsLookup;\n    }\n    set dnsLookup(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.function_,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value);\n        this._internals.dnsLookup = value;\n    }\n    /**\n    An instance of [`CacheableLookup`](https://github.com/szmarczak/cacheable-lookup) used for making DNS lookups.\n    Useful when making lots of requests to different *public* hostnames.\n\n    `CacheableLookup` uses `dns.resolver4(..)` and `dns.resolver6(...)` under the hood and fall backs to `dns.lookup(...)` when the first two fail, which may lead to additional delay.\n\n    __Note__: This should stay disabled when making requests to internal hostnames such as `localhost`, `database.local` etc.\n\n    @default false\n    */ get dnsCache() {\n        return this._internals.dnsCache;\n    }\n    set dnsCache(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.object,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.boolean,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value);\n        if (value === true) {\n            this._internals.dnsCache = getGlobalDnsCache();\n        } else if (value === false) {\n            this._internals.dnsCache = undefined;\n        } else {\n            this._internals.dnsCache = value;\n        }\n    }\n    /**\n    User data. `context` is shallow merged and enumerable. If it contains non-enumerable properties they will NOT be merged.\n\n    @example\n    ```\n    import got from 'got';\n\n    const instance = got.extend({\n        hooks: {\n            beforeRequest: [\n                options => {\n                    if (!options.context || !options.context.token) {\n                        throw new Error('Token required');\n                    }\n\n                    options.headers.token = options.context.token;\n                }\n            ]\n        }\n    });\n\n    const context = {\n        token: 'secret'\n    };\n\n    const response = await instance('https://httpbin.org/headers', {context});\n\n    // Let's see the headers\n    console.log(response.body);\n    ```\n    */ get context() {\n        return this._internals.context;\n    }\n    set context(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.object(value);\n        if (this._merging) {\n            Object.assign(this._internals.context, value);\n        } else {\n            this._internals.context = {\n                ...value\n            };\n        }\n    }\n    /**\n    Hooks allow modifications during the request lifecycle.\n    Hook functions may be async and are run serially.\n    */ get hooks() {\n        return this._internals.hooks;\n    }\n    set hooks(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.object(value);\n        // eslint-disable-next-line guard-for-in\n        for(const knownHookEvent in value){\n            if (!(knownHookEvent in this._internals.hooks)) {\n                throw new Error(`Unexpected hook event: ${knownHookEvent}`);\n            }\n            const typedKnownHookEvent = knownHookEvent;\n            const typedValue = value;\n            const hooks = typedValue[typedKnownHookEvent];\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n                _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.array,\n                _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n            ], hooks);\n            if (hooks) {\n                for (const hook of hooks){\n                    _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.function_(hook);\n                }\n            }\n            if (this._merging) {\n                if (hooks) {\n                    // @ts-expect-error FIXME\n                    this._internals.hooks[typedKnownHookEvent].push(...hooks);\n                }\n            } else {\n                if (!hooks) {\n                    throw new Error(`Missing hook event: ${knownHookEvent}`);\n                }\n                // @ts-expect-error FIXME\n                this._internals.hooks[knownHookEvent] = [\n                    ...hooks\n                ];\n            }\n        }\n    }\n    /**\n    Defines if redirect responses should be followed automatically.\n\n    Note that if a `303` is sent by the server in response to any request type (`POST`, `DELETE`, etc.), Got will automatically request the resource pointed to in the location header via `GET`.\n    This is in accordance with [the spec](https://tools.ietf.org/html/rfc7231#section-6.4.4).\n\n    @default true\n    */ get followRedirect() {\n        return this._internals.followRedirect;\n    }\n    set followRedirect(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.boolean(value);\n        this._internals.followRedirect = value;\n    }\n    get followRedirects() {\n        throw new TypeError(\"The `followRedirects` option does not exist. Use `followRedirect` instead.\");\n    }\n    set followRedirects(_value) {\n        throw new TypeError(\"The `followRedirects` option does not exist. Use `followRedirect` instead.\");\n    }\n    /**\n    If exceeded, the request will be aborted and a `MaxRedirectsError` will be thrown.\n\n    @default 10\n    */ get maxRedirects() {\n        return this._internals.maxRedirects;\n    }\n    set maxRedirects(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.number(value);\n        this._internals.maxRedirects = value;\n    }\n    /**\n    A cache adapter instance for storing cached response data.\n\n    @default false\n    */ get cache() {\n        return this._internals.cache;\n    }\n    set cache(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.object,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.string,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.boolean,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value);\n        if (value === true) {\n            this._internals.cache = globalCache;\n        } else if (value === false) {\n            this._internals.cache = undefined;\n        } else {\n            this._internals.cache = value;\n        }\n    }\n    /**\n    Determines if a `got.HTTPError` is thrown for unsuccessful responses.\n\n    If this is disabled, requests that encounter an error status code will be resolved with the `response` instead of throwing.\n    This may be useful if you are checking for resource availability and are expecting error responses.\n\n    @default true\n    */ get throwHttpErrors() {\n        return this._internals.throwHttpErrors;\n    }\n    set throwHttpErrors(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.boolean(value);\n        this._internals.throwHttpErrors = value;\n    }\n    get username() {\n        const url = this._internals.url;\n        const value = url ? url.username : this._internals.username;\n        return decodeURIComponent(value);\n    }\n    set username(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.string(value);\n        const url = this._internals.url;\n        const fixedValue = encodeURIComponent(value);\n        if (url) {\n            url.username = fixedValue;\n        } else {\n            this._internals.username = fixedValue;\n        }\n    }\n    get password() {\n        const url = this._internals.url;\n        const value = url ? url.password : this._internals.password;\n        return decodeURIComponent(value);\n    }\n    set password(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.string(value);\n        const url = this._internals.url;\n        const fixedValue = encodeURIComponent(value);\n        if (url) {\n            url.password = fixedValue;\n        } else {\n            this._internals.password = fixedValue;\n        }\n    }\n    /**\n    If set to `true`, Got will additionally accept HTTP2 requests.\n\n    It will choose either HTTP/1.1 or HTTP/2 depending on the ALPN protocol.\n\n    __Note__: This option requires Node.js 15.10.0 or newer as HTTP/2 support on older Node.js versions is very buggy.\n\n    __Note__: Overriding `options.request` will disable HTTP2 support.\n\n    @default false\n\n    @example\n    ```\n    import got from 'got';\n\n    const {headers} = await got('https://nghttp2.org/httpbin/anything', {http2: true});\n\n    console.log(headers.via);\n    //=> '2 nghttpx'\n    ```\n    */ get http2() {\n        return this._internals.http2;\n    }\n    set http2(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.boolean(value);\n        this._internals.http2 = value;\n    }\n    /**\n    Set this to `true` to allow sending body for the `GET` method.\n    However, the [HTTP/2 specification](https://tools.ietf.org/html/rfc7540#section-8.1.3) says that `An HTTP GET request includes request header fields and no payload body`, therefore when using the HTTP/2 protocol this option will have no effect.\n    This option is only meant to interact with non-compliant servers when you have no other choice.\n\n    __Note__: The [RFC 7321](https://tools.ietf.org/html/rfc7231#section-4.3.1) doesn't specify any particular behavior for the GET method having a payload, therefore __it's considered an [anti-pattern](https://en.wikipedia.org/wiki/Anti-pattern)__.\n\n    @default false\n    */ get allowGetBody() {\n        return this._internals.allowGetBody;\n    }\n    set allowGetBody(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.boolean(value);\n        this._internals.allowGetBody = value;\n    }\n    /**\n    Request headers.\n\n    Existing headers will be overwritten. Headers set to `undefined` will be omitted.\n\n    @default {}\n    */ get headers() {\n        return this._internals.headers;\n    }\n    set headers(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.plainObject(value);\n        if (this._merging) {\n            Object.assign(this._internals.headers, (0,lowercase_keys__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(value));\n        } else {\n            this._internals.headers = (0,lowercase_keys__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(value);\n        }\n    }\n    /**\n    Specifies if the redirects should be [rewritten as `GET`](https://tools.ietf.org/html/rfc7231#section-6.4).\n\n    If `false`, when sending a POST request and receiving a `302`, it will resend the body to the new location using the same HTTP method (`POST` in this case).\n\n    @default false\n    */ get methodRewriting() {\n        return this._internals.methodRewriting;\n    }\n    set methodRewriting(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.boolean(value);\n        this._internals.methodRewriting = value;\n    }\n    /**\n    Indicates which DNS record family to use.\n\n    Values:\n    - `undefined`: IPv4 (if present) or IPv6\n    - `4`: Only IPv4\n    - `6`: Only IPv6\n\n    @default undefined\n    */ get dnsLookupIpVersion() {\n        return this._internals.dnsLookupIpVersion;\n    }\n    set dnsLookupIpVersion(value) {\n        if (value !== undefined && value !== 4 && value !== 6) {\n            throw new TypeError(`Invalid DNS lookup IP version: ${value}`);\n        }\n        this._internals.dnsLookupIpVersion = value;\n    }\n    /**\n    A function used to parse JSON responses.\n\n    @example\n    ```\n    import got from 'got';\n    import Bourne from '@hapi/bourne';\n\n    const parsed = await got('https://example.com', {\n        parseJson: text => Bourne.parse(text)\n    }).json();\n\n    console.log(parsed);\n    ```\n    */ get parseJson() {\n        return this._internals.parseJson;\n    }\n    set parseJson(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.function_(value);\n        this._internals.parseJson = value;\n    }\n    /**\n    A function used to stringify the body of JSON requests.\n\n    @example\n    ```\n    import got from 'got';\n\n    await got.post('https://example.com', {\n        stringifyJson: object => JSON.stringify(object, (key, value) => {\n            if (key.startsWith('_')) {\n                return;\n            }\n\n            return value;\n        }),\n        json: {\n            some: 'payload',\n            _ignoreMe: 1234\n        }\n    });\n    ```\n\n    @example\n    ```\n    import got from 'got';\n\n    await got.post('https://example.com', {\n        stringifyJson: object => JSON.stringify(object, (key, value) => {\n            if (typeof value === 'number') {\n                return value.toString();\n            }\n\n            return value;\n        }),\n        json: {\n            some: 'payload',\n            number: 1\n        }\n    });\n    ```\n    */ get stringifyJson() {\n        return this._internals.stringifyJson;\n    }\n    set stringifyJson(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.function_(value);\n        this._internals.stringifyJson = value;\n    }\n    /**\n    An object representing `limit`, `calculateDelay`, `methods`, `statusCodes`, `maxRetryAfter` and `errorCodes` fields for maximum retry count, retry handler, allowed methods, allowed status codes, maximum [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) time and allowed error codes.\n\n    Delays between retries counts with function `1000 * Math.pow(2, retry) + Math.random() * 100`, where `retry` is attempt number (starts from 1).\n\n    The `calculateDelay` property is a `function` that receives an object with `attemptCount`, `retryOptions`, `error` and `computedValue` properties for current retry count, the retry options, error and default computed value.\n    The function must return a delay in milliseconds (or a Promise resolving with it) (`0` return value cancels retry).\n\n    By default, it retries *only* on the specified methods, status codes, and on these network errors:\n\n    - `ETIMEDOUT`: One of the [timeout](#timeout) limits were reached.\n    - `ECONNRESET`: Connection was forcibly closed by a peer.\n    - `EADDRINUSE`: Could not bind to any free port.\n    - `ECONNREFUSED`: Connection was refused by the server.\n    - `EPIPE`: The remote side of the stream being written has been closed.\n    - `ENOTFOUND`: Couldn't resolve the hostname to an IP address.\n    - `ENETUNREACH`: No internet connection.\n    - `EAI_AGAIN`: DNS lookup timed out.\n\n    __Note__: If `maxRetryAfter` is set to `undefined`, it will use `options.timeout`.\n    __Note__: If [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) header is greater than `maxRetryAfter`, it will cancel the request.\n    */ get retry() {\n        return this._internals.retry;\n    }\n    set retry(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.plainObject(value);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.function_,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.calculateDelay);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.number,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.maxRetryAfter);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.number,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.limit);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.array,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.methods);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.array,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.statusCodes);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.array,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.errorCodes);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.number,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.noise);\n        if (value.noise && Math.abs(value.noise) > 100) {\n            throw new Error(`The maximum acceptable retry noise is +/- 100ms, got ${value.noise}`);\n        }\n        for(const key in value){\n            if (!(key in this._internals.retry)) {\n                throw new Error(`Unexpected retry option: ${key}`);\n            }\n        }\n        if (this._merging) {\n            Object.assign(this._internals.retry, value);\n        } else {\n            this._internals.retry = {\n                ...value\n            };\n        }\n        const { retry } = this._internals;\n        retry.methods = [\n            ...new Set(retry.methods.map((method)=>method.toUpperCase()))\n        ];\n        retry.statusCodes = [\n            ...new Set(retry.statusCodes)\n        ];\n        retry.errorCodes = [\n            ...new Set(retry.errorCodes)\n        ];\n    }\n    /**\n    From `http.RequestOptions`.\n\n    The IP address used to send the request from.\n    */ get localAddress() {\n        return this._internals.localAddress;\n    }\n    set localAddress(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.string,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value);\n        this._internals.localAddress = value;\n    }\n    /**\n    The HTTP method used to make the request.\n\n    @default 'GET'\n    */ get method() {\n        return this._internals.method;\n    }\n    set method(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.string(value);\n        this._internals.method = value.toUpperCase();\n    }\n    get createConnection() {\n        return this._internals.createConnection;\n    }\n    set createConnection(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.function_,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value);\n        this._internals.createConnection = value;\n    }\n    /**\n    From `http-cache-semantics`\n\n    @default {}\n    */ get cacheOptions() {\n        return this._internals.cacheOptions;\n    }\n    set cacheOptions(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.plainObject(value);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.boolean,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.shared);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.number,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.cacheHeuristic);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.number,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.immutableMinTimeToLive);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.boolean,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.ignoreCargoCult);\n        for(const key in value){\n            if (!(key in this._internals.cacheOptions)) {\n                throw new Error(`Cache option \\`${key}\\` does not exist`);\n            }\n        }\n        if (this._merging) {\n            Object.assign(this._internals.cacheOptions, value);\n        } else {\n            this._internals.cacheOptions = {\n                ...value\n            };\n        }\n    }\n    /**\n    Options for the advanced HTTPS API.\n    */ get https() {\n        return this._internals.https;\n    }\n    set https(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.plainObject(value);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.boolean,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.rejectUnauthorized);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.function_,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.checkServerIdentity);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.string,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.object,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.array,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.certificateAuthority);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.string,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.object,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.array,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.key);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.string,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.object,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.array,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.certificate);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.string,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.passphrase);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.string,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.buffer,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.array,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.pfx);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.array,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.alpnProtocols);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.string,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.ciphers);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.string,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.buffer,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.dhparam);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.string,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.signatureAlgorithms);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.string,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.minVersion);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.string,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.maxVersion);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.boolean,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.honorCipherOrder);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.number,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.tlsSessionLifetime);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.string,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.ecdhCurve);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.string,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.buffer,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.array,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value.certificateRevocationLists);\n        for(const key in value){\n            if (!(key in this._internals.https)) {\n                throw new Error(`HTTPS option \\`${key}\\` does not exist`);\n            }\n        }\n        if (this._merging) {\n            Object.assign(this._internals.https, value);\n        } else {\n            this._internals.https = {\n                ...value\n            };\n        }\n    }\n    /**\n    [Encoding](https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings) to be used on `setEncoding` of the response data.\n\n    To get a [`Buffer`](https://nodejs.org/api/buffer.html), you need to set `responseType` to `buffer` instead.\n    Don't set this option to `null`.\n\n    __Note__: This doesn't affect streams! Instead, you need to do `got.stream(...).setEncoding(encoding)`.\n\n    @default 'utf-8'\n    */ get encoding() {\n        return this._internals.encoding;\n    }\n    set encoding(value) {\n        if (value === null) {\n            throw new TypeError(\"To get a Buffer, set `options.responseType` to `buffer` instead\");\n        }\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.string,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value);\n        this._internals.encoding = value;\n    }\n    /**\n    When set to `true` the promise will return the Response body instead of the Response object.\n\n    @default false\n    */ get resolveBodyOnly() {\n        return this._internals.resolveBodyOnly;\n    }\n    set resolveBodyOnly(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.boolean(value);\n        this._internals.resolveBodyOnly = value;\n    }\n    /**\n    Returns a `Stream` instead of a `Promise`.\n    This is equivalent to calling `got.stream(url, options?)`.\n\n    @default false\n    */ get isStream() {\n        return this._internals.isStream;\n    }\n    set isStream(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.boolean(value);\n        this._internals.isStream = value;\n    }\n    /**\n    The parsing method.\n\n    The promise also has `.text()`, `.json()` and `.buffer()` methods which return another Got promise for the parsed body.\n\n    It's like setting the options to `{responseType: 'json', resolveBodyOnly: true}` but without affecting the main Got promise.\n\n    __Note__: When using streams, this option is ignored.\n\n    @example\n    ```\n    const responsePromise = got(url);\n    const bufferPromise = responsePromise.buffer();\n    const jsonPromise = responsePromise.json();\n\n    const [response, buffer, json] = Promise.all([responsePromise, bufferPromise, jsonPromise]);\n    // `response` is an instance of Got Response\n    // `buffer` is an instance of Buffer\n    // `json` is an object\n    ```\n\n    @example\n    ```\n    // This\n    const body = await got(url).json();\n\n    // is semantically the same as this\n    const body = await got(url, {responseType: 'json', resolveBodyOnly: true});\n    ```\n    */ get responseType() {\n        return this._internals.responseType;\n    }\n    set responseType(value) {\n        if (value === undefined) {\n            this._internals.responseType = \"text\";\n            return;\n        }\n        if (value !== \"text\" && value !== \"buffer\" && value !== \"json\") {\n            throw new Error(`Invalid \\`responseType\\` option: ${value}`);\n        }\n        this._internals.responseType = value;\n    }\n    get pagination() {\n        return this._internals.pagination;\n    }\n    set pagination(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.object(value);\n        if (this._merging) {\n            Object.assign(this._internals.pagination, value);\n        } else {\n            this._internals.pagination = value;\n        }\n    }\n    get auth() {\n        throw new Error(\"Parameter `auth` is deprecated. Use `username` / `password` instead.\");\n    }\n    set auth(_value) {\n        throw new Error(\"Parameter `auth` is deprecated. Use `username` / `password` instead.\");\n    }\n    get setHost() {\n        return this._internals.setHost;\n    }\n    set setHost(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.boolean(value);\n        this._internals.setHost = value;\n    }\n    get maxHeaderSize() {\n        return this._internals.maxHeaderSize;\n    }\n    set maxHeaderSize(value) {\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.assert.any([\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.number,\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.undefined\n        ], value);\n        this._internals.maxHeaderSize = value;\n    }\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    toJSON() {\n        return {\n            ...this._internals\n        };\n    }\n    [Symbol.for(\"nodejs.util.inspect.custom\")](_depth, options) {\n        return (0,node_util__WEBPACK_IMPORTED_MODULE_1__.inspect)(this._internals, options);\n    }\n    createNativeRequestOptions() {\n        const internals = this._internals;\n        const url = internals.url;\n        let agent;\n        if (url.protocol === \"https:\") {\n            agent = internals.http2 ? internals.agent : internals.agent.https;\n        } else {\n            agent = internals.agent.http;\n        }\n        const { https } = internals;\n        let { pfx } = https;\n        if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.array(pfx) && _sindresorhus_is__WEBPACK_IMPORTED_MODULE_10__.plainObject(pfx[0])) {\n            pfx = pfx.map((object)=>({\n                    buf: object.buffer,\n                    passphrase: object.passphrase\n                }));\n        }\n        return {\n            ...internals.cacheOptions,\n            ...this._unixOptions,\n            // HTTPS options\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            ALPNProtocols: https.alpnProtocols,\n            ca: https.certificateAuthority,\n            cert: https.certificate,\n            key: https.key,\n            passphrase: https.passphrase,\n            pfx: https.pfx,\n            rejectUnauthorized: https.rejectUnauthorized,\n            checkServerIdentity: https.checkServerIdentity ?? node_tls__WEBPACK_IMPORTED_MODULE_3__.checkServerIdentity,\n            ciphers: https.ciphers,\n            honorCipherOrder: https.honorCipherOrder,\n            minVersion: https.minVersion,\n            maxVersion: https.maxVersion,\n            sigalgs: https.signatureAlgorithms,\n            sessionTimeout: https.tlsSessionLifetime,\n            dhparam: https.dhparam,\n            ecdhCurve: https.ecdhCurve,\n            crl: https.certificateRevocationLists,\n            // HTTP options\n            lookup: internals.dnsLookup ?? internals.dnsCache?.lookup,\n            family: internals.dnsLookupIpVersion,\n            agent,\n            setHost: internals.setHost,\n            method: internals.method,\n            maxHeaderSize: internals.maxHeaderSize,\n            localAddress: internals.localAddress,\n            headers: internals.headers,\n            createConnection: internals.createConnection,\n            timeout: internals.http2 ? getHttp2TimeoutOption(internals) : undefined,\n            // HTTP/2 options\n            h2session: internals.h2session\n        };\n    }\n    getRequestFunction() {\n        const url = this._internals.url;\n        const { request } = this._internals;\n        if (!request && url) {\n            return this.getFallbackRequestFunction();\n        }\n        return request;\n    }\n    getFallbackRequestFunction() {\n        const url = this._internals.url;\n        if (!url) {\n            return;\n        }\n        if (url.protocol === \"https:\") {\n            if (this._internals.http2) {\n                if (major < 15 || major === 15 && minor < 10) {\n                    const error = new Error(\"To use the `http2` option, install Node.js 15.10.0 or above\");\n                    error.code = \"EUNSUPPORTED\";\n                    throw error;\n                }\n                return http2_wrapper__WEBPACK_IMPORTED_MODULE_8__.auto;\n            }\n            return node_https__WEBPACK_IMPORTED_MODULE_5__.request;\n        }\n        return node_http__WEBPACK_IMPORTED_MODULE_4__.request;\n    }\n    freeze() {\n        const options = this._internals;\n        Object.freeze(options);\n        Object.freeze(options.hooks);\n        Object.freeze(options.hooks.afterResponse);\n        Object.freeze(options.hooks.beforeError);\n        Object.freeze(options.hooks.beforeRedirect);\n        Object.freeze(options.hooks.beforeRequest);\n        Object.freeze(options.hooks.beforeRetry);\n        Object.freeze(options.hooks.init);\n        Object.freeze(options.https);\n        Object.freeze(options.cacheOptions);\n        Object.freeze(options.agent);\n        Object.freeze(options.headers);\n        Object.freeze(options.timeout);\n        Object.freeze(options.retry);\n        Object.freeze(options.retry.errorCodes);\n        Object.freeze(options.retry.methods);\n        Object.freeze(options.retry.statusCodes);\n        Object.freeze(options.context);\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/options.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/parse-link-header.js":
/*!****************************************************************!*\
  !*** ./node_modules/got/dist/source/core/parse-link-header.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ parseLinkHeader)\n/* harmony export */ });\nfunction parseLinkHeader(link) {\n    const parsed = [];\n    const items = link.split(\",\");\n    for (const item of items){\n        // https://tools.ietf.org/html/rfc5988#section-5\n        const [rawUriReference, ...rawLinkParameters] = item.split(\";\");\n        const trimmedUriReference = rawUriReference.trim();\n        // eslint-disable-next-line @typescript-eslint/prefer-string-starts-ends-with\n        if (trimmedUriReference[0] !== \"<\" || trimmedUriReference[trimmedUriReference.length - 1] !== \">\") {\n            throw new Error(`Invalid format of the Link header reference: ${trimmedUriReference}`);\n        }\n        const reference = trimmedUriReference.slice(1, -1);\n        const parameters = {};\n        if (rawLinkParameters.length === 0) {\n            throw new Error(`Unexpected end of Link header parameters: ${rawLinkParameters.join(\";\")}`);\n        }\n        for (const rawParameter of rawLinkParameters){\n            const trimmedRawParameter = rawParameter.trim();\n            const center = trimmedRawParameter.indexOf(\"=\");\n            if (center === -1) {\n                throw new Error(`Failed to parse Link header: ${link}`);\n            }\n            const name = trimmedRawParameter.slice(0, center).trim();\n            const value = trimmedRawParameter.slice(center + 1).trim();\n            parameters[name] = value;\n        }\n        parsed.push({\n            reference,\n            parameters\n        });\n    }\n    return parsed;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvcGFyc2UtbGluay1oZWFkZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFlLFNBQVNBLGdCQUFnQkMsSUFBSTtJQUN4QyxNQUFNQyxTQUFTLEVBQUU7SUFDakIsTUFBTUMsUUFBUUYsS0FBS0csS0FBSyxDQUFDO0lBQ3pCLEtBQUssTUFBTUMsUUFBUUYsTUFBTztRQUN0QixnREFBZ0Q7UUFDaEQsTUFBTSxDQUFDRyxpQkFBaUIsR0FBR0Msa0JBQWtCLEdBQUdGLEtBQUtELEtBQUssQ0FBQztRQUMzRCxNQUFNSSxzQkFBc0JGLGdCQUFnQkcsSUFBSTtRQUNoRCw2RUFBNkU7UUFDN0UsSUFBSUQsbUJBQW1CLENBQUMsRUFBRSxLQUFLLE9BQU9BLG1CQUFtQixDQUFDQSxvQkFBb0JFLE1BQU0sR0FBRyxFQUFFLEtBQUssS0FBSztZQUMvRixNQUFNLElBQUlDLE1BQU0sQ0FBQyw2Q0FBNkMsRUFBRUgsb0JBQW9CLENBQUM7UUFDekY7UUFDQSxNQUFNSSxZQUFZSixvQkFBb0JLLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDaEQsTUFBTUMsYUFBYSxDQUFDO1FBQ3BCLElBQUlQLGtCQUFrQkcsTUFBTSxLQUFLLEdBQUc7WUFDaEMsTUFBTSxJQUFJQyxNQUFNLENBQUMsMENBQTBDLEVBQUVKLGtCQUFrQlEsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUM5RjtRQUNBLEtBQUssTUFBTUMsZ0JBQWdCVCxrQkFBbUI7WUFDMUMsTUFBTVUsc0JBQXNCRCxhQUFhUCxJQUFJO1lBQzdDLE1BQU1TLFNBQVNELG9CQUFvQkUsT0FBTyxDQUFDO1lBQzNDLElBQUlELFdBQVcsQ0FBQyxHQUFHO2dCQUNmLE1BQU0sSUFBSVAsTUFBTSxDQUFDLDZCQUE2QixFQUFFVixLQUFLLENBQUM7WUFDMUQ7WUFDQSxNQUFNbUIsT0FBT0gsb0JBQW9CSixLQUFLLENBQUMsR0FBR0ssUUFBUVQsSUFBSTtZQUN0RCxNQUFNWSxRQUFRSixvQkFBb0JKLEtBQUssQ0FBQ0ssU0FBUyxHQUFHVCxJQUFJO1lBQ3hESyxVQUFVLENBQUNNLEtBQUssR0FBR0M7UUFDdkI7UUFDQW5CLE9BQU9vQixJQUFJLENBQUM7WUFDUlY7WUFDQUU7UUFDSjtJQUNKO0lBQ0EsT0FBT1o7QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL25vdGlvbi14LWV4YW1wbGUtZnVsbC8uL25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS9wYXJzZS1saW5rLWhlYWRlci5qcz85OWJhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhcnNlTGlua0hlYWRlcihsaW5rKSB7XG4gICAgY29uc3QgcGFyc2VkID0gW107XG4gICAgY29uc3QgaXRlbXMgPSBsaW5rLnNwbGl0KCcsJyk7XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgICAgIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM1OTg4I3NlY3Rpb24tNVxuICAgICAgICBjb25zdCBbcmF3VXJpUmVmZXJlbmNlLCAuLi5yYXdMaW5rUGFyYW1ldGVyc10gPSBpdGVtLnNwbGl0KCc7Jyk7XG4gICAgICAgIGNvbnN0IHRyaW1tZWRVcmlSZWZlcmVuY2UgPSByYXdVcmlSZWZlcmVuY2UudHJpbSgpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3ByZWZlci1zdHJpbmctc3RhcnRzLWVuZHMtd2l0aFxuICAgICAgICBpZiAodHJpbW1lZFVyaVJlZmVyZW5jZVswXSAhPT0gJzwnIHx8IHRyaW1tZWRVcmlSZWZlcmVuY2VbdHJpbW1lZFVyaVJlZmVyZW5jZS5sZW5ndGggLSAxXSAhPT0gJz4nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZm9ybWF0IG9mIHRoZSBMaW5rIGhlYWRlciByZWZlcmVuY2U6ICR7dHJpbW1lZFVyaVJlZmVyZW5jZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZWZlcmVuY2UgPSB0cmltbWVkVXJpUmVmZXJlbmNlLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgY29uc3QgcGFyYW1ldGVycyA9IHt9O1xuICAgICAgICBpZiAocmF3TGlua1BhcmFtZXRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgZW5kIG9mIExpbmsgaGVhZGVyIHBhcmFtZXRlcnM6ICR7cmF3TGlua1BhcmFtZXRlcnMuam9pbignOycpfWApO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgcmF3UGFyYW1ldGVyIG9mIHJhd0xpbmtQYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICBjb25zdCB0cmltbWVkUmF3UGFyYW1ldGVyID0gcmF3UGFyYW1ldGVyLnRyaW0oKTtcbiAgICAgICAgICAgIGNvbnN0IGNlbnRlciA9IHRyaW1tZWRSYXdQYXJhbWV0ZXIuaW5kZXhPZignPScpO1xuICAgICAgICAgICAgaWYgKGNlbnRlciA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBwYXJzZSBMaW5rIGhlYWRlcjogJHtsaW5rfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IHRyaW1tZWRSYXdQYXJhbWV0ZXIuc2xpY2UoMCwgY2VudGVyKS50cmltKCk7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRyaW1tZWRSYXdQYXJhbWV0ZXIuc2xpY2UoY2VudGVyICsgMSkudHJpbSgpO1xuICAgICAgICAgICAgcGFyYW1ldGVyc1tuYW1lXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHBhcnNlZC5wdXNoKHtcbiAgICAgICAgICAgIHJlZmVyZW5jZSxcbiAgICAgICAgICAgIHBhcmFtZXRlcnMsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkO1xufVxuIl0sIm5hbWVzIjpbInBhcnNlTGlua0hlYWRlciIsImxpbmsiLCJwYXJzZWQiLCJpdGVtcyIsInNwbGl0IiwiaXRlbSIsInJhd1VyaVJlZmVyZW5jZSIsInJhd0xpbmtQYXJhbWV0ZXJzIiwidHJpbW1lZFVyaVJlZmVyZW5jZSIsInRyaW0iLCJsZW5ndGgiLCJFcnJvciIsInJlZmVyZW5jZSIsInNsaWNlIiwicGFyYW1ldGVycyIsImpvaW4iLCJyYXdQYXJhbWV0ZXIiLCJ0cmltbWVkUmF3UGFyYW1ldGVyIiwiY2VudGVyIiwiaW5kZXhPZiIsIm5hbWUiLCJ2YWx1ZSIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/parse-link-header.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/response.js":
/*!*******************************************************!*\
  !*** ./node_modules/got/dist/source/core/response.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ParseError: () => (/* binding */ ParseError),\n/* harmony export */   isResponseOk: () => (/* binding */ isResponseOk),\n/* harmony export */   parseBody: () => (/* binding */ parseBody)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/got/dist/source/core/errors.js\");\n\nconst isResponseOk = (response)=>{\n    const { statusCode } = response;\n    const limitStatusCode = response.request.options.followRedirect ? 299 : 399;\n    return statusCode >= 200 && statusCode <= limitStatusCode || statusCode === 304;\n};\n/**\nAn error to be thrown when server response code is 2xx, and parsing body fails.\nIncludes a `response` property.\n*/ class ParseError extends _errors_js__WEBPACK_IMPORTED_MODULE_0__.RequestError {\n    constructor(error, response){\n        const { options } = response.request;\n        super(`${error.message} in \"${options.url.toString()}\"`, error, response.request);\n        this.name = \"ParseError\";\n        this.code = \"ERR_BODY_PARSE_FAILURE\";\n    }\n}\nconst parseBody = (response, responseType, parseJson, encoding)=>{\n    const { rawBody } = response;\n    try {\n        if (responseType === \"text\") {\n            return rawBody.toString(encoding);\n        }\n        if (responseType === \"json\") {\n            return rawBody.length === 0 ? \"\" : parseJson(rawBody.toString(encoding));\n        }\n        if (responseType === \"buffer\") {\n            return rawBody;\n        }\n    } catch (error) {\n        throw new ParseError(error, response);\n    }\n    throw new ParseError({\n        message: `Unknown body type '${responseType}'`,\n        name: \"Error\"\n    }, response);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvcmVzcG9uc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEyQztBQUNwQyxNQUFNQyxlQUFlLENBQUNDO0lBQ3pCLE1BQU0sRUFBRUMsVUFBVSxFQUFFLEdBQUdEO0lBQ3ZCLE1BQU1FLGtCQUFrQkYsU0FBU0csT0FBTyxDQUFDQyxPQUFPLENBQUNDLGNBQWMsR0FBRyxNQUFNO0lBQ3hFLE9BQU8sY0FBZSxPQUFPSixjQUFjQyxtQkFBb0JELGVBQWU7QUFDbEYsRUFBRTtBQUNGOzs7QUFHQSxHQUNPLE1BQU1LLG1CQUFtQlIsb0RBQVlBO0lBQ3hDUyxZQUFZQyxLQUFLLEVBQUVSLFFBQVEsQ0FBRTtRQUN6QixNQUFNLEVBQUVJLE9BQU8sRUFBRSxHQUFHSixTQUFTRyxPQUFPO1FBQ3BDLEtBQUssQ0FBQyxDQUFDLEVBQUVLLE1BQU1DLE9BQU8sQ0FBQyxLQUFLLEVBQUVMLFFBQVFNLEdBQUcsQ0FBQ0MsUUFBUSxHQUFHLENBQUMsQ0FBQyxFQUFFSCxPQUFPUixTQUFTRyxPQUFPO1FBQ2hGLElBQUksQ0FBQ1MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDaEI7QUFDSjtBQUNPLE1BQU1DLFlBQVksQ0FBQ2QsVUFBVWUsY0FBY0MsV0FBV0M7SUFDekQsTUFBTSxFQUFFQyxPQUFPLEVBQUUsR0FBR2xCO0lBQ3BCLElBQUk7UUFDQSxJQUFJZSxpQkFBaUIsUUFBUTtZQUN6QixPQUFPRyxRQUFRUCxRQUFRLENBQUNNO1FBQzVCO1FBQ0EsSUFBSUYsaUJBQWlCLFFBQVE7WUFDekIsT0FBT0csUUFBUUMsTUFBTSxLQUFLLElBQUksS0FBS0gsVUFBVUUsUUFBUVAsUUFBUSxDQUFDTTtRQUNsRTtRQUNBLElBQUlGLGlCQUFpQixVQUFVO1lBQzNCLE9BQU9HO1FBQ1g7SUFDSixFQUNBLE9BQU9WLE9BQU87UUFDVixNQUFNLElBQUlGLFdBQVdFLE9BQU9SO0lBQ2hDO0lBQ0EsTUFBTSxJQUFJTSxXQUFXO1FBQ2pCRyxTQUFTLENBQUMsbUJBQW1CLEVBQUVNLGFBQWEsQ0FBQyxDQUFDO1FBQzlDSCxNQUFNO0lBQ1YsR0FBR1o7QUFDUCxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZXhhbXBsZS1mdWxsLy4vbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3Jlc3BvbnNlLmpzP2I5MGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdEVycm9yIH0gZnJvbSAnLi9lcnJvcnMuanMnO1xuZXhwb3J0IGNvbnN0IGlzUmVzcG9uc2VPayA9IChyZXNwb25zZSkgPT4ge1xuICAgIGNvbnN0IHsgc3RhdHVzQ29kZSB9ID0gcmVzcG9uc2U7XG4gICAgY29uc3QgbGltaXRTdGF0dXNDb2RlID0gcmVzcG9uc2UucmVxdWVzdC5vcHRpb25zLmZvbGxvd1JlZGlyZWN0ID8gMjk5IDogMzk5O1xuICAgIHJldHVybiAoc3RhdHVzQ29kZSA+PSAyMDAgJiYgc3RhdHVzQ29kZSA8PSBsaW1pdFN0YXR1c0NvZGUpIHx8IHN0YXR1c0NvZGUgPT09IDMwNDtcbn07XG4vKipcbkFuIGVycm9yIHRvIGJlIHRocm93biB3aGVuIHNlcnZlciByZXNwb25zZSBjb2RlIGlzIDJ4eCwgYW5kIHBhcnNpbmcgYm9keSBmYWlscy5cbkluY2x1ZGVzIGEgYHJlc3BvbnNlYCBwcm9wZXJ0eS5cbiovXG5leHBvcnQgY2xhc3MgUGFyc2VFcnJvciBleHRlbmRzIFJlcXVlc3RFcnJvciB7XG4gICAgY29uc3RydWN0b3IoZXJyb3IsIHJlc3BvbnNlKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gcmVzcG9uc2UucmVxdWVzdDtcbiAgICAgICAgc3VwZXIoYCR7ZXJyb3IubWVzc2FnZX0gaW4gXCIke29wdGlvbnMudXJsLnRvU3RyaW5nKCl9XCJgLCBlcnJvciwgcmVzcG9uc2UucmVxdWVzdCk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdQYXJzZUVycm9yJztcbiAgICAgICAgdGhpcy5jb2RlID0gJ0VSUl9CT0RZX1BBUlNFX0ZBSUxVUkUnO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBwYXJzZUJvZHkgPSAocmVzcG9uc2UsIHJlc3BvbnNlVHlwZSwgcGFyc2VKc29uLCBlbmNvZGluZykgPT4ge1xuICAgIGNvbnN0IHsgcmF3Qm9keSB9ID0gcmVzcG9uc2U7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICByZXR1cm4gcmF3Qm9keS50b1N0cmluZyhlbmNvZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gcmF3Qm9keS5sZW5ndGggPT09IDAgPyAnJyA6IHBhcnNlSnNvbihyYXdCb2R5LnRvU3RyaW5nKGVuY29kaW5nKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3BvbnNlVHlwZSA9PT0gJ2J1ZmZlcicpIHtcbiAgICAgICAgICAgIHJldHVybiByYXdCb2R5O1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgUGFyc2VFcnJvcihlcnJvciwgcmVzcG9uc2UpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgUGFyc2VFcnJvcih7XG4gICAgICAgIG1lc3NhZ2U6IGBVbmtub3duIGJvZHkgdHlwZSAnJHtyZXNwb25zZVR5cGV9J2AsXG4gICAgICAgIG5hbWU6ICdFcnJvcicsXG4gICAgfSwgcmVzcG9uc2UpO1xufTtcbiJdLCJuYW1lcyI6WyJSZXF1ZXN0RXJyb3IiLCJpc1Jlc3BvbnNlT2siLCJyZXNwb25zZSIsInN0YXR1c0NvZGUiLCJsaW1pdFN0YXR1c0NvZGUiLCJyZXF1ZXN0Iiwib3B0aW9ucyIsImZvbGxvd1JlZGlyZWN0IiwiUGFyc2VFcnJvciIsImNvbnN0cnVjdG9yIiwiZXJyb3IiLCJtZXNzYWdlIiwidXJsIiwidG9TdHJpbmciLCJuYW1lIiwiY29kZSIsInBhcnNlQm9keSIsInJlc3BvbnNlVHlwZSIsInBhcnNlSnNvbiIsImVuY29kaW5nIiwicmF3Qm9keSIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/response.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/timed-out.js":
/*!********************************************************!*\
  !*** ./node_modules/got/dist/source/core/timed-out.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TimeoutError: () => (/* binding */ TimeoutError),\n/* harmony export */   \"default\": () => (/* binding */ timedOut)\n/* harmony export */ });\n/* harmony import */ var node_net__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:net */ \"node:net\");\n/* harmony import */ var _utils_unhandle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/unhandle.js */ \"(rsc)/./node_modules/got/dist/source/core/utils/unhandle.js\");\n\n\nconst reentry = Symbol(\"reentry\");\nconst noop = ()=>{};\nclass TimeoutError extends Error {\n    constructor(threshold, event){\n        super(`Timeout awaiting '${event}' for ${threshold}ms`);\n        Object.defineProperty(this, \"event\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: event\n        });\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = \"TimeoutError\";\n        this.code = \"ETIMEDOUT\";\n    }\n}\nfunction timedOut(request, delays, options) {\n    if (reentry in request) {\n        return noop;\n    }\n    request[reentry] = true;\n    const cancelers = [];\n    const { once, unhandleAll } = (0,_utils_unhandle_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n    const addTimeout = (delay, callback, event)=>{\n        const timeout = setTimeout(callback, delay, delay, event);\n        timeout.unref?.();\n        const cancel = ()=>{\n            clearTimeout(timeout);\n        };\n        cancelers.push(cancel);\n        return cancel;\n    };\n    const { host, hostname } = options;\n    const timeoutHandler = (delay, event)=>{\n        request.destroy(new TimeoutError(delay, event));\n    };\n    const cancelTimeouts = ()=>{\n        for (const cancel of cancelers){\n            cancel();\n        }\n        unhandleAll();\n    };\n    request.once(\"error\", (error)=>{\n        cancelTimeouts();\n        // Save original behavior\n        /* istanbul ignore next */ if (request.listenerCount(\"error\") === 0) {\n            throw error;\n        }\n    });\n    if (typeof delays.request !== \"undefined\") {\n        const cancelTimeout = addTimeout(delays.request, timeoutHandler, \"request\");\n        once(request, \"response\", (response)=>{\n            once(response, \"end\", cancelTimeout);\n        });\n    }\n    if (typeof delays.socket !== \"undefined\") {\n        const { socket } = delays;\n        const socketTimeoutHandler = ()=>{\n            timeoutHandler(socket, \"socket\");\n        };\n        request.setTimeout(socket, socketTimeoutHandler);\n        // `request.setTimeout(0)` causes a memory leak.\n        // We can just remove the listener and forget about the timer - it's unreffed.\n        // See https://github.com/sindresorhus/got/issues/690\n        cancelers.push(()=>{\n            request.removeListener(\"timeout\", socketTimeoutHandler);\n        });\n    }\n    const hasLookup = typeof delays.lookup !== \"undefined\";\n    const hasConnect = typeof delays.connect !== \"undefined\";\n    const hasSecureConnect = typeof delays.secureConnect !== \"undefined\";\n    const hasSend = typeof delays.send !== \"undefined\";\n    if (hasLookup || hasConnect || hasSecureConnect || hasSend) {\n        once(request, \"socket\", (socket)=>{\n            const { socketPath } = request;\n            /* istanbul ignore next: hard to test */ if (socket.connecting) {\n                const hasPath = Boolean(socketPath ?? node_net__WEBPACK_IMPORTED_MODULE_0__.isIP(hostname ?? host ?? \"\") !== 0);\n                if (hasLookup && !hasPath && typeof socket.address().address === \"undefined\") {\n                    const cancelTimeout = addTimeout(delays.lookup, timeoutHandler, \"lookup\");\n                    once(socket, \"lookup\", cancelTimeout);\n                }\n                if (hasConnect) {\n                    const timeConnect = ()=>addTimeout(delays.connect, timeoutHandler, \"connect\");\n                    if (hasPath) {\n                        once(socket, \"connect\", timeConnect());\n                    } else {\n                        once(socket, \"lookup\", (error)=>{\n                            if (error === null) {\n                                once(socket, \"connect\", timeConnect());\n                            }\n                        });\n                    }\n                }\n                if (hasSecureConnect && options.protocol === \"https:\") {\n                    once(socket, \"connect\", ()=>{\n                        const cancelTimeout = addTimeout(delays.secureConnect, timeoutHandler, \"secureConnect\");\n                        once(socket, \"secureConnect\", cancelTimeout);\n                    });\n                }\n            }\n            if (hasSend) {\n                const timeRequest = ()=>addTimeout(delays.send, timeoutHandler, \"send\");\n                /* istanbul ignore next: hard to test */ if (socket.connecting) {\n                    once(socket, \"connect\", ()=>{\n                        once(request, \"upload-complete\", timeRequest());\n                    });\n                } else {\n                    once(request, \"upload-complete\", timeRequest());\n                }\n            }\n        });\n    }\n    if (typeof delays.response !== \"undefined\") {\n        once(request, \"upload-complete\", ()=>{\n            const cancelTimeout = addTimeout(delays.response, timeoutHandler, \"response\");\n            once(request, \"response\", cancelTimeout);\n        });\n    }\n    if (typeof delays.read !== \"undefined\") {\n        once(request, \"response\", (response)=>{\n            const cancelTimeout = addTimeout(delays.read, timeoutHandler, \"read\");\n            once(response, \"end\", cancelTimeout);\n        });\n    }\n    return cancelTimeouts;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/timed-out.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/utils/get-body-size.js":
/*!******************************************************************!*\
  !*** ./node_modules/got/dist/source/core/utils/get-body-size.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getBodySize)\n/* harmony export */ });\n/* harmony import */ var node_buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:buffer */ \"node:buffer\");\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:util */ \"node:util\");\n/* harmony import */ var _sindresorhus_is__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\n/* harmony import */ var _is_form_data_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./is-form-data.js */ \"(rsc)/./node_modules/got/dist/source/core/utils/is-form-data.js\");\n\n\n\n\nasync function getBodySize(body, headers) {\n    if (headers && \"content-length\" in headers) {\n        return Number(headers[\"content-length\"]);\n    }\n    if (!body) {\n        return 0;\n    }\n    if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_2__.string(body)) {\n        return node_buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.byteLength(body);\n    }\n    if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_2__.buffer(body)) {\n        return body.length;\n    }\n    if ((0,_is_form_data_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(body)) {\n        return (0,node_util__WEBPACK_IMPORTED_MODULE_1__.promisify)(body.getLength.bind(body))();\n    }\n    return undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvZ2V0LWJvZHktc2l6ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFxQztBQUNDO0FBQ0o7QUFDUztBQUM1QixlQUFlSSxZQUFZQyxJQUFJLEVBQUVDLE9BQU87SUFDbkQsSUFBSUEsV0FBVyxvQkFBb0JBLFNBQVM7UUFDeEMsT0FBT0MsT0FBT0QsT0FBTyxDQUFDLGlCQUFpQjtJQUMzQztJQUNBLElBQUksQ0FBQ0QsTUFBTTtRQUNQLE9BQU87SUFDWDtJQUNBLElBQUlILG9EQUFTLENBQUNHLE9BQU87UUFDakIsT0FBT0wsK0NBQU1BLENBQUNTLFVBQVUsQ0FBQ0o7SUFDN0I7SUFDQSxJQUFJSCxvREFBUyxDQUFDRyxPQUFPO1FBQ2pCLE9BQU9BLEtBQUtNLE1BQU07SUFDdEI7SUFDQSxJQUFJUiw0REFBVUEsQ0FBQ0UsT0FBTztRQUNsQixPQUFPSixvREFBU0EsQ0FBQ0ksS0FBS08sU0FBUyxDQUFDQyxJQUFJLENBQUNSO0lBQ3pDO0lBQ0EsT0FBT1M7QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL25vdGlvbi14LWV4YW1wbGUtZnVsbC8uL25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS91dGlscy9nZXQtYm9keS1zaXplLmpzPzdlYzMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAnbm9kZTpidWZmZXInO1xuaW1wb3J0IHsgcHJvbWlzaWZ5IH0gZnJvbSAnbm9kZTp1dGlsJztcbmltcG9ydCBpcyBmcm9tICdAc2luZHJlc29yaHVzL2lzJztcbmltcG9ydCBpc0Zvcm1EYXRhIGZyb20gJy4vaXMtZm9ybS1kYXRhLmpzJztcbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGdldEJvZHlTaXplKGJvZHksIGhlYWRlcnMpIHtcbiAgICBpZiAoaGVhZGVycyAmJiAnY29udGVudC1sZW5ndGgnIGluIGhlYWRlcnMpIHtcbiAgICAgICAgcmV0dXJuIE51bWJlcihoZWFkZXJzWydjb250ZW50LWxlbmd0aCddKTtcbiAgICB9XG4gICAgaWYgKCFib2R5KSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBpZiAoaXMuc3RyaW5nKGJvZHkpKSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuYnl0ZUxlbmd0aChib2R5KTtcbiAgICB9XG4gICAgaWYgKGlzLmJ1ZmZlcihib2R5KSkge1xuICAgICAgICByZXR1cm4gYm9keS5sZW5ndGg7XG4gICAgfVxuICAgIGlmIChpc0Zvcm1EYXRhKGJvZHkpKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNpZnkoYm9keS5nZXRMZW5ndGguYmluZChib2R5KSkoKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbiJdLCJuYW1lcyI6WyJCdWZmZXIiLCJwcm9taXNpZnkiLCJpcyIsImlzRm9ybURhdGEiLCJnZXRCb2R5U2l6ZSIsImJvZHkiLCJoZWFkZXJzIiwiTnVtYmVyIiwic3RyaW5nIiwiYnl0ZUxlbmd0aCIsImJ1ZmZlciIsImxlbmd0aCIsImdldExlbmd0aCIsImJpbmQiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/utils/get-body-size.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/utils/is-client-request.js":
/*!**********************************************************************!*\
  !*** ./node_modules/got/dist/source/core/utils/is-client-request.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction isClientRequest(clientRequest) {\n    return clientRequest.writable && !clientRequest.writableEnded;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isClientRequest);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvaXMtY2xpZW50LXJlcXVlc3QuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLGdCQUFnQkMsYUFBYTtJQUNsQyxPQUFPQSxjQUFjQyxRQUFRLElBQUksQ0FBQ0QsY0FBY0UsYUFBYTtBQUNqRTtBQUNBLGlFQUFlSCxlQUFlQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZXhhbXBsZS1mdWxsLy4vbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL2lzLWNsaWVudC1yZXF1ZXN0LmpzP2YwMmUiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaXNDbGllbnRSZXF1ZXN0KGNsaWVudFJlcXVlc3QpIHtcbiAgICByZXR1cm4gY2xpZW50UmVxdWVzdC53cml0YWJsZSAmJiAhY2xpZW50UmVxdWVzdC53cml0YWJsZUVuZGVkO1xufVxuZXhwb3J0IGRlZmF1bHQgaXNDbGllbnRSZXF1ZXN0O1xuIl0sIm5hbWVzIjpbImlzQ2xpZW50UmVxdWVzdCIsImNsaWVudFJlcXVlc3QiLCJ3cml0YWJsZSIsIndyaXRhYmxlRW5kZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/utils/is-client-request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/utils/is-form-data.js":
/*!*****************************************************************!*\
  !*** ./node_modules/got/dist/source/core/utils/is-form-data.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ isFormData)\n/* harmony export */ });\n/* harmony import */ var _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\n\nfunction isFormData(body) {\n    return _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.nodeStream(body) && _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.function_(body.getBoundary);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvaXMtZm9ybS1kYXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWtDO0FBQ25CLFNBQVNDLFdBQVdDLElBQUk7SUFDbkMsT0FBT0Ysd0RBQWEsQ0FBQ0UsU0FBU0YsdURBQVksQ0FBQ0UsS0FBS0csV0FBVztBQUMvRCIsInNvdXJjZXMiOlsid2VicGFjazovL25vdGlvbi14LWV4YW1wbGUtZnVsbC8uL25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS91dGlscy9pcy1mb3JtLWRhdGEuanM/OGNkNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaXMgZnJvbSAnQHNpbmRyZXNvcmh1cy9pcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0Zvcm1EYXRhKGJvZHkpIHtcbiAgICByZXR1cm4gaXMubm9kZVN0cmVhbShib2R5KSAmJiBpcy5mdW5jdGlvbl8oYm9keS5nZXRCb3VuZGFyeSk7XG59XG4iXSwibmFtZXMiOlsiaXMiLCJpc0Zvcm1EYXRhIiwiYm9keSIsIm5vZGVTdHJlYW0iLCJmdW5jdGlvbl8iLCJnZXRCb3VuZGFyeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/utils/is-form-data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/utils/proxy-events.js":
/*!*****************************************************************!*\
  !*** ./node_modules/got/dist/source/core/utils/proxy-events.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ proxyEvents)\n/* harmony export */ });\nfunction proxyEvents(from, to, events) {\n    const eventFunctions = {};\n    for (const event of events){\n        const eventFunction = (...args)=>{\n            to.emit(event, ...args);\n        };\n        eventFunctions[event] = eventFunction;\n        from.on(event, eventFunction);\n    }\n    return ()=>{\n        for (const [event, eventFunction] of Object.entries(eventFunctions)){\n            from.off(event, eventFunction);\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvcHJveHktZXZlbnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBZSxTQUFTQSxZQUFZQyxJQUFJLEVBQUVDLEVBQUUsRUFBRUMsTUFBTTtJQUNoRCxNQUFNQyxpQkFBaUIsQ0FBQztJQUN4QixLQUFLLE1BQU1DLFNBQVNGLE9BQVE7UUFDeEIsTUFBTUcsZ0JBQWdCLENBQUMsR0FBR0M7WUFDdEJMLEdBQUdNLElBQUksQ0FBQ0gsVUFBVUU7UUFDdEI7UUFDQUgsY0FBYyxDQUFDQyxNQUFNLEdBQUdDO1FBQ3hCTCxLQUFLUSxFQUFFLENBQUNKLE9BQU9DO0lBQ25CO0lBQ0EsT0FBTztRQUNILEtBQUssTUFBTSxDQUFDRCxPQUFPQyxjQUFjLElBQUlJLE9BQU9DLE9BQU8sQ0FBQ1AsZ0JBQWlCO1lBQ2pFSCxLQUFLVyxHQUFHLENBQUNQLE9BQU9DO1FBQ3BCO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL25vdGlvbi14LWV4YW1wbGUtZnVsbC8uL25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS91dGlscy9wcm94eS1ldmVudHMuanM/ZmM3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm94eUV2ZW50cyhmcm9tLCB0bywgZXZlbnRzKSB7XG4gICAgY29uc3QgZXZlbnRGdW5jdGlvbnMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIGV2ZW50cykge1xuICAgICAgICBjb25zdCBldmVudEZ1bmN0aW9uID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgIHRvLmVtaXQoZXZlbnQsIC4uLmFyZ3MpO1xuICAgICAgICB9O1xuICAgICAgICBldmVudEZ1bmN0aW9uc1tldmVudF0gPSBldmVudEZ1bmN0aW9uO1xuICAgICAgICBmcm9tLm9uKGV2ZW50LCBldmVudEZ1bmN0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBbZXZlbnQsIGV2ZW50RnVuY3Rpb25dIG9mIE9iamVjdC5lbnRyaWVzKGV2ZW50RnVuY3Rpb25zKSkge1xuICAgICAgICAgICAgZnJvbS5vZmYoZXZlbnQsIGV2ZW50RnVuY3Rpb24pO1xuICAgICAgICB9XG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6WyJwcm94eUV2ZW50cyIsImZyb20iLCJ0byIsImV2ZW50cyIsImV2ZW50RnVuY3Rpb25zIiwiZXZlbnQiLCJldmVudEZ1bmN0aW9uIiwiYXJncyIsImVtaXQiLCJvbiIsIk9iamVjdCIsImVudHJpZXMiLCJvZmYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/utils/proxy-events.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/utils/unhandle.js":
/*!*************************************************************!*\
  !*** ./node_modules/got/dist/source/core/utils/unhandle.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ unhandle)\n/* harmony export */ });\n// When attaching listeners, it's very easy to forget about them.\n// Especially if you do error handling and set timeouts.\n// So instead of checking if it's proper to throw an error on every timeout ever,\n// use this simple tool which will remove all listeners you have attached.\nfunction unhandle() {\n    const handlers = [];\n    return {\n        once (origin, event, fn) {\n            origin.once(event, fn);\n            handlers.push({\n                origin,\n                event,\n                fn\n            });\n        },\n        unhandleAll () {\n            for (const handler of handlers){\n                const { origin, event, fn } = handler;\n                origin.removeListener(event, fn);\n            }\n            handlers.length = 0;\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvdW5oYW5kbGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFpRTtBQUNqRSx3REFBd0Q7QUFDeEQsaUZBQWlGO0FBQ2pGLDBFQUEwRTtBQUMzRCxTQUFTQTtJQUNwQixNQUFNQyxXQUFXLEVBQUU7SUFDbkIsT0FBTztRQUNIQyxNQUFLQyxNQUFNLEVBQUVDLEtBQUssRUFBRUMsRUFBRTtZQUNsQkYsT0FBT0QsSUFBSSxDQUFDRSxPQUFPQztZQUNuQkosU0FBU0ssSUFBSSxDQUFDO2dCQUFFSDtnQkFBUUM7Z0JBQU9DO1lBQUc7UUFDdEM7UUFDQUU7WUFDSSxLQUFLLE1BQU1DLFdBQVdQLFNBQVU7Z0JBQzVCLE1BQU0sRUFBRUUsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLEVBQUUsRUFBRSxHQUFHRztnQkFDOUJMLE9BQU9NLGNBQWMsQ0FBQ0wsT0FBT0M7WUFDakM7WUFDQUosU0FBU1MsTUFBTSxHQUFHO1FBQ3RCO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL25vdGlvbi14LWV4YW1wbGUtZnVsbC8uL25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS91dGlscy91bmhhbmRsZS5qcz8xYjczIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFdoZW4gYXR0YWNoaW5nIGxpc3RlbmVycywgaXQncyB2ZXJ5IGVhc3kgdG8gZm9yZ2V0IGFib3V0IHRoZW0uXG4vLyBFc3BlY2lhbGx5IGlmIHlvdSBkbyBlcnJvciBoYW5kbGluZyBhbmQgc2V0IHRpbWVvdXRzLlxuLy8gU28gaW5zdGVhZCBvZiBjaGVja2luZyBpZiBpdCdzIHByb3BlciB0byB0aHJvdyBhbiBlcnJvciBvbiBldmVyeSB0aW1lb3V0IGV2ZXIsXG4vLyB1c2UgdGhpcyBzaW1wbGUgdG9vbCB3aGljaCB3aWxsIHJlbW92ZSBhbGwgbGlzdGVuZXJzIHlvdSBoYXZlIGF0dGFjaGVkLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdW5oYW5kbGUoKSB7XG4gICAgY29uc3QgaGFuZGxlcnMgPSBbXTtcbiAgICByZXR1cm4ge1xuICAgICAgICBvbmNlKG9yaWdpbiwgZXZlbnQsIGZuKSB7XG4gICAgICAgICAgICBvcmlnaW4ub25jZShldmVudCwgZm4pO1xuICAgICAgICAgICAgaGFuZGxlcnMucHVzaCh7IG9yaWdpbiwgZXZlbnQsIGZuIH0pO1xuICAgICAgICB9LFxuICAgICAgICB1bmhhbmRsZUFsbCgpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaGFuZGxlciBvZiBoYW5kbGVycykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgb3JpZ2luLCBldmVudCwgZm4gfSA9IGhhbmRsZXI7XG4gICAgICAgICAgICAgICAgb3JpZ2luLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBmbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYW5kbGVycy5sZW5ndGggPSAwO1xuICAgICAgICB9LFxuICAgIH07XG59XG4iXSwibmFtZXMiOlsidW5oYW5kbGUiLCJoYW5kbGVycyIsIm9uY2UiLCJvcmlnaW4iLCJldmVudCIsImZuIiwicHVzaCIsInVuaGFuZGxlQWxsIiwiaGFuZGxlciIsInJlbW92ZUxpc3RlbmVyIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/utils/unhandle.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/utils/url-to-options.js":
/*!*******************************************************************!*\
  !*** ./node_modules/got/dist/source/core/utils/url-to-options.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ urlToOptions)\n/* harmony export */ });\n/* harmony import */ var _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\n\nfunction urlToOptions(url) {\n    // Cast to URL\n    url = url;\n    const options = {\n        protocol: url.protocol,\n        hostname: _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.string(url.hostname) && url.hostname.startsWith(\"[\") ? url.hostname.slice(1, -1) : url.hostname,\n        host: url.host,\n        hash: url.hash,\n        search: url.search,\n        pathname: url.pathname,\n        href: url.href,\n        path: `${url.pathname || \"\"}${url.search || \"\"}`\n    };\n    if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.string(url.port) && url.port.length > 0) {\n        options.port = Number(url.port);\n    }\n    if (url.username || url.password) {\n        options.auth = `${url.username || \"\"}:${url.password || \"\"}`;\n    }\n    return options;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvdXJsLXRvLW9wdGlvbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0M7QUFDbkIsU0FBU0MsYUFBYUMsR0FBRztJQUNwQyxjQUFjO0lBQ2RBLE1BQU1BO0lBQ04sTUFBTUMsVUFBVTtRQUNaQyxVQUFVRixJQUFJRSxRQUFRO1FBQ3RCQyxVQUFVTCxvREFBUyxDQUFDRSxJQUFJRyxRQUFRLEtBQUtILElBQUlHLFFBQVEsQ0FBQ0UsVUFBVSxDQUFDLE9BQU9MLElBQUlHLFFBQVEsQ0FBQ0csS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLTixJQUFJRyxRQUFRO1FBQzVHSSxNQUFNUCxJQUFJTyxJQUFJO1FBQ2RDLE1BQU1SLElBQUlRLElBQUk7UUFDZEMsUUFBUVQsSUFBSVMsTUFBTTtRQUNsQkMsVUFBVVYsSUFBSVUsUUFBUTtRQUN0QkMsTUFBTVgsSUFBSVcsSUFBSTtRQUNkQyxNQUFNLENBQUMsRUFBRVosSUFBSVUsUUFBUSxJQUFJLEdBQUcsRUFBRVYsSUFBSVMsTUFBTSxJQUFJLEdBQUcsQ0FBQztJQUNwRDtJQUNBLElBQUlYLG9EQUFTLENBQUNFLElBQUlhLElBQUksS0FBS2IsSUFBSWEsSUFBSSxDQUFDQyxNQUFNLEdBQUcsR0FBRztRQUM1Q2IsUUFBUVksSUFBSSxHQUFHRSxPQUFPZixJQUFJYSxJQUFJO0lBQ2xDO0lBQ0EsSUFBSWIsSUFBSWdCLFFBQVEsSUFBSWhCLElBQUlpQixRQUFRLEVBQUU7UUFDOUJoQixRQUFRaUIsSUFBSSxHQUFHLENBQUMsRUFBRWxCLElBQUlnQixRQUFRLElBQUksR0FBRyxDQUFDLEVBQUVoQixJQUFJaUIsUUFBUSxJQUFJLEdBQUcsQ0FBQztJQUNoRTtJQUNBLE9BQU9oQjtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90aW9uLXgtZXhhbXBsZS1mdWxsLy4vbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL3VybC10by1vcHRpb25zLmpzP2Q0NDMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGlzIGZyb20gJ0BzaW5kcmVzb3JodXMvaXMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXJsVG9PcHRpb25zKHVybCkge1xuICAgIC8vIENhc3QgdG8gVVJMXG4gICAgdXJsID0gdXJsO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIHByb3RvY29sOiB1cmwucHJvdG9jb2wsXG4gICAgICAgIGhvc3RuYW1lOiBpcy5zdHJpbmcodXJsLmhvc3RuYW1lKSAmJiB1cmwuaG9zdG5hbWUuc3RhcnRzV2l0aCgnWycpID8gdXJsLmhvc3RuYW1lLnNsaWNlKDEsIC0xKSA6IHVybC5ob3N0bmFtZSxcbiAgICAgICAgaG9zdDogdXJsLmhvc3QsXG4gICAgICAgIGhhc2g6IHVybC5oYXNoLFxuICAgICAgICBzZWFyY2g6IHVybC5zZWFyY2gsXG4gICAgICAgIHBhdGhuYW1lOiB1cmwucGF0aG5hbWUsXG4gICAgICAgIGhyZWY6IHVybC5ocmVmLFxuICAgICAgICBwYXRoOiBgJHt1cmwucGF0aG5hbWUgfHwgJyd9JHt1cmwuc2VhcmNoIHx8ICcnfWAsXG4gICAgfTtcbiAgICBpZiAoaXMuc3RyaW5nKHVybC5wb3J0KSAmJiB1cmwucG9ydC5sZW5ndGggPiAwKSB7XG4gICAgICAgIG9wdGlvbnMucG9ydCA9IE51bWJlcih1cmwucG9ydCk7XG4gICAgfVxuICAgIGlmICh1cmwudXNlcm5hbWUgfHwgdXJsLnBhc3N3b3JkKSB7XG4gICAgICAgIG9wdGlvbnMuYXV0aCA9IGAke3VybC51c2VybmFtZSB8fCAnJ306JHt1cmwucGFzc3dvcmQgfHwgJyd9YDtcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnM7XG59XG4iXSwibmFtZXMiOlsiaXMiLCJ1cmxUb09wdGlvbnMiLCJ1cmwiLCJvcHRpb25zIiwicHJvdG9jb2wiLCJob3N0bmFtZSIsInN0cmluZyIsInN0YXJ0c1dpdGgiLCJzbGljZSIsImhvc3QiLCJoYXNoIiwic2VhcmNoIiwicGF0aG5hbWUiLCJocmVmIiwicGF0aCIsInBvcnQiLCJsZW5ndGgiLCJOdW1iZXIiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiYXV0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/utils/url-to-options.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/utils/weakable-map.js":
/*!*****************************************************************!*\
  !*** ./node_modules/got/dist/source/core/utils/weakable-map.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ WeakableMap)\n/* harmony export */ });\nvar WeakableMap;\nWeakableMap = class WeakableMap {\n    constructor(){\n        Object.defineProperty(this, \"weakMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"map\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.weakMap = new WeakMap();\n        this.map = new Map();\n    }\n    set(key, value) {\n        if (typeof key === \"object\") {\n            this.weakMap.set(key, value);\n        } else {\n            this.map.set(key, value);\n        }\n    }\n    get(key) {\n        if (typeof key === \"object\") {\n            return this.weakMap.get(key);\n        }\n        return this.map.get(key);\n    }\n    has(key) {\n        if (typeof key === \"object\") {\n            return this.weakMap.has(key);\n        }\n        return this.map.has(key);\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvd2Vha2FibGUtbWFwLmpzIiwibWFwcGluZ3MiOiI7Ozs7SUFBcUJBO0FBQUFBLGNBQU4sTUFBTUE7SUFDakJDLGFBQWM7UUFDVkMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxXQUFXO1lBQ25DQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxPQUFPO1lBQy9CQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNDLE9BQU8sR0FBRyxJQUFJQztRQUNuQixJQUFJLENBQUNDLEdBQUcsR0FBRyxJQUFJQztJQUNuQjtJQUNBQyxJQUFJQyxHQUFHLEVBQUVOLEtBQUssRUFBRTtRQUNaLElBQUksT0FBT00sUUFBUSxVQUFVO1lBQ3pCLElBQUksQ0FBQ0wsT0FBTyxDQUFDSSxHQUFHLENBQUNDLEtBQUtOO1FBQzFCLE9BQ0s7WUFDRCxJQUFJLENBQUNHLEdBQUcsQ0FBQ0UsR0FBRyxDQUFDQyxLQUFLTjtRQUN0QjtJQUNKO0lBQ0FPLElBQUlELEdBQUcsRUFBRTtRQUNMLElBQUksT0FBT0EsUUFBUSxVQUFVO1lBQ3pCLE9BQU8sSUFBSSxDQUFDTCxPQUFPLENBQUNNLEdBQUcsQ0FBQ0Q7UUFDNUI7UUFDQSxPQUFPLElBQUksQ0FBQ0gsR0FBRyxDQUFDSSxHQUFHLENBQUNEO0lBQ3hCO0lBQ0FFLElBQUlGLEdBQUcsRUFBRTtRQUNMLElBQUksT0FBT0EsUUFBUSxVQUFVO1lBQ3pCLE9BQU8sSUFBSSxDQUFDTCxPQUFPLENBQUNPLEdBQUcsQ0FBQ0Y7UUFDNUI7UUFDQSxPQUFPLElBQUksQ0FBQ0gsR0FBRyxDQUFDSyxHQUFHLENBQUNGO0lBQ3hCO0FBQ0o7QUFyQ3FCYiIsInNvdXJjZXMiOlsid2VicGFjazovL25vdGlvbi14LWV4YW1wbGUtZnVsbC8uL25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS91dGlscy93ZWFrYWJsZS1tYXAuanM/OTFhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBXZWFrYWJsZU1hcCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIndlYWtNYXBcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibWFwXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMud2Vha01hcCA9IG5ldyBXZWFrTWFwKCk7XG4gICAgICAgIHRoaXMubWFwID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRoaXMud2Vha01hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0KGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndlYWtNYXAuZ2V0KGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubWFwLmdldChrZXkpO1xuICAgIH1cbiAgICBoYXMoa2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMud2Vha01hcC5oYXMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5tYXAuaGFzKGtleSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIldlYWthYmxlTWFwIiwiY29uc3RydWN0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwid2Vha01hcCIsIldlYWtNYXAiLCJtYXAiLCJNYXAiLCJzZXQiLCJrZXkiLCJnZXQiLCJoYXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/utils/weakable-map.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/create.js":
/*!************************************************!*\
  !*** ./node_modules/got/dist/source/create.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\n/* harmony import */ var _as_promise_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./as-promise/index.js */ \"(rsc)/./node_modules/got/dist/source/as-promise/index.js\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/index.js */ \"(rsc)/./node_modules/got/dist/source/core/index.js\");\n/* harmony import */ var _core_options_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/options.js */ \"(rsc)/./node_modules/got/dist/source/core/options.js\");\n\n\n\n\n// The `delay` package weighs 10KB (!)\nconst delay = async (ms)=>new Promise((resolve)=>{\n        setTimeout(resolve, ms);\n    });\nconst isGotInstance = (value)=>_sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.function_(value);\nconst aliases = [\n    \"get\",\n    \"post\",\n    \"put\",\n    \"patch\",\n    \"head\",\n    \"delete\"\n];\nconst create = (defaults)=>{\n    defaults = {\n        options: new _core_options_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](undefined, undefined, defaults.options),\n        handlers: [\n            ...defaults.handlers\n        ],\n        mutableDefaults: defaults.mutableDefaults\n    };\n    Object.defineProperty(defaults, \"mutableDefaults\", {\n        enumerable: true,\n        configurable: false,\n        writable: false\n    });\n    // Got interface\n    const got = (url, options, defaultOptions = defaults.options)=>{\n        const request = new _core_index_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](url, options, defaultOptions);\n        let promise;\n        const lastHandler = (normalized)=>{\n            // Note: `options` is `undefined` when `new Options(...)` fails\n            request.options = normalized;\n            request._noPipe = !normalized.isStream;\n            void request.flush();\n            if (normalized.isStream) {\n                return request;\n            }\n            if (!promise) {\n                promise = (0,_as_promise_index_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(request);\n            }\n            return promise;\n        };\n        let iteration = 0;\n        const iterateHandlers = (newOptions)=>{\n            const handler = defaults.handlers[iteration++] ?? lastHandler;\n            const result = handler(newOptions, iterateHandlers);\n            if (_sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.promise(result) && !request.options.isStream) {\n                if (!promise) {\n                    promise = (0,_as_promise_index_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(request);\n                }\n                if (result !== promise) {\n                    const descriptors = Object.getOwnPropertyDescriptors(promise);\n                    for(const key in descriptors){\n                        if (key in result) {\n                            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                            delete descriptors[key];\n                        }\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    Object.defineProperties(result, descriptors);\n                    result.cancel = promise.cancel;\n                }\n            }\n            return result;\n        };\n        return iterateHandlers(request.options);\n    };\n    got.extend = (...instancesOrOptions)=>{\n        const options = new _core_options_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](undefined, undefined, defaults.options);\n        const handlers = [\n            ...defaults.handlers\n        ];\n        let mutableDefaults;\n        for (const value of instancesOrOptions){\n            if (isGotInstance(value)) {\n                options.merge(value.defaults.options);\n                handlers.push(...value.defaults.handlers);\n                mutableDefaults = value.defaults.mutableDefaults;\n            } else {\n                options.merge(value);\n                if (value.handlers) {\n                    handlers.push(...value.handlers);\n                }\n                mutableDefaults = value.mutableDefaults;\n            }\n        }\n        return create({\n            options,\n            handlers,\n            mutableDefaults: Boolean(mutableDefaults)\n        });\n    };\n    // Pagination\n    const paginateEach = async function*(url, options) {\n        let normalizedOptions = new _core_options_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](url, options, defaults.options);\n        normalizedOptions.resolveBodyOnly = false;\n        const { pagination } = normalizedOptions;\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.assert.function_(pagination.transform);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.assert.function_(pagination.shouldContinue);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.assert.function_(pagination.filter);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.assert.function_(pagination.paginate);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.assert.number(pagination.countLimit);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.assert.number(pagination.requestLimit);\n        _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.assert.number(pagination.backoff);\n        const allItems = [];\n        let { countLimit } = pagination;\n        let numberOfRequests = 0;\n        while(numberOfRequests < pagination.requestLimit){\n            if (numberOfRequests !== 0) {\n                // eslint-disable-next-line no-await-in-loop\n                await delay(pagination.backoff);\n            }\n            // eslint-disable-next-line no-await-in-loop\n            const response = await got(undefined, undefined, normalizedOptions);\n            // eslint-disable-next-line no-await-in-loop\n            const parsed = await pagination.transform(response);\n            const currentItems = [];\n            _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.assert.array(parsed);\n            for (const item of parsed){\n                if (pagination.filter({\n                    item,\n                    currentItems,\n                    allItems\n                })) {\n                    if (!pagination.shouldContinue({\n                        item,\n                        currentItems,\n                        allItems\n                    })) {\n                        return;\n                    }\n                    yield item;\n                    if (pagination.stackAllItems) {\n                        allItems.push(item);\n                    }\n                    currentItems.push(item);\n                    if (--countLimit <= 0) {\n                        return;\n                    }\n                }\n            }\n            const optionsToMerge = pagination.paginate({\n                response,\n                currentItems,\n                allItems\n            });\n            if (optionsToMerge === false) {\n                return;\n            }\n            if (optionsToMerge === response.request.options) {\n                normalizedOptions = response.request.options;\n            } else {\n                normalizedOptions.merge(optionsToMerge);\n                _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.assert.any([\n                    _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.urlInstance,\n                    _sindresorhus_is__WEBPACK_IMPORTED_MODULE_0__.undefined\n                ], optionsToMerge.url);\n                if (optionsToMerge.url !== undefined) {\n                    normalizedOptions.prefixUrl = \"\";\n                    normalizedOptions.url = optionsToMerge.url;\n                }\n            }\n            numberOfRequests++;\n        }\n    };\n    got.paginate = paginateEach;\n    got.paginate.all = async (url, options)=>{\n        const results = [];\n        for await (const item of paginateEach(url, options)){\n            results.push(item);\n        }\n        return results;\n    };\n    // For those who like very descriptive names\n    got.paginate.each = paginateEach;\n    // Stream API\n    got.stream = (url, options)=>got(url, {\n            ...options,\n            isStream: true\n        });\n    // Shortcuts\n    for (const method of aliases){\n        got[method] = (url, options)=>got(url, {\n                ...options,\n                method\n            });\n        got.stream[method] = (url, options)=>got(url, {\n                ...options,\n                method,\n                isStream: true\n            });\n    }\n    if (!defaults.mutableDefaults) {\n        Object.freeze(defaults.handlers);\n        defaults.options.freeze();\n    }\n    Object.defineProperty(got, \"defaults\", {\n        value: defaults,\n        writable: false,\n        configurable: false,\n        enumerable: true\n    });\n    return got;\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (create);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/create.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/index.js":
/*!***********************************************!*\
  !*** ./node_modules/got/dist/source/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CacheError: () => (/* reexport safe */ _core_errors_js__WEBPACK_IMPORTED_MODULE_3__.CacheError),\n/* harmony export */   CancelError: () => (/* reexport safe */ _as_promise_types_js__WEBPACK_IMPORTED_MODULE_5__.CancelError),\n/* harmony export */   HTTPError: () => (/* reexport safe */ _core_errors_js__WEBPACK_IMPORTED_MODULE_3__.HTTPError),\n/* harmony export */   MaxRedirectsError: () => (/* reexport safe */ _core_errors_js__WEBPACK_IMPORTED_MODULE_3__.MaxRedirectsError),\n/* harmony export */   Options: () => (/* reexport safe */ _core_options_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   ParseError: () => (/* reexport safe */ _core_response_js__WEBPACK_IMPORTED_MODULE_2__.ParseError),\n/* harmony export */   ReadError: () => (/* reexport safe */ _core_errors_js__WEBPACK_IMPORTED_MODULE_3__.ReadError),\n/* harmony export */   RequestError: () => (/* reexport safe */ _core_errors_js__WEBPACK_IMPORTED_MODULE_3__.RequestError),\n/* harmony export */   RetryError: () => (/* reexport safe */ _core_errors_js__WEBPACK_IMPORTED_MODULE_3__.RetryError),\n/* harmony export */   TimeoutError: () => (/* reexport safe */ _core_errors_js__WEBPACK_IMPORTED_MODULE_3__.TimeoutError),\n/* harmony export */   UploadError: () => (/* reexport safe */ _core_errors_js__WEBPACK_IMPORTED_MODULE_3__.UploadError),\n/* harmony export */   calculateRetryDelay: () => (/* reexport safe */ _core_calculate_retry_delay_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n/* harmony export */   create: () => (/* reexport safe */ _create_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   got: () => (/* binding */ got),\n/* harmony export */   isResponseOk: () => (/* reexport safe */ _core_response_js__WEBPACK_IMPORTED_MODULE_2__.isResponseOk),\n/* harmony export */   parseBody: () => (/* reexport safe */ _core_response_js__WEBPACK_IMPORTED_MODULE_2__.parseBody),\n/* harmony export */   parseLinkHeader: () => (/* reexport safe */ _core_parse_link_header_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _create_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./create.js */ \"(rsc)/./node_modules/got/dist/source/create.js\");\n/* harmony import */ var _core_options_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/options.js */ \"(rsc)/./node_modules/got/dist/source/core/options.js\");\n/* harmony import */ var _core_response_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/response.js */ \"(rsc)/./node_modules/got/dist/source/core/response.js\");\n/* harmony import */ var _core_errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/errors.js */ \"(rsc)/./node_modules/got/dist/source/core/errors.js\");\n/* harmony import */ var _core_calculate_retry_delay_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./core/calculate-retry-delay.js */ \"(rsc)/./node_modules/got/dist/source/core/calculate-retry-delay.js\");\n/* harmony import */ var _as_promise_types_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./as-promise/types.js */ \"(rsc)/./node_modules/got/dist/source/as-promise/types.js\");\n/* harmony import */ var _core_parse_link_header_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./core/parse-link-header.js */ \"(rsc)/./node_modules/got/dist/source/core/parse-link-header.js\");\n\n\nconst defaults = {\n    options: new _core_options_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](),\n    handlers: [],\n    mutableDefaults: false\n};\nconst got = (0,_create_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(defaults);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (got);\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBaUM7QUFDTztBQUN4QyxNQUFNRSxXQUFXO0lBQ2JDLFNBQVMsSUFBSUYsd0RBQU9BO0lBQ3BCRyxVQUFVLEVBQUU7SUFDWkMsaUJBQWlCO0FBQ3JCO0FBQ0EsTUFBTUMsTUFBTU4sc0RBQU1BLENBQUNFO0FBQ25CLGlFQUFlSSxHQUFHQSxFQUFDO0FBQ0o7QUFDd0M7QUFDckI7QUFDQztBQUNIO0FBQ0M7QUFDZ0Q7QUFDM0M7QUFDWDtBQUNxQjtBQUN5QiIsInNvdXJjZXMiOlsid2VicGFjazovL25vdGlvbi14LWV4YW1wbGUtZnVsbC8uL25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvaW5kZXguanM/ZjIyNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlIGZyb20gJy4vY3JlYXRlLmpzJztcbmltcG9ydCBPcHRpb25zIGZyb20gJy4vY29yZS9vcHRpb25zLmpzJztcbmNvbnN0IGRlZmF1bHRzID0ge1xuICAgIG9wdGlvbnM6IG5ldyBPcHRpb25zKCksXG4gICAgaGFuZGxlcnM6IFtdLFxuICAgIG11dGFibGVEZWZhdWx0czogZmFsc2UsXG59O1xuY29uc3QgZ290ID0gY3JlYXRlKGRlZmF1bHRzKTtcbmV4cG9ydCBkZWZhdWx0IGdvdDtcbmV4cG9ydCB7IGdvdCB9O1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBPcHRpb25zIH0gZnJvbSAnLi9jb3JlL29wdGlvbnMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9jb3JlL29wdGlvbnMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9jb3JlL3Jlc3BvbnNlLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vY29yZS9pbmRleC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2NvcmUvZXJyb3JzLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY2FsY3VsYXRlUmV0cnlEZWxheSB9IGZyb20gJy4vY29yZS9jYWxjdWxhdGUtcmV0cnktZGVsYXkuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9hcy1wcm9taXNlL3R5cGVzLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdHlwZXMuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjcmVhdGUgfSBmcm9tICcuL2NyZWF0ZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHBhcnNlTGlua0hlYWRlciB9IGZyb20gJy4vY29yZS9wYXJzZS1saW5rLWhlYWRlci5qcyc7XG4iXSwibmFtZXMiOlsiY3JlYXRlIiwiT3B0aW9ucyIsImRlZmF1bHRzIiwib3B0aW9ucyIsImhhbmRsZXJzIiwibXV0YWJsZURlZmF1bHRzIiwiZ290IiwiZGVmYXVsdCIsImNhbGN1bGF0ZVJldHJ5RGVsYXkiLCJwYXJzZUxpbmtIZWFkZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/index.js\n");

/***/ })

};
;