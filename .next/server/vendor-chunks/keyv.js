"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/keyv";
exports.ids = ["vendor-chunks/keyv"];
exports.modules = {

/***/ "(rsc)/./node_modules/keyv/src/index.js":
/*!****************************************!*\
  !*** ./node_modules/keyv/src/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst JSONB = __webpack_require__(/*! json-buffer */ \"(rsc)/./node_modules/json-buffer/index.js\");\nconst loadStore = (opts)=>{\n    const adapters = {\n        redis: \"@keyv/redis\",\n        mongodb: \"@keyv/mongo\",\n        mongo: \"@keyv/mongo\",\n        sqlite: \"@keyv/sqlite\",\n        postgresql: \"@keyv/postgres\",\n        postgres: \"@keyv/postgres\",\n        mysql: \"@keyv/mysql\"\n    };\n    if (opts.adapter || opts.uri) {\n        const adapter = opts.adapter || /^[^:]*/.exec(opts.uri)[0];\n        return new (__webpack_require__(\"(rsc)/./node_modules/keyv/src sync recursive\")(adapters[adapter]))(opts);\n    }\n    return new Map();\n};\nclass Keyv extends EventEmitter {\n    constructor(uri, opts){\n        super();\n        this.opts = Object.assign({\n            namespace: \"keyv\",\n            serialize: JSONB.stringify,\n            deserialize: JSONB.parse\n        }, typeof uri === \"string\" ? {\n            uri\n        } : uri, opts);\n        if (!this.opts.store) {\n            const adapterOpts = Object.assign({}, this.opts);\n            this.opts.store = loadStore(adapterOpts);\n        }\n        if (typeof this.opts.store.on === \"function\") {\n            this.opts.store.on(\"error\", (err)=>this.emit(\"error\", err));\n        }\n        this.opts.store.namespace = this.opts.namespace;\n    }\n    _getKeyPrefix(key) {\n        return `${this.opts.namespace}:${key}`;\n    }\n    get(key, opts) {\n        const keyPrefixed = this._getKeyPrefix(key);\n        const { store } = this.opts;\n        return Promise.resolve().then(()=>store.get(keyPrefixed)).then((data)=>{\n            return typeof data === \"string\" ? this.opts.deserialize(data) : data;\n        }).then((data)=>{\n            if (data === undefined) {\n                return undefined;\n            }\n            if (typeof data.expires === \"number\" && Date.now() > data.expires) {\n                this.delete(key);\n                return undefined;\n            }\n            return opts && opts.raw ? data : data.value;\n        });\n    }\n    set(key, value, ttl) {\n        const keyPrefixed = this._getKeyPrefix(key);\n        if (typeof ttl === \"undefined\") {\n            ttl = this.opts.ttl;\n        }\n        if (ttl === 0) {\n            ttl = undefined;\n        }\n        const { store } = this.opts;\n        return Promise.resolve().then(()=>{\n            const expires = typeof ttl === \"number\" ? Date.now() + ttl : null;\n            value = {\n                value,\n                expires\n            };\n            return this.opts.serialize(value);\n        }).then((value)=>store.set(keyPrefixed, value, ttl)).then(()=>true);\n    }\n    delete(key) {\n        const keyPrefixed = this._getKeyPrefix(key);\n        const { store } = this.opts;\n        return Promise.resolve().then(()=>store.delete(keyPrefixed));\n    }\n    clear() {\n        const { store } = this.opts;\n        return Promise.resolve().then(()=>store.clear());\n    }\n}\nmodule.exports = Keyv;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QWEsQ0FBQ0M7UUFDdkMsSUFBSSxPQUFPZSxRQUFRLGFBQWE7WUFDL0JBLE1BQU0sSUFBSSxDQUFDM0MsSUFBSSxDQUFDMkMsR0FBRztRQUNwQjtRQUVBLElBQUlBLFFBQVEsR0FBRztZQUNkQSxNQUFNUjtRQUNQO1FBRUEsTUFBTSxFQUFFYixLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUN0QixJQUFJO1FBRTNCLE9BQU8rQixRQUFRQyxPQUFPLEdBQ3BCQyxJQUFJLENBQUM7WUFDTCxNQUFNRyxVQUFVLE9BQVFPLFFBQVEsV0FBYU4sS0FBS0MsR0FBRyxLQUFLSyxNQUFPO1lBQ2pFRixRQUFRO2dCQUFFQTtnQkFBT0w7WUFBUTtZQUN6QixPQUFPLElBQUksQ0FBQ3BDLElBQUksQ0FBQ2tCLFNBQVMsQ0FBQ3VCO1FBQzVCLEdBQ0NSLElBQUksQ0FBQ1EsQ0FBQUEsUUFBU25CLE1BQU1vQixHQUFHLENBQUNaLGFBQWFXLE9BQU9FLE1BQzVDVixJQUFJLENBQUMsSUFBTTtJQUNkO0lBRUFNLE9BQU9YLEdBQUcsRUFBRTtRQUNYLE1BQU1FLGNBQWMsSUFBSSxDQUFDSCxhQUFhLENBQUNDO1FBQ3ZDLE1BQU0sRUFBRU4sS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDdEIsSUFBSTtRQUMzQixPQUFPK0IsUUFBUUMsT0FBTyxHQUNwQkMsSUFBSSxDQUFDLElBQU1YLE1BQU1pQixNQUFNLENBQUNUO0lBQzNCO0lBRUFjLFFBQVE7UUFDUCxNQUFNLEVBQUV0QixLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUN0QixJQUFJO1FBQzNCLE9BQU8rQixRQUFRQyxPQUFPLEdBQ3BCQyxJQUFJLENBQUMsSUFBTVgsTUFBTXNCLEtBQUs7SUFDekI7QUFDRDtBQUVBQyxPQUFPQyxPQUFPLEdBQUdqQyIsInNvdXJjZXMiOlsid2VicGFjazovL25vdGlvbi14LWZ1bGwvLi9ub2RlX21vZHVsZXMva2V5di9zcmMvaW5kZXguanM/OTM4NyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpO1xuY29uc3QgSlNPTkIgPSByZXF1aXJlKCdqc29uLWJ1ZmZlcicpO1xuXG5jb25zdCBsb2FkU3RvcmUgPSBvcHRzID0+IHtcblx0Y29uc3QgYWRhcHRlcnMgPSB7XG5cdFx0cmVkaXM6ICdAa2V5di9yZWRpcycsXG5cdFx0bW9uZ29kYjogJ0BrZXl2L21vbmdvJyxcblx0XHRtb25nbzogJ0BrZXl2L21vbmdvJyxcblx0XHRzcWxpdGU6ICdAa2V5di9zcWxpdGUnLFxuXHRcdHBvc3RncmVzcWw6ICdAa2V5di9wb3N0Z3JlcycsXG5cdFx0cG9zdGdyZXM6ICdAa2V5di9wb3N0Z3JlcycsXG5cdFx0bXlzcWw6ICdAa2V5di9teXNxbCdcblx0fTtcblx0aWYgKG9wdHMuYWRhcHRlciB8fCBvcHRzLnVyaSkge1xuXHRcdGNvbnN0IGFkYXB0ZXIgPSBvcHRzLmFkYXB0ZXIgfHwgL15bXjpdKi8uZXhlYyhvcHRzLnVyaSlbMF07XG5cdFx0cmV0dXJuIG5ldyAocmVxdWlyZShhZGFwdGVyc1thZGFwdGVyXSkpKG9wdHMpO1xuXHR9XG5cblx0cmV0dXJuIG5ldyBNYXAoKTtcbn07XG5cbmNsYXNzIEtleXYgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuXHRjb25zdHJ1Y3Rvcih1cmksIG9wdHMpIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMub3B0cyA9IE9iamVjdC5hc3NpZ24oXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWVzcGFjZTogJ2tleXYnLFxuXHRcdFx0XHRzZXJpYWxpemU6IEpTT05CLnN0cmluZ2lmeSxcblx0XHRcdFx0ZGVzZXJpYWxpemU6IEpTT05CLnBhcnNlXG5cdFx0XHR9LFxuXHRcdFx0KHR5cGVvZiB1cmkgPT09ICdzdHJpbmcnKSA/IHsgdXJpIH0gOiB1cmksXG5cdFx0XHRvcHRzXG5cdFx0KTtcblxuXHRcdGlmICghdGhpcy5vcHRzLnN0b3JlKSB7XG5cdFx0XHRjb25zdCBhZGFwdGVyT3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0cyk7XG5cdFx0XHR0aGlzLm9wdHMuc3RvcmUgPSBsb2FkU3RvcmUoYWRhcHRlck9wdHMpO1xuXHRcdH1cblxuXHRcdGlmICh0eXBlb2YgdGhpcy5vcHRzLnN0b3JlLm9uID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHR0aGlzLm9wdHMuc3RvcmUub24oJ2Vycm9yJywgZXJyID0+IHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpKTtcblx0XHR9XG5cblx0XHR0aGlzLm9wdHMuc3RvcmUubmFtZXNwYWNlID0gdGhpcy5vcHRzLm5hbWVzcGFjZTtcblx0fVxuXG5cdF9nZXRLZXlQcmVmaXgoa2V5KSB7XG5cdFx0cmV0dXJuIGAke3RoaXMub3B0cy5uYW1lc3BhY2V9OiR7a2V5fWA7XG5cdH1cblxuXHRnZXQoa2V5LCBvcHRzKSB7XG5cdFx0Y29uc3Qga2V5UHJlZml4ZWQgPSB0aGlzLl9nZXRLZXlQcmVmaXgoa2V5KTtcblx0XHRjb25zdCB7IHN0b3JlIH0gPSB0aGlzLm9wdHM7XG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG5cdFx0XHQudGhlbigoKSA9PiBzdG9yZS5nZXQoa2V5UHJlZml4ZWQpKVxuXHRcdFx0LnRoZW4oZGF0YSA9PiB7XG5cdFx0XHRcdHJldHVybiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSA/IHRoaXMub3B0cy5kZXNlcmlhbGl6ZShkYXRhKSA6IGRhdGE7XG5cdFx0XHR9KVxuXHRcdFx0LnRoZW4oZGF0YSA9PiB7XG5cdFx0XHRcdGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHR5cGVvZiBkYXRhLmV4cGlyZXMgPT09ICdudW1iZXInICYmIERhdGUubm93KCkgPiBkYXRhLmV4cGlyZXMpIHtcblx0XHRcdFx0XHR0aGlzLmRlbGV0ZShrZXkpO1xuXHRcdFx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gKG9wdHMgJiYgb3B0cy5yYXcpID8gZGF0YSA6IGRhdGEudmFsdWU7XG5cdFx0XHR9KTtcblx0fVxuXG5cdHNldChrZXksIHZhbHVlLCB0dGwpIHtcblx0XHRjb25zdCBrZXlQcmVmaXhlZCA9IHRoaXMuX2dldEtleVByZWZpeChrZXkpO1xuXHRcdGlmICh0eXBlb2YgdHRsID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0dHRsID0gdGhpcy5vcHRzLnR0bDtcblx0XHR9XG5cblx0XHRpZiAodHRsID09PSAwKSB7XG5cdFx0XHR0dGwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Y29uc3QgeyBzdG9yZSB9ID0gdGhpcy5vcHRzO1xuXG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG5cdFx0XHQudGhlbigoKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGV4cGlyZXMgPSAodHlwZW9mIHR0bCA9PT0gJ251bWJlcicpID8gKERhdGUubm93KCkgKyB0dGwpIDogbnVsbDtcblx0XHRcdFx0dmFsdWUgPSB7IHZhbHVlLCBleHBpcmVzIH07XG5cdFx0XHRcdHJldHVybiB0aGlzLm9wdHMuc2VyaWFsaXplKHZhbHVlKTtcblx0XHRcdH0pXG5cdFx0XHQudGhlbih2YWx1ZSA9PiBzdG9yZS5zZXQoa2V5UHJlZml4ZWQsIHZhbHVlLCB0dGwpKVxuXHRcdFx0LnRoZW4oKCkgPT4gdHJ1ZSk7XG5cdH1cblxuXHRkZWxldGUoa2V5KSB7XG5cdFx0Y29uc3Qga2V5UHJlZml4ZWQgPSB0aGlzLl9nZXRLZXlQcmVmaXgoa2V5KTtcblx0XHRjb25zdCB7IHN0b3JlIH0gPSB0aGlzLm9wdHM7XG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG5cdFx0XHQudGhlbigoKSA9PiBzdG9yZS5kZWxldGUoa2V5UHJlZml4ZWQpKTtcblx0fVxuXG5cdGNsZWFyKCkge1xuXHRcdGNvbnN0IHsgc3RvcmUgfSA9IHRoaXMub3B0cztcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcblx0XHRcdC50aGVuKCgpID0+IHN0b3JlLmNsZWFyKCkpO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gS2V5djtcbiJdLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJyZXF1aXJlIiwiSlNPTkIiLCJsb2FkU3RvcmUiLCJvcHRzIiwiYWRhcHRlcnMiLCJyZWRpcyIsIm1vbmdvZGIiLCJtb25nbyIsInNxbGl0ZSIsInBvc3RncmVzcWwiLCJwb3N0Z3JlcyIsIm15c3FsIiwiYWRhcHRlciIsInVyaSIsImV4ZWMiLCJNYXAiLCJLZXl2IiwiY29uc3RydWN0b3IiLCJPYmplY3QiLCJhc3NpZ24iLCJuYW1lc3BhY2UiLCJzZXJpYWxpemUiLCJzdHJpbmdpZnkiLCJkZXNlcmlhbGl6ZSIsInBhcnNlIiwic3RvcmUiLCJhZGFwdGVyT3B0cyIsIm9uIiwiZXJyIiwiZW1pdCIsIl9nZXRLZXlQcmVmaXgiLCJrZXkiLCJnZXQiLCJrZXlQcmVmaXhlZCIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsImRhdGEiLCJ1bmRlZmluZWQiLCJleHBpcmVzIiwiRGF0ZSIsIm5vdyIsImRlbGV0ZSIsInJhdyIsInZhbHVlIiwic2V0IiwidHRsIiwiY2xlYXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/keyv/src/index.js\n");

/***/ })

};
;