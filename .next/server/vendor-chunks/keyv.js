"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/keyv";
exports.ids = ["vendor-chunks/keyv"];
exports.modules = {

/***/ "(rsc)/./node_modules/keyv/src/index.js":
/*!****************************************!*\
  !*** ./node_modules/keyv/src/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst JSONB = __webpack_require__(/*! json-buffer */ \"(rsc)/./node_modules/json-buffer/index.js\");\nconst loadStore = (opts)=>{\n    const adapters = {\n        redis: \"@keyv/redis\",\n        mongodb: \"@keyv/mongo\",\n        mongo: \"@keyv/mongo\",\n        sqlite: \"@keyv/sqlite\",\n        postgresql: \"@keyv/postgres\",\n        postgres: \"@keyv/postgres\",\n        mysql: \"@keyv/mysql\"\n    };\n    if (opts.adapter || opts.uri) {\n        const adapter = opts.adapter || /^[^:]*/.exec(opts.uri)[0];\n        return new (__webpack_require__(\"(rsc)/./node_modules/keyv/src sync recursive\")(adapters[adapter]))(opts);\n    }\n    return new Map();\n};\nclass Keyv extends EventEmitter {\n    constructor(uri, opts){\n        super();\n        this.opts = Object.assign({\n            namespace: \"keyv\",\n            serialize: JSONB.stringify,\n            deserialize: JSONB.parse\n        }, typeof uri === \"string\" ? {\n            uri\n        } : uri, opts);\n        if (!this.opts.store) {\n            const adapterOpts = Object.assign({}, this.opts);\n            this.opts.store = loadStore(adapterOpts);\n        }\n        if (typeof this.opts.store.on === \"function\") {\n            this.opts.store.on(\"error\", (err)=>this.emit(\"error\", err));\n        }\n        this.opts.store.namespace = this.opts.namespace;\n    }\n    _getKeyPrefix(key) {\n        return `${this.opts.namespace}:${key}`;\n    }\n    get(key, opts) {\n        const keyPrefixed = this._getKeyPrefix(key);\n        const { store } = this.opts;\n        return Promise.resolve().then(()=>store.get(keyPrefixed)).then((data)=>{\n            return typeof data === \"string\" ? this.opts.deserialize(data) : data;\n        }).then((data)=>{\n            if (data === undefined) {\n                return undefined;\n            }\n            if (typeof data.expires === \"number\" && Date.now() > data.expires) {\n                this.delete(key);\n                return undefined;\n            }\n            return opts && opts.raw ? data : data.value;\n        });\n    }\n    set(key, value, ttl) {\n        const keyPrefixed = this._getKeyPrefix(key);\n        if (typeof ttl === \"undefined\") {\n            ttl = this.opts.ttl;\n        }\n        if (ttl === 0) {\n            ttl = undefined;\n        }\n        const { store } = this.opts;\n        return Promise.resolve().then(()=>{\n            const expires = typeof ttl === \"number\" ? Date.now() + ttl : null;\n            value = {\n                value,\n                expires\n            };\n            return this.opts.serialize(value);\n        }).then((value)=>store.set(keyPrefixed, value, ttl)).then(()=>true);\n    }\n    delete(key) {\n        const keyPrefixed = this._getKeyPrefix(key);\n        const { store } = this.opts;\n        return Promise.resolve().then(()=>store.delete(keyPrefixed));\n    }\n    clear() {\n        const { store } = this.opts;\n        return Promise.resolve().then(()=>store.clear());\n    }\n}\nmodule.exports = Keyv;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QWEsQ0FBQ0M7UUFDdkMsSUFBSSxPQUFPZSxRQUFRLGFBQWE7WUFDL0JBLE1BQU0sSUFBSSxDQUFDM0MsSUFBSSxDQUFDMkMsR0FBRztRQUNwQjtRQUVBLElBQUlBLFFBQVEsR0FBRztZQUNkQSxNQUFNUjtRQUNQO1FBRUEsTUFBTSxFQUFFYixLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUN0QixJQUFJO1FBRTNCLE9BQU8rQixRQUFRQyxPQUFPLEdBQ3BCQyxJQUFJLENBQUM7WUFDTCxNQUFNRyxVQUFVLE9BQVFPLFFBQVEsV0FBYU4sS0FBS0MsR0FBRyxLQUFLSyxNQUFPO1lBQ2pFRixRQUFRO2dCQUFFQTtnQkFBT0w7WUFBUTtZQUN6QixPQUFPLElBQUksQ0FBQ3BDLElBQUksQ0FBQ2tCLFNBQVMsQ0FBQ3VCO1FBQzVCLEdBQ0NSLElBQUksQ0FBQ1EsQ0FBQUEsUUFBU25CLE1BQU1vQixHQUFHLENBQUNaLGFBQWFXLE9BQU9FLE1BQzVDVixJQUFJLENBQUMsSUFBTTtJQUNkO0lBRUFNLE9BQU9YLEdBQUcsRUFBRTtRQUNYLE1BQU1FLGNBQWMsSUFBSSxDQUFDSCxhQUFhLENBQUNDO1FBQ3ZDLE1BQU0sRUFBRU4sS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDdEIsSUFBSTtRQUMzQixPQUFPK0IsUUFBUUMsT0FBTyxHQUNwQkMsSUFBSSxDQUFDLElBQU1YLE1BQU1pQixNQUFNLENBQUNUO0lBQzNCO0lBRUFjLFFBQVE7UUFDUCxNQUFNLEVBQUV0QixLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUN0QixJQUFJO1FBQzNCLE9BQU8rQixRQUFRQyxPQUFPLEdBQ3BCQyxJQUFJLENBQUMsSUFBTVgsTUFBTXNCLEtBQUs7SUFDekI7QUFDRDtBQUVBQyxPQUFPQyxPQUFPLEdBQUdqQyIsInNvdXJjZXMiOlsid2VicGFjazovL25vdGlvbi14LWV4YW1wbGUtZnVsbC8uL25vZGVfbW9kdWxlcy9rZXl2L3NyYy9pbmRleC5qcz85Mzg3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5jb25zdCBKU09OQiA9IHJlcXVpcmUoJ2pzb24tYnVmZmVyJyk7XG5cbmNvbnN0IGxvYWRTdG9yZSA9IG9wdHMgPT4ge1xuXHRjb25zdCBhZGFwdGVycyA9IHtcblx0XHRyZWRpczogJ0BrZXl2L3JlZGlzJyxcblx0XHRtb25nb2RiOiAnQGtleXYvbW9uZ28nLFxuXHRcdG1vbmdvOiAnQGtleXYvbW9uZ28nLFxuXHRcdHNxbGl0ZTogJ0BrZXl2L3NxbGl0ZScsXG5cdFx0cG9zdGdyZXNxbDogJ0BrZXl2L3Bvc3RncmVzJyxcblx0XHRwb3N0Z3JlczogJ0BrZXl2L3Bvc3RncmVzJyxcblx0XHRteXNxbDogJ0BrZXl2L215c3FsJ1xuXHR9O1xuXHRpZiAob3B0cy5hZGFwdGVyIHx8IG9wdHMudXJpKSB7XG5cdFx0Y29uc3QgYWRhcHRlciA9IG9wdHMuYWRhcHRlciB8fCAvXlteOl0qLy5leGVjKG9wdHMudXJpKVswXTtcblx0XHRyZXR1cm4gbmV3IChyZXF1aXJlKGFkYXB0ZXJzW2FkYXB0ZXJdKSkob3B0cyk7XG5cdH1cblxuXHRyZXR1cm4gbmV3IE1hcCgpO1xufTtcblxuY2xhc3MgS2V5diBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG5cdGNvbnN0cnVjdG9yKHVyaSwgb3B0cykge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5vcHRzID0gT2JqZWN0LmFzc2lnbihcblx0XHRcdHtcblx0XHRcdFx0bmFtZXNwYWNlOiAna2V5dicsXG5cdFx0XHRcdHNlcmlhbGl6ZTogSlNPTkIuc3RyaW5naWZ5LFxuXHRcdFx0XHRkZXNlcmlhbGl6ZTogSlNPTkIucGFyc2Vcblx0XHRcdH0sXG5cdFx0XHQodHlwZW9mIHVyaSA9PT0gJ3N0cmluZycpID8geyB1cmkgfSA6IHVyaSxcblx0XHRcdG9wdHNcblx0XHQpO1xuXG5cdFx0aWYgKCF0aGlzLm9wdHMuc3RvcmUpIHtcblx0XHRcdGNvbnN0IGFkYXB0ZXJPcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5vcHRzKTtcblx0XHRcdHRoaXMub3B0cy5zdG9yZSA9IGxvYWRTdG9yZShhZGFwdGVyT3B0cyk7XG5cdFx0fVxuXG5cdFx0aWYgKHR5cGVvZiB0aGlzLm9wdHMuc3RvcmUub24gPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdHRoaXMub3B0cy5zdG9yZS5vbignZXJyb3InLCBlcnIgPT4gdGhpcy5lbWl0KCdlcnJvcicsIGVycikpO1xuXHRcdH1cblxuXHRcdHRoaXMub3B0cy5zdG9yZS5uYW1lc3BhY2UgPSB0aGlzLm9wdHMubmFtZXNwYWNlO1xuXHR9XG5cblx0X2dldEtleVByZWZpeChrZXkpIHtcblx0XHRyZXR1cm4gYCR7dGhpcy5vcHRzLm5hbWVzcGFjZX06JHtrZXl9YDtcblx0fVxuXG5cdGdldChrZXksIG9wdHMpIHtcblx0XHRjb25zdCBrZXlQcmVmaXhlZCA9IHRoaXMuX2dldEtleVByZWZpeChrZXkpO1xuXHRcdGNvbnN0IHsgc3RvcmUgfSA9IHRoaXMub3B0cztcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcblx0XHRcdC50aGVuKCgpID0+IHN0b3JlLmdldChrZXlQcmVmaXhlZCkpXG5cdFx0XHQudGhlbihkYXRhID0+IHtcblx0XHRcdFx0cmV0dXJuICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpID8gdGhpcy5vcHRzLmRlc2VyaWFsaXplKGRhdGEpIDogZGF0YTtcblx0XHRcdH0pXG5cdFx0XHQudGhlbihkYXRhID0+IHtcblx0XHRcdFx0aWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAodHlwZW9mIGRhdGEuZXhwaXJlcyA9PT0gJ251bWJlcicgJiYgRGF0ZS5ub3coKSA+IGRhdGEuZXhwaXJlcykge1xuXHRcdFx0XHRcdHRoaXMuZGVsZXRlKGtleSk7XG5cdFx0XHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAob3B0cyAmJiBvcHRzLnJhdykgPyBkYXRhIDogZGF0YS52YWx1ZTtcblx0XHRcdH0pO1xuXHR9XG5cblx0c2V0KGtleSwgdmFsdWUsIHR0bCkge1xuXHRcdGNvbnN0IGtleVByZWZpeGVkID0gdGhpcy5fZ2V0S2V5UHJlZml4KGtleSk7XG5cdFx0aWYgKHR5cGVvZiB0dGwgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHR0dGwgPSB0aGlzLm9wdHMudHRsO1xuXHRcdH1cblxuXHRcdGlmICh0dGwgPT09IDApIHtcblx0XHRcdHR0bCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHRjb25zdCB7IHN0b3JlIH0gPSB0aGlzLm9wdHM7XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcblx0XHRcdC50aGVuKCgpID0+IHtcblx0XHRcdFx0Y29uc3QgZXhwaXJlcyA9ICh0eXBlb2YgdHRsID09PSAnbnVtYmVyJykgPyAoRGF0ZS5ub3coKSArIHR0bCkgOiBudWxsO1xuXHRcdFx0XHR2YWx1ZSA9IHsgdmFsdWUsIGV4cGlyZXMgfTtcblx0XHRcdFx0cmV0dXJuIHRoaXMub3B0cy5zZXJpYWxpemUodmFsdWUpO1xuXHRcdFx0fSlcblx0XHRcdC50aGVuKHZhbHVlID0+IHN0b3JlLnNldChrZXlQcmVmaXhlZCwgdmFsdWUsIHR0bCkpXG5cdFx0XHQudGhlbigoKSA9PiB0cnVlKTtcblx0fVxuXG5cdGRlbGV0ZShrZXkpIHtcblx0XHRjb25zdCBrZXlQcmVmaXhlZCA9IHRoaXMuX2dldEtleVByZWZpeChrZXkpO1xuXHRcdGNvbnN0IHsgc3RvcmUgfSA9IHRoaXMub3B0cztcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcblx0XHRcdC50aGVuKCgpID0+IHN0b3JlLmRlbGV0ZShrZXlQcmVmaXhlZCkpO1xuXHR9XG5cblx0Y2xlYXIoKSB7XG5cdFx0Y29uc3QgeyBzdG9yZSB9ID0gdGhpcy5vcHRzO1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuXHRcdFx0LnRoZW4oKCkgPT4gc3RvcmUuY2xlYXIoKSk7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBLZXl2O1xuIl0sIm5hbWVzIjpbIkV2ZW50RW1pdHRlciIsInJlcXVpcmUiLCJKU09OQiIsImxvYWRTdG9yZSIsIm9wdHMiLCJhZGFwdGVycyIsInJlZGlzIiwibW9uZ29kYiIsIm1vbmdvIiwic3FsaXRlIiwicG9zdGdyZXNxbCIsInBvc3RncmVzIiwibXlzcWwiLCJhZGFwdGVyIiwidXJpIiwiZXhlYyIsIk1hcCIsIktleXYiLCJjb25zdHJ1Y3RvciIsIk9iamVjdCIsImFzc2lnbiIsIm5hbWVzcGFjZSIsInNlcmlhbGl6ZSIsInN0cmluZ2lmeSIsImRlc2VyaWFsaXplIiwicGFyc2UiLCJzdG9yZSIsImFkYXB0ZXJPcHRzIiwib24iLCJlcnIiLCJlbWl0IiwiX2dldEtleVByZWZpeCIsImtleSIsImdldCIsImtleVByZWZpeGVkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwiZGF0YSIsInVuZGVmaW5lZCIsImV4cGlyZXMiLCJEYXRlIiwibm93IiwiZGVsZXRlIiwicmF3IiwidmFsdWUiLCJzZXQiLCJ0dGwiLCJjbGVhciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/keyv/src/index.js\n");

/***/ })

};
;